directive @typeOf(typeStr: String) on OBJECT

enum  DirectiveLocation {
	#type system
	SCHEMA
	SCALAR
	OBJECT
	FIELD_DEFINITION
	ARGUMENT_DEFINITION
	INTERFACE
	UNION
	ENUM
	ENUM_VALUE
	INPUT_OBJECT
	INPUT_FIELD_DEFINITION
	#executable
	QUERY
	MUTATION
	SUBSCRIPTION
	FIELD
	FRAGMENT_DEFINITION
	FRAGMENT_SPREAD
	INLINE_FRAGMENT
}

interface GraphQLType {
	name: String!
	description: String
}


type GraphQLInput {
	type: GraphQLInputType!
	nonNull: Boolean
	list: Boolean
	listNonNull: Boolean
}

type GraphQLOutput {
	type: GraphQLOutputType!
	nonNull: Boolean
	list: Boolean
	listNonNull: Boolean
}

type GraphQLInputArgument {
	name: String!
	value: GraphQLInput!
}


type GraphQLArgument {
	name: String!
  type: GraphQLInput!
	defaultValue: String
  description: String
}

type GraphQLDirective {
  name: String!
	locations: [DirectiveLocation]!
	args: [GraphQLArgument]
}

type GraphQLDirectiveInput {
  directive: GraphQLDirective!
	args: [GraphQLInputArgument]
}


type GraphQLField {
  type: GraphQLOutput!
  description: String
	args: [GraphQLArgument]
  directives: [GraphQLDirectiveInput]
}


type GraphQLInterfaceType implements GraphQLType @typeOf(typeStr:"GraphQLInterfaceType") {
  name: String!
  description: String
	fields: [GraphQLField]
	directives: [GraphQLDirective]
	_isTypeOf(type: String = "GraphQLInterfaceType"): String
}


type GraphQLObjectType implements GraphQLType @typeOf(typeStr:"GraphQLObjectType"){
  name: String!
	description: String
  interfaces: [GraphQLInterfaceType]
  fields: [GraphQLField]
	directives: [GraphQLDirective]
}

type GraphQLUnionType implements GraphQLType @typeOf(typeStr:"GraphQLUnionType"){
	name: String!
  description: String
	types:  [GraphQLObjectType]  
}

type GraphQLEnumType implements GraphQLType @typeOf(typeStr:"GraphQLEnumType"){
	name: String!
  description: String
	values:  [String]  
}

type GraphQLScalarType implements GraphQLType @typeOf(typeStr:"GraphQLScalarType"){
	name: String!
  description: String
}

type GraphQLInputObjectType implements GraphQLType @typeOf(typeStr:"GraphQLInputObjectType"){
	name: String!
  description: String
	fields: [GraphQLField]
}

union GraphQLInputType = GraphQLScalarType | GraphQLEnumType | GraphQLInputObjectType
union GraphQLOutputType = GraphQLScalarType | GraphQLObjectType | GraphQLInterfaceType | GraphQLUnionType | GraphQLEnumType

type schema {
	schema: [GraphQLType]
  query: GraphQLObjectType
  mutation: GraphQLObjectType
	subscription: GraphQLObjectType
}
type Query {
	schema: schema
}
type Mutation {
	addObjectType(name: String!, description: String): GraphQLObjectType
}
mutation addObjectType($name: String!, $desc: String!) {
  addObjectType(name: $name, description: $desc) {
    name
  }
}
