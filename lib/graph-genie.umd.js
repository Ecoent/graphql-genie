(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var instanceOf = function instanceOf(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (value) {
        var valueClass = value.constructor;
        var className = constructor.name;
        if (valueClass && valueClass.name === className) {
          throw new Error('Cannot use ' + className + ' "' + value + '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.');
        }
      }
      return false;
    }; /**
        * Copyright (c) 2015-present, Facebook, Inc.
        *
        * This source code is licensed under the MIT license found in the
        * LICENSE file in the root directory of this source tree.
        *
        *  strict
        */

    /**
     * A replacement for instanceof which includes an error warning when multi-realm
     * constructors are detected.
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function invariant(condition, message) {
      /* istanbul ignore else */
      if (!condition) {
        throw new Error(message);
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Returns true if a value is undefined, or NaN.
     */
    function isInvalid(value) {
      return value === undefined || value !== value;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * The set of allowed kind values for AST nodes.
     */
    var Kind = Object.freeze({
      // Name
      NAME: 'Name',

      // Document
      DOCUMENT: 'Document',
      OPERATION_DEFINITION: 'OperationDefinition',
      VARIABLE_DEFINITION: 'VariableDefinition',
      VARIABLE: 'Variable',
      SELECTION_SET: 'SelectionSet',
      FIELD: 'Field',
      ARGUMENT: 'Argument',

      // Fragments
      FRAGMENT_SPREAD: 'FragmentSpread',
      INLINE_FRAGMENT: 'InlineFragment',
      FRAGMENT_DEFINITION: 'FragmentDefinition',

      // Values
      INT: 'IntValue',
      FLOAT: 'FloatValue',
      STRING: 'StringValue',
      BOOLEAN: 'BooleanValue',
      NULL: 'NullValue',
      ENUM: 'EnumValue',
      LIST: 'ListValue',
      OBJECT: 'ObjectValue',
      OBJECT_FIELD: 'ObjectField',

      // Directives
      DIRECTIVE: 'Directive',

      // Types
      NAMED_TYPE: 'NamedType',
      LIST_TYPE: 'ListType',
      NON_NULL_TYPE: 'NonNullType',

      // Type System Definitions
      SCHEMA_DEFINITION: 'SchemaDefinition',
      OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',

      // Type Definitions
      SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
      OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
      FIELD_DEFINITION: 'FieldDefinition',
      INPUT_VALUE_DEFINITION: 'InputValueDefinition',
      INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
      UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
      ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
      ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
      INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',

      // Type Extensions
      SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
      OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
      INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
      UNION_TYPE_EXTENSION: 'UnionTypeExtension',
      ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
      INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',

      // Directive Definitions
      DIRECTIVE_DEFINITION: 'DirectiveDefinition'
    });

    /**
     * The enum type representing the possible kind values of AST nodes.
     */

    /**
     * Creates a keyed JS object from an array, given a function to produce the keys
     * and a function to produce the values from each item in the array.
     *
     *     const phoneBook = [
     *       { name: 'Jon', num: '555-1234' },
     *       { name: 'Jenny', num: '867-5309' }
     *     ]
     *
     *     // { Jon: '555-1234', Jenny: '867-5309' }
     *     const phonesByName = keyValMap(
     *       phoneBook,
     *       entry => entry.name,
     *       entry => entry.num
     *     )
     *
     */
    function keyValMap(list, keyFn, valFn) {
      return list.reduce(function (map, item) {
        return map[keyFn(item)] = valFn(item), map;
      }, Object.create(null));
    } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *  strict
       */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Produces a JavaScript value given a GraphQL Value AST.
     *
     * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
     * will reflect the provided GraphQL value AST.
     *
     * | GraphQL Value        | JavaScript Value |
     * | -------------------- | ---------------- |
     * | Input Object         | Object           |
     * | List                 | Array            |
     * | Boolean              | Boolean          |
     * | String / Enum        | String           |
     * | Int / Float          | Number           |
     * | Null                 | null             |
     *
     */
    function valueFromASTUntyped(valueNode, variables) {
      switch (valueNode.kind) {
        case Kind.NULL:
          return null;
        case Kind.INT:
          return parseInt(valueNode.value, 10);
        case Kind.FLOAT:
          return parseFloat(valueNode.value);
        case Kind.STRING:
        case Kind.ENUM:
        case Kind.BOOLEAN:
          return valueNode.value;
        case Kind.LIST:
          return valueNode.values.map(function (node) {
            return valueFromASTUntyped(node, variables);
          });
        case Kind.OBJECT:
          return keyValMap(valueNode.fields, function (field) {
            return field.name.value;
          }, function (field) {
            return valueFromASTUntyped(field.value, variables);
          });
        case Kind.VARIABLE:
          var variableName = valueNode.name.value;
          return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;
      }
      /* istanbul ignore next */
      throw new Error('Unexpected value kind: ' + valueNode.kind);
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    // Predicates & Assertions

    /**
     * These are all of the possible kinds of types.
     */


    function isType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
    }

    function assertType(type) {
      !isType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL type.') : void 0;
      return type;
    }

    /**
     * There are predicates for each kind of GraphQL type.
     */

    // eslint-disable-next-line no-redeclare
    function isScalarType(type) {
      return instanceOf(type, GraphQLScalarType);
    }

    function assertScalarType(type) {
      !isScalarType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Scalar type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isObjectType(type) {
      return instanceOf(type, GraphQLObjectType);
    }

    function assertObjectType(type) {
      !isObjectType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Object type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isInterfaceType(type) {
      return instanceOf(type, GraphQLInterfaceType);
    }

    function assertInterfaceType(type) {
      !isInterfaceType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Interface type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isUnionType(type) {
      return instanceOf(type, GraphQLUnionType);
    }

    function assertUnionType(type) {
      !isUnionType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Union type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isEnumType(type) {
      return instanceOf(type, GraphQLEnumType);
    }

    function assertEnumType(type) {
      !isEnumType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Enum type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isInputObjectType(type) {
      return instanceOf(type, GraphQLInputObjectType);
    }

    function assertInputObjectType(type) {
      !isInputObjectType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Input Object type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isListType(type) {
      return instanceOf(type, GraphQLList);
    }

    function assertListType(type) {
      !isListType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL List type.') : void 0;
      return type;
    }

    // eslint-disable-next-line no-redeclare
    function isNonNullType(type) {
      return instanceOf(type, GraphQLNonNull);
    }

    function assertNonNullType(type) {
      !isNonNullType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL Non-Null type.') : void 0;
      return type;
    }

    /**
     * These types may be used as input types for arguments and directives.
     */


    function isInputType(type) {
      return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
    }

    function assertInputType(type) {
      !isInputType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL input type.') : void 0;
      return type;
    }

    /**
     * These types may be used as output types as the result of fields.
     */


    function isOutputType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
    }

    function assertOutputType(type) {
      !isOutputType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL output type.') : void 0;
      return type;
    }

    /**
     * These types may describe types which may be leaf values.
     */


    function isLeafType(type) {
      return isScalarType(type) || isEnumType(type);
    }

    function assertLeafType(type) {
      !isLeafType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL leaf type.') : void 0;
      return type;
    }

    /**
     * These types may describe the parent context of a selection set.
     */


    function isCompositeType(type) {
      return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
    }

    function assertCompositeType(type) {
      !isCompositeType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL composite type.') : void 0;
      return type;
    }

    /**
     * These types may describe the parent context of a selection set.
     */


    function isAbstractType(type) {
      return isInterfaceType(type) || isUnionType(type);
    }

    function assertAbstractType(type) {
      !isAbstractType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL abstract type.') : void 0;
      return type;
    }

    /**
     * List Type Wrapper
     *
     * A list is a wrapping type which points to another type.
     * Lists are often created within the context of defining the fields of
     * an object type.
     *
     * Example:
     *
     *     const PersonType = new GraphQLObjectType({
     *       name: 'Person',
     *       fields: () => ({
     *         parents: { type: GraphQLList(PersonType) },
     *         children: { type: GraphQLList(PersonType) },
     *       })
     *     })
     *
     */

    // eslint-disable-next-line no-redeclare
    function GraphQLList(ofType) {
      if (this instanceof GraphQLList) {
        this.ofType = assertType(ofType);
      } else {
        return new GraphQLList(ofType);
      }
    }

    // Also provide toJSON and inspect aliases for toString.
    var listProto = GraphQLList.prototype;
    listProto.toString = listProto.toJSON = listProto.inspect = function toString() {
      return '[' + String(this.ofType) + ']';
    };

    /**
     * Non-Null Type Wrapper
     *
     * A non-null is a wrapping type which points to another type.
     * Non-null types enforce that their values are never null and can ensure
     * an error is raised if this ever occurs during a request. It is useful for
     * fields which you can make a strong guarantee on non-nullability, for example
     * usually the id field of a database row will never be null.
     *
     * Example:
     *
     *     const RowType = new GraphQLObjectType({
     *       name: 'Row',
     *       fields: () => ({
     *         id: { type: GraphQLNonNull(GraphQLString) },
     *       })
     *     })
     *
     * Note: the enforcement of non-nullability occurs within the executor.
     */

    // eslint-disable-next-line no-redeclare
    function GraphQLNonNull(ofType) {
      if (this instanceof GraphQLNonNull) {
        this.ofType = assertNullableType(ofType);
      } else {
        return new GraphQLNonNull(ofType);
      }
    }

    // Also provide toJSON and inspect aliases for toString.
    var nonNullProto = GraphQLNonNull.prototype;
    nonNullProto.toString = nonNullProto.toJSON = nonNullProto.inspect = function toString() {
      return String(this.ofType) + '!';
    };

    /**
     * These types wrap and modify other types
     */

    function isWrappingType(type) {
      return isListType(type) || isNonNullType(type);
    }

    function assertWrappingType(type) {
      !isWrappingType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL wrapping type.') : void 0;
      return type;
    }

    /**
     * These types can all accept null as a value.
     */


    function isNullableType(type) {
      return isType(type) && !isNonNullType(type);
    }

    function assertNullableType(type) {
      !isNullableType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL nullable type.') : void 0;
      return type;
    }

    /* eslint-disable no-redeclare */

    function getNullableType(type) {
      /* eslint-enable no-redeclare */
      if (type) {
        return isNonNullType(type) ? type.ofType : type;
      }
    }

    /**
     * These named types do not include modifiers like List or NonNull.
     */


    function isNamedType(type) {
      return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
    }

    function assertNamedType(type) {
      !isNamedType(type) ? invariant(0, 'Expected ' + String(type) + ' to be a GraphQL named type.') : void 0;
      return type;
    }

    /* eslint-disable no-redeclare */

    function getNamedType(type) {
      /* eslint-enable no-redeclare */
      if (type) {
        var unwrappedType = type;
        while (isWrappingType(unwrappedType)) {
          unwrappedType = unwrappedType.ofType;
        }
        return unwrappedType;
      }
    }

    /**
     * Used while defining GraphQL types to allow for circular references in
     * otherwise immutable type definitions.
     */


    function resolveThunk(thunk) {
      return typeof thunk === 'function' ? thunk() : thunk;
    }

    /**
     * Scalar Type Definition
     *
     * The leaf values of any request and input values to arguments are
     * Scalars (or Enums) and are defined with a name and a series of functions
     * used to parse input from ast or variables and to ensure validity.
     *
     * If a type's serialize function does not return a value (i.e. it returns
     * `undefined`) then an error will be raised and a `null` value will be returned
     * in the response. If the serialize function returns `null`, then no error will
     * be included in the response.
     *
     * Example:
     *
     *     const OddType = new GraphQLScalarType({
     *       name: 'Odd',
     *       serialize(value) {
     *         if (value % 2 === 1) {
     *           return value;
     *         }
     *       }
     *     });
     *
     */
    var GraphQLScalarType = function () {
      function GraphQLScalarType(config) {
        _classCallCheck(this, GraphQLScalarType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this._scalarConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
        !(typeof config.serialize === 'function') ? invariant(0, this.name + ' must provide "serialize" function. If this custom Scalar ' + 'is also used as an input type, ensure "parseValue" and "parseLiteral" ' + 'functions are also provided.') : void 0;
        if (config.parseValue || config.parseLiteral) {
          !(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function') ? invariant(0, this.name + ' must provide both "parseValue" and "parseLiteral" ' + 'functions.') : void 0;
        }
      }

      // Serializes an internal value to include in a response.


      GraphQLScalarType.prototype.serialize = function serialize(value) {
        var serializer = this._scalarConfig.serialize;
        return serializer(value);
      };

      // Parses an externally provided value to use as an input.


      GraphQLScalarType.prototype.parseValue = function parseValue(value) {
        var parser = this._scalarConfig.parseValue;
        if (isInvalid(value)) {
          return undefined;
        }
        return parser ? parser(value) : value;
      };

      // Parses an externally provided literal value to use as an input.


      GraphQLScalarType.prototype.parseLiteral = function parseLiteral(valueNode, variables) {
        var parser = this._scalarConfig.parseLiteral;
        return parser ? parser(valueNode, variables) : valueFromASTUntyped(valueNode, variables);
      };

      GraphQLScalarType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLScalarType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLScalarType.prototype.toJSON = GraphQLScalarType.prototype.inspect = GraphQLScalarType.prototype.toString;

    /**
     * Object Type Definition
     *
     * Almost all of the GraphQL types you define will be object types. Object types
     * have a name, but most importantly describe their fields.
     *
     * Example:
     *
     *     const AddressType = new GraphQLObjectType({
     *       name: 'Address',
     *       fields: {
     *         street: { type: GraphQLString },
     *         number: { type: GraphQLInt },
     *         formatted: {
     *           type: GraphQLString,
     *           resolve(obj) {
     *             return obj.number + ' ' + obj.street
     *           }
     *         }
     *       }
     *     });
     *
     * When two types need to refer to each other, or a type needs to refer to
     * itself in a field, you can use a function expression (aka a closure or a
     * thunk) to supply the fields lazily.
     *
     * Example:
     *
     *     const PersonType = new GraphQLObjectType({
     *       name: 'Person',
     *       fields: () => ({
     *         name: { type: GraphQLString },
     *         bestFriend: { type: PersonType },
     *       })
     *     });
     *
     */
    var GraphQLObjectType = function () {
      function GraphQLObjectType(config) {
        _classCallCheck(this, GraphQLObjectType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this.extensionASTNodes = config.extensionASTNodes;
        this.isTypeOf = config.isTypeOf;
        this._typeConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
        if (config.isTypeOf) {
          !(typeof config.isTypeOf === 'function') ? invariant(0, this.name + ' must provide "isTypeOf" as a function.') : void 0;
        }
      }

      GraphQLObjectType.prototype.getFields = function getFields() {
        return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
      };

      GraphQLObjectType.prototype.getInterfaces = function getInterfaces() {
        return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));
      };

      GraphQLObjectType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLObjectType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLObjectType.prototype.toJSON = GraphQLObjectType.prototype.inspect = GraphQLObjectType.prototype.toString;

    function defineInterfaces(type, interfacesThunk) {
      var interfaces = resolveThunk(interfacesThunk) || [];
      !Array.isArray(interfaces) ? invariant(0, type.name + ' interfaces must be an Array or a function which returns ' + 'an Array.') : void 0;
      return interfaces;
    }

    function defineFieldMap(type, fieldsThunk) {
      var fieldMap = resolveThunk(fieldsThunk) || {};
      !isPlainObj(fieldMap) ? invariant(0, type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;

      var resultFieldMap = Object.create(null);
      Object.keys(fieldMap).forEach(function (fieldName) {
        var fieldConfig = fieldMap[fieldName];
        !isPlainObj(fieldConfig) ? invariant(0, type.name + '.' + fieldName + ' field config must be an object') : void 0;
        !!fieldConfig.hasOwnProperty('isDeprecated') ? invariant(0, type.name + '.' + fieldName + ' should provide "deprecationReason" instead ' + 'of "isDeprecated".') : void 0;
        var field = _extends({}, fieldConfig, {
          isDeprecated: Boolean(fieldConfig.deprecationReason),
          name: fieldName
        });
        !isValidResolver(field.resolve) ? invariant(0, type.name + '.' + fieldName + ' field resolver must be a function if ' + ('provided, but got: ' + String(field.resolve) + '.')) : void 0;
        var argsConfig = fieldConfig.args;
        if (!argsConfig) {
          field.args = [];
        } else {
          !isPlainObj(argsConfig) ? invariant(0, type.name + '.' + fieldName + ' args must be an object with argument ' + 'names as keys.') : void 0;
          field.args = Object.keys(argsConfig).map(function (argName) {
            var arg = argsConfig[argName];
            return {
              name: argName,
              description: arg.description === undefined ? null : arg.description,
              type: arg.type,
              defaultValue: arg.defaultValue,
              astNode: arg.astNode
            };
          });
        }
        resultFieldMap[fieldName] = field;
      });
      return resultFieldMap;
    }

    function isPlainObj(obj) {
      return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);
    }

    // If a resolver is defined, it must be a function.
    function isValidResolver(resolver) {
      return resolver == null || typeof resolver === 'function';
    }

    /**
     * Interface Type Definition
     *
     * When a field can return one of a heterogeneous set of types, a Interface type
     * is used to describe what types are possible, what fields are in common across
     * all types, as well as a function to determine which type is actually used
     * when the field is resolved.
     *
     * Example:
     *
     *     const EntityType = new GraphQLInterfaceType({
     *       name: 'Entity',
     *       fields: {
     *         name: { type: GraphQLString }
     *       }
     *     });
     *
     */
    var GraphQLInterfaceType = function () {
      function GraphQLInterfaceType(config) {
        _classCallCheck(this, GraphQLInterfaceType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this.extensionASTNodes = config.extensionASTNodes;
        this.resolveType = config.resolveType;
        this._typeConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
        if (config.resolveType) {
          !(typeof config.resolveType === 'function') ? invariant(0, this.name + ' must provide "resolveType" as a function.') : void 0;
        }
      }

      GraphQLInterfaceType.prototype.getFields = function getFields() {
        return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
      };

      GraphQLInterfaceType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLInterfaceType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLInterfaceType.prototype.toJSON = GraphQLInterfaceType.prototype.inspect = GraphQLInterfaceType.prototype.toString;

    /**
     * Union Type Definition
     *
     * When a field can return one of a heterogeneous set of types, a Union type
     * is used to describe what types are possible as well as providing a function
     * to determine which type is actually used when the field is resolved.
     *
     * Example:
     *
     *     const PetType = new GraphQLUnionType({
     *       name: 'Pet',
     *       types: [ DogType, CatType ],
     *       resolveType(value) {
     *         if (value instanceof Dog) {
     *           return DogType;
     *         }
     *         if (value instanceof Cat) {
     *           return CatType;
     *         }
     *       }
     *     });
     *
     */
    var GraphQLUnionType = function () {
      function GraphQLUnionType(config) {
        _classCallCheck(this, GraphQLUnionType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this.resolveType = config.resolveType;
        this._typeConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
        if (config.resolveType) {
          !(typeof config.resolveType === 'function') ? invariant(0, this.name + ' must provide "resolveType" as a function.') : void 0;
        }
      }

      GraphQLUnionType.prototype.getTypes = function getTypes() {
        return this._types || (this._types = defineTypes(this, this._typeConfig.types));
      };

      GraphQLUnionType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLUnionType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLUnionType.prototype.toJSON = GraphQLUnionType.prototype.inspect = GraphQLUnionType.prototype.toString;

    function defineTypes(unionType, typesThunk) {
      var types = resolveThunk(typesThunk) || [];
      !Array.isArray(types) ? invariant(0, 'Must provide Array of types or a function which returns ' + ('such an array for Union ' + unionType.name + '.')) : void 0;
      return types;
    }

    /**
     * Enum Type Definition
     *
     * Some leaf values of requests and input values are Enums. GraphQL serializes
     * Enum values as strings, however internally Enums can be represented by any
     * kind of type, often integers.
     *
     * Example:
     *
     *     const RGBType = new GraphQLEnumType({
     *       name: 'RGB',
     *       values: {
     *         RED: { value: 0 },
     *         GREEN: { value: 1 },
     *         BLUE: { value: 2 }
     *       }
     *     });
     *
     * Note: If a value is not provided in a definition, the name of the enum value
     * will be used as its internal value.
     */
    var GraphQLEnumType /* <T> */ = function () {
      function GraphQLEnumType(config /* <T> */) {
        _classCallCheck(this, GraphQLEnumType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this._enumConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
      }

      GraphQLEnumType.prototype.getValues = function getValues() {
        return this._values || (this._values = defineEnumValues(this, this._enumConfig.values));
      };

      GraphQLEnumType.prototype.getValue = function getValue(name) {
        return this._getNameLookup()[name];
      };

      GraphQLEnumType.prototype.serialize = function serialize(value /* T */) {
        var enumValue = this._getValueLookup().get(value);
        if (enumValue) {
          return enumValue.name;
        }
      };

      GraphQLEnumType.prototype.parseValue = function parseValue(value) /* T */{
        if (typeof value === 'string') {
          var enumValue = this._getNameLookup()[value];
          if (enumValue) {
            return enumValue.value;
          }
        }
      };

      GraphQLEnumType.prototype.parseLiteral = function parseLiteral(valueNode, _variables) /* T */{
        // Note: variables will be resolved to a value before calling this function.
        if (valueNode.kind === Kind.ENUM) {
          var enumValue = this._getNameLookup()[valueNode.value];
          if (enumValue) {
            return enumValue.value;
          }
        }
      };

      GraphQLEnumType.prototype._getValueLookup = function _getValueLookup() {
        if (!this._valueLookup) {
          var lookup = new Map();
          this.getValues().forEach(function (value) {
            lookup.set(value.value, value);
          });
          this._valueLookup = lookup;
        }
        return this._valueLookup;
      };

      GraphQLEnumType.prototype._getNameLookup = function _getNameLookup() {
        if (!this._nameLookup) {
          var lookup = Object.create(null);
          this.getValues().forEach(function (value) {
            lookup[value.name] = value;
          });
          this._nameLookup = lookup;
        }
        return this._nameLookup;
      };

      GraphQLEnumType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLEnumType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLEnumType.prototype.toJSON = GraphQLEnumType.prototype.inspect = GraphQLEnumType.prototype.toString;

    function defineEnumValues(type, valueMap /* <T> */
    ) {
      !isPlainObj(valueMap) ? invariant(0, type.name + ' values must be an object with value names as keys.') : void 0;
      return Object.keys(valueMap).map(function (valueName) {
        var value = valueMap[valueName];
        !isPlainObj(value) ? invariant(0, type.name + '.' + valueName + ' must refer to an object with a "value" key ' + ('representing an internal value but got: ' + String(value) + '.')) : void 0;
        !!value.hasOwnProperty('isDeprecated') ? invariant(0, type.name + '.' + valueName + ' should provide "deprecationReason" instead ' + 'of "isDeprecated".') : void 0;
        return {
          name: valueName,
          description: value.description,
          isDeprecated: Boolean(value.deprecationReason),
          deprecationReason: value.deprecationReason,
          astNode: value.astNode,
          value: value.hasOwnProperty('value') ? value.value : valueName
        };
      });
    } /* <T> */


    /**
     * Input Object Type Definition
     *
     * An input object defines a structured collection of fields which may be
     * supplied to a field argument.
     *
     * Using `NonNull` will ensure that a value must be provided by the query
     *
     * Example:
     *
     *     const GeoPoint = new GraphQLInputObjectType({
     *       name: 'GeoPoint',
     *       fields: {
     *         lat: { type: GraphQLNonNull(GraphQLFloat) },
     *         lon: { type: GraphQLNonNull(GraphQLFloat) },
     *         alt: { type: GraphQLFloat, defaultValue: 0 },
     *       }
     *     });
     *
     */
    var GraphQLInputObjectType = function () {
      function GraphQLInputObjectType(config) {
        _classCallCheck(this, GraphQLInputObjectType);

        this.name = config.name;
        this.description = config.description;
        this.astNode = config.astNode;
        this._typeConfig = config;
        !(typeof config.name === 'string') ? invariant(0, 'Must provide name.') : void 0;
      }

      GraphQLInputObjectType.prototype.getFields = function getFields() {
        return this._fields || (this._fields = this._defineFieldMap());
      };

      GraphQLInputObjectType.prototype._defineFieldMap = function _defineFieldMap() {
        var _this = this;

        var fieldMap = resolveThunk(this._typeConfig.fields) || {};
        !isPlainObj(fieldMap) ? invariant(0, this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;
        var resultFieldMap = Object.create(null);
        Object.keys(fieldMap).forEach(function (fieldName) {
          var field = _extends({}, fieldMap[fieldName], {
            name: fieldName
          });
          !!field.hasOwnProperty('resolve') ? invariant(0, _this.name + '.' + fieldName + ' field type has a resolve property, but ' + 'Input Types cannot define resolvers.') : void 0;
          resultFieldMap[fieldName] = field;
        });
        return resultFieldMap;
      };

      GraphQLInputObjectType.prototype.toString = function toString() {
        return this.name;
      };

      return GraphQLInputObjectType;
    }();

    // Also provide toJSON and inspect aliases for toString.
    GraphQLInputObjectType.prototype.toJSON = GraphQLInputObjectType.prototype.toString;
    GraphQLInputObjectType.prototype.inspect = GraphQLInputObjectType.prototype.toString;

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    // As per the GraphQL Spec, Integers are only treated as valid when a valid
    // 32-bit signed integer, providing the broadest support across platforms.
    //
    // n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
    // they are internally represented as IEEE 754 doubles.
    var MAX_INT = 2147483647;
    var MIN_INT = -2147483648;

    function coerceInt(value) {
      if (value === '') {
        throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');
      }
      var num = Number(value);
      if (num !== num || num > MAX_INT || num < MIN_INT) {
        throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));
      }
      var int = Math.floor(num);
      if (int !== num) {
        throw new TypeError('Int cannot represent non-integer value: ' + String(value));
      }
      return int;
    }

    var GraphQLInt = new GraphQLScalarType({
      name: 'Int',
      description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',
      serialize: coerceInt,
      parseValue: coerceInt,
      parseLiteral: function parseLiteral(ast) {
        if (ast.kind === Kind.INT) {
          var num = parseInt(ast.value, 10);
          if (num <= MAX_INT && num >= MIN_INT) {
            return num;
          }
        }
        return undefined;
      }
    });

    function coerceFloat(value) {
      if (value === '') {
        throw new TypeError('Float cannot represent non numeric value: (empty string)');
      }
      var num = Number(value);
      if (num === num) {
        return num;
      }
      throw new TypeError('Float cannot represent non numeric value: ' + String(value));
    }

    var GraphQLFloat = new GraphQLScalarType({
      name: 'Float',
      description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',
      serialize: coerceFloat,
      parseValue: coerceFloat,
      parseLiteral: function parseLiteral(ast) {
        return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;
      }
    });

    function coerceString(value) {
      if (Array.isArray(value)) {
        throw new TypeError('String cannot represent an array value: [' + String(value) + ']');
      }
      return String(value);
    }

    var GraphQLString = new GraphQLScalarType({
      name: 'String',
      description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',
      serialize: coerceString,
      parseValue: coerceString,
      parseLiteral: function parseLiteral(ast) {
        return ast.kind === Kind.STRING ? ast.value : undefined;
      }
    });

    var GraphQLBoolean = new GraphQLScalarType({
      name: 'Boolean',
      description: 'The `Boolean` scalar type represents `true` or `false`.',
      serialize: Boolean,
      parseValue: Boolean,
      parseLiteral: function parseLiteral(ast) {
        return ast.kind === Kind.BOOLEAN ? ast.value : undefined;
      }
    });

    var GraphQLID = new GraphQLScalarType({
      name: 'ID',
      description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `"4"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',
      serialize: String,
      parseValue: String,
      parseLiteral: function parseLiteral(ast) {
        return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;
      }
    });

    var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];

    function isSpecifiedScalarType(type) {
      return isNamedType(type) && (
      // Would prefer to use specifiedScalarTypes.some(), however %checks needs
      // a simple expression.
      type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * The set of allowed directive location values.
     */
    var DirectiveLocation = Object.freeze({
      // Request Definitions
      QUERY: 'QUERY',
      MUTATION: 'MUTATION',
      SUBSCRIPTION: 'SUBSCRIPTION',
      FIELD: 'FIELD',
      FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
      FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
      INLINE_FRAGMENT: 'INLINE_FRAGMENT',
      // Type System Definitions
      SCHEMA: 'SCHEMA',
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      FIELD_DEFINITION: 'FIELD_DEFINITION',
      ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      ENUM_VALUE: 'ENUM_VALUE',
      INPUT_OBJECT: 'INPUT_OBJECT',
      INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
    });

    /**
     * The enum type representing the directive location values.
     */

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * Test if the given value is a GraphQL directive.
     */

    // eslint-disable-next-line no-redeclare
    function isDirective(directive) {
      return instanceOf(directive, GraphQLDirective);
    }

    /**
     * Directives are used by the GraphQL runtime as a way of modifying execution
     * behavior. Type system creators will usually not create these directly.
     */
    var GraphQLDirective = function GraphQLDirective(config) {
      _classCallCheck$1(this, GraphQLDirective);

      this.name = config.name;
      this.description = config.description;
      this.locations = config.locations;
      this.astNode = config.astNode;
      !config.name ? invariant(0, 'Directive must be named.') : void 0;
      !Array.isArray(config.locations) ? invariant(0, 'Must provide locations for directive.') : void 0;

      var args = config.args;
      if (!args) {
        this.args = [];
      } else {
        !!Array.isArray(args) ? invariant(0, '@' + config.name + ' args must be an object with argument names as keys.') : void 0;
        this.args = Object.keys(args).map(function (argName) {
          var arg = args[argName];
          return {
            name: argName,
            description: arg.description === undefined ? null : arg.description,
            type: arg.type,
            defaultValue: arg.defaultValue,
            astNode: arg.astNode
          };
        });
      }
    };

    /**
     * Used to conditionally include fields or fragments.
     */
    var GraphQLIncludeDirective = new GraphQLDirective({
      name: 'include',
      description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',
      locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: GraphQLNonNull(GraphQLBoolean),
          description: 'Included when true.'
        }
      }
    });

    /**
     * Used to conditionally skip (exclude) fields or fragments.
     */
    var GraphQLSkipDirective = new GraphQLDirective({
      name: 'skip',
      description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',
      locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],
      args: {
        if: {
          type: GraphQLNonNull(GraphQLBoolean),
          description: 'Skipped when true.'
        }
      }
    });

    /**
     * Constant string used for default reason for a deprecation.
     */
    var DEFAULT_DEPRECATION_REASON = 'No longer supported';

    /**
     * Used to declare element of a GraphQL schema as deprecated.
     */
    var GraphQLDeprecatedDirective = new GraphQLDirective({
      name: 'deprecated',
      description: 'Marks an element of a GraphQL schema as no longer supported.',
      locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],
      args: {
        reason: {
          type: GraphQLString,
          description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted ' + 'in [Markdown](https://daringfireball.net/projects/markdown/).',
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });

    /**
     * The full list of specified directives.
     */
    var specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];

    function isSpecifiedDirective(directive) {
      return specifiedDirectives.some(function (specifiedDirective) {
        return specifiedDirective.name === directive.name;
      });
    }

    /* eslint-disable no-redeclare */
    // $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var objectValues = Object.values || function (obj) {
      return Object.keys(obj).map(function (key) {
        return obj[key];
      });
    };

    /**
     * Copyright (c) 2016, Lee Byron
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * @flow
     * @ignore
     */

    /**
     * [Iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)
     * is a *protocol* which describes a standard way to produce a sequence of
     * values, typically the values of the Iterable represented by this Iterator.
     *
     * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterator-interface)
     * it can be utilized by any version of JavaScript.
     *
     * @external Iterator
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator|MDN Iteration protocols}
     */

    /**
     * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * is a *protocol* which when implemented allows a JavaScript object to define
     * their iteration behavior, such as what values are looped over in a
     * [`for...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)
     * loop or `iterall`'s `forEach` function. Many [built-in types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Builtin_iterables)
     * implement the Iterable protocol, including `Array` and `Map`.
     *
     * While described by the [ES2015 version of JavaScript](http://www.ecma-international.org/ecma-262/6.0/#sec-iterable-interface)
     * it can be utilized by any version of JavaScript.
     *
     * @external Iterable
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable|MDN Iteration protocols}
     */

    // In ES2015 environments, Symbol exists
    var SYMBOL /*: any */ = typeof Symbol === 'function' ? Symbol : void 0;

    // In ES2015 (or a polyfilled) environment, this will be Symbol.iterator
    var SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;

    /**
     * A property name to be used as the name of an Iterable's method responsible
     * for producing an Iterator, referred to as `@@iterator`. Typically represents
     * the value `Symbol.iterator` but falls back to the string `"@@iterator"` when
     * `Symbol.iterator` is not defined.
     *
     * Use `$$iterator` for defining new Iterables instead of `Symbol.iterator`,
     * but do not use it for accessing existing Iterables, instead use
     * {@link getIterator} or {@link isIterable}.
     *
     * @example
     *
     * var $$iterator = require('iterall').$$iterator
     *
     * function Counter (to) {
     *   this.to = to
     * }
     *
     * Counter.prototype[$$iterator] = function () {
     *   return {
     *     to: this.to,
     *     num: 0,
     *     next () {
     *       if (this.num >= this.to) {
     *         return { value: undefined, done: true }
     *       }
     *       return { value: this.num++, done: false }
     *     }
     *   }
     * }
     *
     * var counter = new Counter(3)
     * for (var number of counter) {
     *   console.log(number) // 0 ... 1 ... 2
     * }
     *
     * @type {Symbol|string}
     */
    /*:: declare export var $$iterator: '@@iterator'; */
    var $$iterator = SYMBOL_ITERATOR || '@@iterator';

    /**
     * Returns true if the provided object implements the Iterator protocol via
     * either implementing a `Symbol.iterator` or `"@@iterator"` method.
     *
     * @example
     *
     * var isIterable = require('iterall').isIterable
     * isIterable([ 1, 2, 3 ]) // true
     * isIterable('ABC') // true
     * isIterable({ length: 1, 0: 'Alpha' }) // false
     * isIterable({ key: 'value' }) // false
     * isIterable(new Map()) // true
     *
     * @param obj
     *   A value which might implement the Iterable protocol.
     * @return {boolean} true if Iterable.
     */
    /*:: declare export function isIterable(obj: any): boolean; */
    function isIterable(obj) {
      return !!getIteratorMethod(obj)
    }

    /**
     * Returns true if the provided object implements the Array-like protocol via
     * defining a positive-integer `length` property.
     *
     * @example
     *
     * var isArrayLike = require('iterall').isArrayLike
     * isArrayLike([ 1, 2, 3 ]) // true
     * isArrayLike('ABC') // true
     * isArrayLike({ length: 1, 0: 'Alpha' }) // true
     * isArrayLike({ key: 'value' }) // false
     * isArrayLike(new Map()) // false
     *
     * @param obj
     *   A value which might implement the Array-like protocol.
     * @return {boolean} true if Array-like.
     */
    /*:: declare export function isArrayLike(obj: any): boolean; */
    function isArrayLike(obj) {
      var length = obj != null && obj.length;
      return typeof length === 'number' && length >= 0 && length % 1 === 0
    }

    /**
     * Returns true if the provided object is an Object (i.e. not a string literal)
     * and is either Iterable or Array-like.
     *
     * This may be used in place of [Array.isArray()][isArray] to determine if an
     * object should be iterated-over. It always excludes string literals and
     * includes Arrays (regardless of if it is Iterable). It also includes other
     * Array-like objects such as NodeList, TypedArray, and Buffer.
     *
     * @example
     *
     * var isCollection = require('iterall').isCollection
     * isCollection([ 1, 2, 3 ]) // true
     * isCollection('ABC') // false
     * isCollection({ length: 1, 0: 'Alpha' }) // true
     * isCollection({ key: 'value' }) // false
     * isCollection(new Map()) // true
     *
     * @example
     *
     * var forEach = require('iterall').forEach
     * if (isCollection(obj)) {
     *   forEach(obj, function (value) {
     *     console.log(value)
     *   })
     * }
     *
     * @param obj
     *   An Object value which might implement the Iterable or Array-like protocols.
     * @return {boolean} true if Iterable or Array-like Object.
     */
    /*:: declare export function isCollection(obj: any): boolean; */
    function isCollection(obj) {
      return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj))
    }

    /**
     * If the provided object implements the Iterator protocol, its Iterator object
     * is returned. Otherwise returns undefined.
     *
     * @example
     *
     * var getIterator = require('iterall').getIterator
     * var iterator = getIterator([ 1, 2, 3 ])
     * iterator.next() // { value: 1, done: false }
     * iterator.next() // { value: 2, done: false }
     * iterator.next() // { value: 3, done: false }
     * iterator.next() // { value: undefined, done: true }
     *
     * @template T the type of each iterated value
     * @param {Iterable<T>} iterable
     *   An Iterable object which is the source of an Iterator.
     * @return {Iterator<T>} new Iterator instance.
     */
    /*:: declare export var getIterator:
      & (<+TValue>(iterable: Iterable<TValue>) => Iterator<TValue>)
      & ((iterable: mixed) => void | Iterator<mixed>); */
    function getIterator(iterable) {
      var method = getIteratorMethod(iterable);
      if (method) {
        return method.call(iterable)
      }
    }

    /**
     * If the provided object implements the Iterator protocol, the method
     * responsible for producing its Iterator object is returned.
     *
     * This is used in rare cases for performance tuning. This method must be called
     * with obj as the contextual this-argument.
     *
     * @example
     *
     * var getIteratorMethod = require('iterall').getIteratorMethod
     * var myArray = [ 1, 2, 3 ]
     * var method = getIteratorMethod(myArray)
     * if (method) {
     *   var iterator = method.call(myArray)
     * }
     *
     * @template T the type of each iterated value
     * @param {Iterable<T>} iterable
     *   An Iterable object which defines an `@@iterator` method.
     * @return {function(): Iterator<T>} `@@iterator` method.
     */
    /*:: declare export var getIteratorMethod:
      & (<+TValue>(iterable: Iterable<TValue>) => (() => Iterator<TValue>))
      & ((iterable: mixed) => (void | (() => Iterator<mixed>))); */
    function getIteratorMethod(iterable) {
      if (iterable != null) {
        var method =
          (SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR]) || iterable['@@iterator'];
        if (typeof method === 'function') {
          return method
        }
      }
    }

    /**
     * Similar to {@link getIterator}, this method returns a new Iterator given an
     * Iterable. However it will also create an Iterator for a non-Iterable
     * Array-like collection, such as Array in a non-ES2015 environment.
     *
     * `createIterator` is complimentary to `forEach`, but allows a "pull"-based
     * iteration as opposed to `forEach`'s "push"-based iteration.
     *
     * `createIterator` produces an Iterator for Array-likes with the same behavior
     * as ArrayIteratorPrototype described in the ECMAScript specification, and
     * does *not* skip over "holes".
     *
     * @example
     *
     * var createIterator = require('iterall').createIterator
     *
     * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }
     * var iterator = createIterator(myArraylike)
     * iterator.next() // { value: 'Alpha', done: false }
     * iterator.next() // { value: 'Bravo', done: false }
     * iterator.next() // { value: 'Charlie', done: false }
     * iterator.next() // { value: undefined, done: true }
     *
     * @template T the type of each iterated value
     * @param {Iterable<T>|{ length: number }} collection
     *   An Iterable or Array-like object to produce an Iterator.
     * @return {Iterator<T>} new Iterator instance.
     */
    /*:: declare export var createIterator:
      & (<+TValue>(collection: Iterable<TValue>) => Iterator<TValue>)
      & ((collection: {length: number}) => Iterator<mixed>)
      & ((collection: mixed) => (void | Iterator<mixed>)); */
    function createIterator(collection) {
      if (collection != null) {
        var iterator = getIterator(collection);
        if (iterator) {
          return iterator
        }
        if (isArrayLike(collection)) {
          return new ArrayLikeIterator(collection)
        }
      }
    }

    // When the object provided to `createIterator` is not Iterable but is
    // Array-like, this simple Iterator is created.
    function ArrayLikeIterator(obj) {
      this._o = obj;
      this._i = 0;
    }

    // Note: all Iterators are themselves Iterable.
    ArrayLikeIterator.prototype[$$iterator] = function() {
      return this
    };

    // A simple state-machine determines the IteratorResult returned, yielding
    // each value in the Array-like object in order of their indicies.
    ArrayLikeIterator.prototype.next = function() {
      if (this._o === void 0 || this._i >= this._o.length) {
        this._o = void 0;
        return { value: void 0, done: true }
      }
      return { value: this._o[this._i++], done: false }
    };

    /**
     * Given an object which either implements the Iterable protocol or is
     * Array-like, iterate over it, calling the `callback` at each iteration.
     *
     * Use `forEach` where you would expect to use a `for ... of` loop in ES6.
     * However `forEach` adheres to the behavior of [Array#forEach][] described in
     * the ECMAScript specification, skipping over "holes" in Array-likes. It will
     * also delegate to a `forEach` method on `collection` if one is defined,
     * ensuring native performance for `Arrays`.
     *
     * Similar to [Array#forEach][], the `callback` function accepts three
     * arguments, and is provided with `thisArg` as the calling context.
     *
     * Note: providing an infinite Iterator to forEach will produce an error.
     *
     * [Array#forEach]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
     *
     * @example
     *
     * var forEach = require('iterall').forEach
     *
     * forEach(myIterable, function (value, index, iterable) {
     *   console.log(value, index, iterable === myIterable)
     * })
     *
     * @example
     *
     * // ES6:
     * for (let value of myIterable) {
     *   console.log(value)
     * }
     *
     * // Any JavaScript environment:
     * forEach(myIterable, function (value) {
     *   console.log(value)
     * })
     *
     * @template T the type of each iterated value
     * @param {Iterable<T>|{ length: number }} collection
     *   The Iterable or array to iterate over.
     * @param {function(T, number, object)} callback
     *   Function to execute for each iteration, taking up to three arguments
     * @param [thisArg]
     *   Optional. Value to use as `this` when executing `callback`.
     */
    /*:: declare export var forEach:
      & (<+TValue, TCollection: Iterable<TValue>>(
          collection: TCollection,
          callbackFn: (value: TValue, index: number, collection: TCollection) => any,
          thisArg?: any
        ) => void)
      & (<TCollection: {length: number}>(
          collection: TCollection,
          callbackFn: (value: mixed, index: number, collection: TCollection) => any,
          thisArg?: any
        ) => void); */
    function forEach(collection, callback, thisArg) {
      if (collection != null) {
        if (typeof collection.forEach === 'function') {
          return collection.forEach(callback, thisArg)
        }
        var i = 0;
        var iterator = getIterator(collection);
        if (iterator) {
          var step;
          while (!(step = iterator.next()).done) {
            callback.call(thisArg, step.value, i++, collection);
            // Infinite Iterators could cause forEach to run forever.
            // After a very large number of iterations, produce an error.
            /* istanbul ignore if */
            if (i > 9999999) {
              throw new TypeError('Near-infinite iteration.')
            }
          }
        } else if (isArrayLike(collection)) {
          for (; i < collection.length; i++) {
            if (collection.hasOwnProperty(i)) {
              callback.call(thisArg, collection[i], i, collection);
            }
          }
        }
      }
    }

    /////////////////////////////////////////////////////
    //                                                 //
    //                 ASYNC ITERATORS                 //
    //                                                 //
    /////////////////////////////////////////////////////

    /**
     * [AsyncIterable](https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface)
     * is a *protocol* which when implemented allows a JavaScript object to define
     * an asynchronous iteration behavior, such as what values are looped over in
     * a [`for-await-of`](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements)
     * loop or `iterall`'s {@link forAwaitEach} function.
     *
     * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)
     * it can be utilized by any version of JavaScript.
     *
     * @external AsyncIterable
     * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterable-interface|Async Iteration Proposal}
     * @template T The type of each iterated value
     * @property {function (): AsyncIterator<T>} Symbol.asyncIterator
     *   A method which produces an AsyncIterator for this AsyncIterable.
     */

    /**
     * [AsyncIterator](https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface)
     * is a *protocol* which describes a standard way to produce and consume an
     * asynchronous sequence of values, typically the values of the
     * {@link AsyncIterable} represented by this {@link AsyncIterator}.
     *
     * AsyncIterator is similar to Observable or Stream. Like an {@link Iterator} it
     * also as a `next()` method, however instead of an IteratorResult,
     * calling this method returns a {@link Promise} for a IteratorResult.
     *
     * While described as a proposed addition to the [ES2017 version of JavaScript](https://tc39.github.io/proposal-async-iteration/)
     * it can be utilized by any version of JavaScript.
     *
     * @external AsyncIterator
     * @see {@link https://tc39.github.io/proposal-async-iteration/#sec-asynciterator-interface|Async Iteration Proposal}
     */

    // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator
    var SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;

    /**
     * A property name to be used as the name of an AsyncIterable's method
     * responsible for producing an Iterator, referred to as `@@asyncIterator`.
     * Typically represents the value `Symbol.asyncIterator` but falls back to the
     * string `"@@asyncIterator"` when `Symbol.asyncIterator` is not defined.
     *
     * Use `$$asyncIterator` for defining new AsyncIterables instead of
     * `Symbol.asyncIterator`, but do not use it for accessing existing Iterables,
     * instead use {@link getAsyncIterator} or {@link isAsyncIterable}.
     *
     * @example
     *
     * var $$asyncIterator = require('iterall').$$asyncIterator
     *
     * function Chirper (to) {
     *   this.to = to
     * }
     *
     * Chirper.prototype[$$asyncIterator] = function () {
     *   return {
     *     to: this.to,
     *     num: 0,
     *     next () {
     *       return new Promise(resolve => {
     *         if (this.num >= this.to) {
     *           resolve({ value: undefined, done: true })
     *         } else {
     *           setTimeout(() => {
     *             resolve({ value: this.num++, done: false })
     *           }, 1000)
     *         }
     *       })
     *     }
     *   }
     * }
     *
     * var chirper = new Chirper(3)
     * for await (var number of chirper) {
     *   console.log(number) // 0 ...wait... 1 ...wait... 2
     * }
     *
     * @type {Symbol|string}
     */
    /*:: declare export var $$asyncIterator: '@@asyncIterator'; */
    var $$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';

    /**
     * Returns true if the provided object implements the AsyncIterator protocol via
     * either implementing a `Symbol.asyncIterator` or `"@@asyncIterator"` method.
     *
     * @example
     *
     * var isAsyncIterable = require('iterall').isAsyncIterable
     * isAsyncIterable(myStream) // true
     * isAsyncIterable('ABC') // false
     *
     * @param obj
     *   A value which might implement the AsyncIterable protocol.
     * @return {boolean} true if AsyncIterable.
     */
    /*:: declare export function isAsyncIterable(obj: any): boolean; */
    function isAsyncIterable(obj) {
      return !!getAsyncIteratorMethod(obj)
    }

    /**
     * If the provided object implements the AsyncIterator protocol, its
     * AsyncIterator object is returned. Otherwise returns undefined.
     *
     * @example
     *
     * var getAsyncIterator = require('iterall').getAsyncIterator
     * var asyncIterator = getAsyncIterator(myStream)
     * asyncIterator.next().then(console.log) // { value: 1, done: false }
     * asyncIterator.next().then(console.log) // { value: 2, done: false }
     * asyncIterator.next().then(console.log) // { value: 3, done: false }
     * asyncIterator.next().then(console.log) // { value: undefined, done: true }
     *
     * @template T the type of each iterated value
     * @param {AsyncIterable<T>} asyncIterable
     *   An AsyncIterable object which is the source of an AsyncIterator.
     * @return {AsyncIterator<T>} new AsyncIterator instance.
     */
    /*:: declare export var getAsyncIterator:
      & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => AsyncIterator<TValue>)
      & ((asyncIterable: mixed) => (void | AsyncIterator<mixed>)); */
    function getAsyncIterator(asyncIterable) {
      var method = getAsyncIteratorMethod(asyncIterable);
      if (method) {
        return method.call(asyncIterable)
      }
    }

    /**
     * If the provided object implements the AsyncIterator protocol, the method
     * responsible for producing its AsyncIterator object is returned.
     *
     * This is used in rare cases for performance tuning. This method must be called
     * with obj as the contextual this-argument.
     *
     * @example
     *
     * var getAsyncIteratorMethod = require('iterall').getAsyncIteratorMethod
     * var method = getAsyncIteratorMethod(myStream)
     * if (method) {
     *   var asyncIterator = method.call(myStream)
     * }
     *
     * @template T the type of each iterated value
     * @param {AsyncIterable<T>} asyncIterable
     *   An AsyncIterable object which defines an `@@asyncIterator` method.
     * @return {function(): AsyncIterator<T>} `@@asyncIterator` method.
     */
    /*:: declare export var getAsyncIteratorMethod:
      & (<+TValue>(asyncIterable: AsyncIterable<TValue>) => (() => AsyncIterator<TValue>))
      & ((asyncIterable: mixed) => (void | (() => AsyncIterator<mixed>))); */
    function getAsyncIteratorMethod(asyncIterable) {
      if (asyncIterable != null) {
        var method =
          (SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR]) ||
          asyncIterable['@@asyncIterator'];
        if (typeof method === 'function') {
          return method
        }
      }
    }

    /**
     * Similar to {@link getAsyncIterator}, this method returns a new AsyncIterator
     * given an AsyncIterable. However it will also create an AsyncIterator for a
     * non-async Iterable as well as non-Iterable Array-like collection, such as
     * Array in a pre-ES2015 environment.
     *
     * `createAsyncIterator` is complimentary to `forAwaitEach`, but allows a
     * buffering "pull"-based iteration as opposed to `forAwaitEach`'s
     * "push"-based iteration.
     *
     * `createAsyncIterator` produces an AsyncIterator for non-async Iterables as
     * described in the ECMAScript proposal [Async-from-Sync Iterator Objects](https://tc39.github.io/proposal-async-iteration/#sec-async-from-sync-iterator-objects).
     *
     * > Note: Creating `AsyncIterator`s requires the existence of `Promise`.
     * > While `Promise` has been available in modern browsers for a number of
     * > years, legacy browsers (like IE 11) may require a polyfill.
     *
     * @example
     *
     * var createAsyncIterator = require('iterall').createAsyncIterator
     *
     * var myArraylike = { length: 3, 0: 'Alpha', 1: 'Bravo', 2: 'Charlie' }
     * var iterator = createAsyncIterator(myArraylike)
     * iterator.next().then(console.log) // { value: 'Alpha', done: false }
     * iterator.next().then(console.log) // { value: 'Bravo', done: false }
     * iterator.next().then(console.log) // { value: 'Charlie', done: false }
     * iterator.next().then(console.log) // { value: undefined, done: true }
     *
     * @template T the type of each iterated value
     * @param {AsyncIterable<T>|Iterable<T>|{ length: number }} source
     *   An AsyncIterable, Iterable, or Array-like object to produce an Iterator.
     * @return {AsyncIterator<T>} new AsyncIterator instance.
     */
    /*:: declare export var createAsyncIterator:
      & (<+TValue>(
          collection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>
        ) => AsyncIterator<TValue>)
      & ((collection: {length: number}) => AsyncIterator<mixed>)
      & ((collection: mixed) => (void | AsyncIterator<mixed>)); */
    function createAsyncIterator(source) {
      if (source != null) {
        var asyncIterator = getAsyncIterator(source);
        if (asyncIterator) {
          return asyncIterator
        }
        var iterator = createIterator(source);
        if (iterator) {
          return new AsyncFromSyncIterator(iterator)
        }
      }
    }

    // When the object provided to `createAsyncIterator` is not AsyncIterable but is
    // sync Iterable, this simple wrapper is created.
    function AsyncFromSyncIterator(iterator) {
      this._i = iterator;
    }

    // Note: all AsyncIterators are themselves AsyncIterable.
    AsyncFromSyncIterator.prototype[$$asyncIterator] = function() {
      return this
    };

    // A simple state-machine determines the IteratorResult returned, yielding
    // each value in the Array-like object in order of their indicies.
    AsyncFromSyncIterator.prototype.next = function() {
      var step = this._i.next();
      return Promise.resolve(step.value).then(function(value) {
        return { value: value, done: step.done }
      })
    };

    /**
     * Given an object which either implements the AsyncIterable protocol or is
     * Array-like, iterate over it, calling the `callback` at each iteration.
     *
     * Use `forAwaitEach` where you would expect to use a [for-await-of](https://tc39.github.io/proposal-async-iteration/#sec-for-in-and-for-of-statements) loop.
     *
     * Similar to [Array#forEach][], the `callback` function accepts three
     * arguments, and is provided with `thisArg` as the calling context.
     *
     * > Note: Using `forAwaitEach` requires the existence of `Promise`.
     * > While `Promise` has been available in modern browsers for a number of
     * > years, legacy browsers (like IE 11) may require a polyfill.
     *
     * @example
     *
     * var forAwaitEach = require('iterall').forAwaitEach
     *
     * forAwaitEach(myIterable, function (value, index, iterable) {
     *   console.log(value, index, iterable === myIterable)
     * })
     *
     * @example
     *
     * // ES2017:
     * for await (let value of myAsyncIterable) {
     *   console.log(await doSomethingAsync(value))
     * }
     * console.log('done')
     *
     * // Any JavaScript environment:
     * forAwaitEach(myAsyncIterable, function (value) {
     *   return doSomethingAsync(value).then(console.log)
     * }).then(function () {
     *   console.log('done')
     * })
     *
     * @template T the type of each iterated value
     * @param {AsyncIterable<T>|Iterable<Promise<T> | T>|{ length: number }} source
     *   The AsyncIterable or array to iterate over.
     * @param {function(T, number, object)} callback
     *   Function to execute for each iteration, taking up to three arguments
     * @param [thisArg]
     *   Optional. Value to use as `this` when executing `callback`.
     */
    /*:: declare export var forAwaitEach:
      & (<+TValue, TCollection: Iterable<Promise<TValue> | TValue> | AsyncIterable<TValue>>(
          collection: TCollection,
          callbackFn: (value: TValue, index: number, collection: TCollection) => any,
          thisArg?: any
        ) => Promise<void>)
      & (<TCollection: { length: number }>(
          collection: TCollection,
          callbackFn: (value: mixed, index: number, collection: TCollection) => any,
          thisArg?: any
        ) => Promise<void>); */
    function forAwaitEach(source, callback, thisArg) {
      var asyncIterator = createAsyncIterator(source);
      if (asyncIterator) {
        var i = 0;
        return new Promise(function(resolve, reject) {
          function next() {
            asyncIterator
              .next()
              .then(function(step) {
                if (!step.done) {
                  Promise.resolve(callback.call(thisArg, step.value, i++, source))
                    .then(next)
                    .catch(reject);
                } else {
                  resolve();
                }
                // Explicitly return null, silencing bluebird-style warnings.
                return null
              })
              .catch(reject);
            // Explicitly return null, silencing bluebird-style warnings.
            return null
          }
          next();
        })
      }
    }

    var iterall = /*#__PURE__*/Object.freeze({
        $$iterator: $$iterator,
        isIterable: isIterable,
        isArrayLike: isArrayLike,
        isCollection: isCollection,
        getIterator: getIterator,
        getIteratorMethod: getIteratorMethod,
        createIterator: createIterator,
        forEach: forEach,
        $$asyncIterator: $$asyncIterator,
        isAsyncIterable: isAsyncIterable,
        getAsyncIterator: getAsyncIterator,
        getAsyncIteratorMethod: getAsyncIteratorMethod,
        createAsyncIterator: createAsyncIterator,
        forAwaitEach: forAwaitEach
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Returns true if a value is null, undefined, or NaN.
     */
    function isNullish(value) {
      return value === null || value === undefined || value !== value;
    }

    var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    /**
     * Produces a GraphQL Value AST given a JavaScript value.
     *
     * A GraphQL type must be provided, which will be used to interpret different
     * JavaScript values.
     *
     * | JSON Value    | GraphQL Value        |
     * | ------------- | -------------------- |
     * | Object        | Input Object         |
     * | Array         | List                 |
     * | Boolean       | Boolean              |
     * | String        | String / Enum Value  |
     * | Number        | Int / Float          |
     * | Mixed         | Enum Value           |
     * | null          | NullValue            |
     *
     */
    function astFromValue(value, type) {
      if (isNonNullType(type)) {
        var astValue = astFromValue(value, type.ofType);
        if (astValue && astValue.kind === Kind.NULL) {
          return null;
        }
        return astValue;
      }

      // only explicit null, not undefined, NaN
      if (value === null) {
        return { kind: Kind.NULL };
      }

      // undefined, NaN
      if (isInvalid(value)) {
        return null;
      }

      // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
      // the value is not an array, convert the value using the list's item type.
      if (isListType(type)) {
        var itemType = type.ofType;
        if (isCollection(value)) {
          var valuesNodes = [];
          forEach(value, function (item) {
            var itemNode = astFromValue(item, itemType);
            if (itemNode) {
              valuesNodes.push(itemNode);
            }
          });
          return { kind: Kind.LIST, values: valuesNodes };
        }
        return astFromValue(value, itemType);
      }

      // Populate the fields of the input object by creating ASTs from each value
      // in the JavaScript object according to the fields in the input type.
      if (isInputObjectType(type)) {
        if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof$1(value)) !== 'object') {
          return null;
        }
        var fields = objectValues(type.getFields());
        var fieldNodes = [];
        fields.forEach(function (field) {
          var fieldValue = astFromValue(value[field.name], field.type);
          if (fieldValue) {
            fieldNodes.push({
              kind: Kind.OBJECT_FIELD,
              name: { kind: Kind.NAME, value: field.name },
              value: fieldValue
            });
          }
        });
        return { kind: Kind.OBJECT, fields: fieldNodes };
      }

      if (isScalarType(type) || isEnumType(type)) {
        // Since value is an internally represented value, it must be serialized
        // to an externally represented value before converting into an AST.
        var serialized = type.serialize(value);
        if (isNullish(serialized)) {
          return null;
        }

        // Others serialize based on their corresponding JavaScript scalar types.
        if (typeof serialized === 'boolean') {
          return { kind: Kind.BOOLEAN, value: serialized };
        }

        // JavaScript numbers can be Int or Float values.
        if (typeof serialized === 'number') {
          var stringNum = String(serialized);
          return integerStringRegExp.test(stringNum) ? { kind: Kind.INT, value: stringNum } : { kind: Kind.FLOAT, value: stringNum };
        }

        if (typeof serialized === 'string') {
          // Enum types use Enum literals.
          if (isEnumType(type)) {
            return { kind: Kind.ENUM, value: serialized };
          }

          // ID types can use Int literals.
          if (type === GraphQLID && integerStringRegExp.test(serialized)) {
            return { kind: Kind.INT, value: serialized };
          }

          return {
            kind: Kind.STRING,
            value: serialized
          };
        }

        throw new TypeError('Cannot convert value to AST: ' + String(serialized));
      }

      /* istanbul ignore next */
      throw new Error('Unknown type: ' + type + '.');
    }

    /**
     * IntValue:
     *   - NegativeSign? 0
     *   - NegativeSign? NonZeroDigit ( Digit+ )?
     */
    var integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;

    /**
     * A visitor is comprised of visit functions, which are called on each node
     * during the visitor's traversal.
     */


    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var QueryDocumentKeys = {
      Name: [],

      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],

      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name',
      // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],

      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],

      Directive: ['name', 'arguments'],

      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],

      SchemaDefinition: ['directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],

      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],

      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields'],

      DirectiveDefinition: ['description', 'name', 'arguments', 'locations']
    };

    /**
     * A KeyMap describes each the traversable properties of each kind of node.
     */


    var BREAK = {};

    /**
     * visit() will walk through an AST using a depth first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */
    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

      /* eslint-disable no-undef-init */
      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;
        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();
          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};
              for (var k in node) {
                if (node.hasOwnProperty(k)) {
                  clone[k] = node[k];
                }
              }
              node = clone;
            }
            var editOffset = 0;
            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];
              if (inArray) {
                editKey -= editOffset;
              }
              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }
          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;
          if (node === null || node === undefined) {
            continue;
          }
          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;
        if (!Array.isArray(node)) {
          if (!isNode(node)) {
            throw new Error('Invalid AST Node: ' + JSON.stringify(node));
          }
          var visitFn = getVisitFn(visitor, node.kind, isLeaving);
          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);
              if (!isLeaving) {
                if (isNode(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };
          inArray = Array.isArray(node);
          keys = inArray ? node : visitorKeys[node.kind] || [];
          index = -1;
          edits = [];
          if (parent) {
            ancestors.push(parent);
          }
          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }

    function isNode(maybeNode) {
      return Boolean(maybeNode && typeof maybeNode.kind === 'string');
    }

    /**
     * Creates a new visitor instance which delegates to many visitors to run in
     * parallel. Each visitor will be visited for each node before moving on.
     *
     * If a prior visitor edits a node, no following visitors will see that node.
     */
    function visitInParallel(visitors) {
      var skipping = new Array(visitors.length);

      return {
        enter: function enter(node) {
          for (var i = 0; i < visitors.length; i++) {
            if (!skipping[i]) {
              var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);
              if (fn) {
                var result = fn.apply(visitors[i], arguments);
                if (result === false) {
                  skipping[i] = node;
                } else if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== undefined) {
                  return result;
                }
              }
            }
          }
        },
        leave: function leave(node) {
          for (var i = 0; i < visitors.length; i++) {
            if (!skipping[i]) {
              var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);
              if (fn) {
                var result = fn.apply(visitors[i], arguments);
                if (result === BREAK) {
                  skipping[i] = BREAK;
                } else if (result !== undefined && result !== false) {
                  return result;
                }
              }
            } else if (skipping[i] === node) {
              skipping[i] = null;
            }
          }
        }
      };
    }

    /**
     * Creates a new visitor instance which maintains a provided TypeInfo instance
     * along with visiting visitor.
     */
    function visitWithTypeInfo(typeInfo, visitor) {
      return {
        enter: function enter(node) {
          typeInfo.enter(node);
          var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);
          if (fn) {
            var result = fn.apply(visitor, arguments);
            if (result !== undefined) {
              typeInfo.leave(node);
              if (isNode(result)) {
                typeInfo.enter(result);
              }
            }
            return result;
          }
        },
        leave: function leave(node) {
          var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);
          var result = void 0;
          if (fn) {
            result = fn.apply(visitor, arguments);
          }
          typeInfo.leave(node);
          return result;
        }
      };
    }

    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */
    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];
      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }
        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }
          var specificKindVisitor = specificVisitor[kind];
          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */
    function print(ast) {
      return visit(ast, { leave: printDocASTReducer });
    }

    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },

      // Document

      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },

      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet;
        // Anonymous queries with no directives or variable definitions can use
        // the query short form.
        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },


      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue;
        return variable + ': ' + type + wrap(' = ', defaultValue);
      },

      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },

      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');
      },

      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },

      // Fragments

      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },

      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },

      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (
          // Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },

      // Value

      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },

      // Directive

      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },

      // Type

      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },

      // Type System Definitions

      SchemaDefinition: function SchemaDefinition(_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      },

      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },

      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),

      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),

      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));
      }),

      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),

      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, join(directives, ' '), block(fields)], ' ');
      }),

      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),

      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),

      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),

      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),

      ScalarTypeExtension: function ScalarTypeExtension(_ref31) {
        var name = _ref31.name,
            directives = _ref31.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },

      ObjectTypeExtension: function ObjectTypeExtension(_ref32) {
        var name = _ref32.name,
            interfaces = _ref32.interfaces,
            directives = _ref32.directives,
            fields = _ref32.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },

      InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives,
            fields = _ref33.fields;
        return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');
      },

      UnionTypeExtension: function UnionTypeExtension(_ref34) {
        var name = _ref34.name,
            directives = _ref34.directives,
            types = _ref34.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },

      EnumTypeExtension: function EnumTypeExtension(_ref35) {
        var name = _ref35.name,
            directives = _ref35.directives,
            values = _ref35.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },

      InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            fields = _ref36.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      },

      DirectiveDefinition: addDescription(function (_ref37) {
        var name = _ref37.name,
            args = _ref37.arguments,
            locations = _ref37.locations;
        return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');
      })
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }

    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */
    function join(maybeArray, separator) {
      return maybeArray ? maybeArray.filter(function (x) {
        return x;
      }).join(separator || '') : '';
    }

    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */
    function block(array) {
      return array && array.length !== 0 ? '{\n' + indent(join(array, '\n')) + '\n}' : '';
    }

    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise
     * print an empty string.
     */
    function wrap(start, maybeString, end) {
      return maybeString ? start + maybeString + (end || '') : '';
    }

    function indent(maybeString) {
      return maybeString && '  ' + maybeString.replace(/\n/g, '\n  ');
    }

    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     */
    function printBlockString(value, isDescription) {
      var escaped = value.replace(/"""/g, '\\"""');
      return (value[0] === ' ' || value[0] === '\t') && value.indexOf('\n') === -1 ? '"""' + escaped.replace(/"$/, '"\n') + '"""' : '"""\n' + (isDescription ? escaped : indent(escaped)) + '\n"""';
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    var __Schema = new GraphQLObjectType({
      name: '__Schema',
      isIntrospection: true,
      description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',
      fields: function fields() {
        return {
          types: {
            description: 'A list of all types supported by this server.',
            type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),
            resolve: function resolve(schema) {
              return objectValues(schema.getTypeMap());
            }
          },
          queryType: {
            description: 'The type that query operations will be rooted at.',
            type: GraphQLNonNull(__Type),
            resolve: function resolve(schema) {
              return schema.getQueryType();
            }
          },
          mutationType: {
            description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',
            type: __Type,
            resolve: function resolve(schema) {
              return schema.getMutationType();
            }
          },
          subscriptionType: {
            description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',
            type: __Type,
            resolve: function resolve(schema) {
              return schema.getSubscriptionType();
            }
          },
          directives: {
            description: 'A list of all directives supported by this server.',
            type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),
            resolve: function resolve(schema) {
              return schema.getDirectives();
            }
          }
        };
      }
    });

    var __Directive = new GraphQLObjectType({
      name: '__Directive',
      isIntrospection: true,
      description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + "\n\nIn some cases, you need to provide options to alter GraphQL's " + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',
      fields: function fields() {
        return {
          name: { type: GraphQLNonNull(GraphQLString) },
          description: { type: GraphQLString },
          locations: {
            type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation)))
          },
          args: {
            type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),
            resolve: function resolve(directive) {
              return directive.args || [];
            }
          },
          // NOTE: the following three fields are deprecated and are no longer part
          // of the GraphQL specification.
          onOperation: {
            deprecationReason: 'Use `locations`.',
            type: GraphQLNonNull(GraphQLBoolean),
            resolve: function resolve(d) {
              return d.locations.indexOf(DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(DirectiveLocation.SUBSCRIPTION) !== -1;
            }
          },
          onFragment: {
            deprecationReason: 'Use `locations`.',
            type: GraphQLNonNull(GraphQLBoolean),
            resolve: function resolve(d) {
              return d.locations.indexOf(DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(DirectiveLocation.FRAGMENT_DEFINITION) !== -1;
            }
          },
          onField: {
            deprecationReason: 'Use `locations`.',
            type: GraphQLNonNull(GraphQLBoolean),
            resolve: function resolve(d) {
              return d.locations.indexOf(DirectiveLocation.FIELD) !== -1;
            }
          }
        };
      }
    });

    var __DirectiveLocation = new GraphQLEnumType({
      name: '__DirectiveLocation',
      isIntrospection: true,
      description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',
      values: {
        QUERY: {
          value: DirectiveLocation.QUERY,
          description: 'Location adjacent to a query operation.'
        },
        MUTATION: {
          value: DirectiveLocation.MUTATION,
          description: 'Location adjacent to a mutation operation.'
        },
        SUBSCRIPTION: {
          value: DirectiveLocation.SUBSCRIPTION,
          description: 'Location adjacent to a subscription operation.'
        },
        FIELD: {
          value: DirectiveLocation.FIELD,
          description: 'Location adjacent to a field.'
        },
        FRAGMENT_DEFINITION: {
          value: DirectiveLocation.FRAGMENT_DEFINITION,
          description: 'Location adjacent to a fragment definition.'
        },
        FRAGMENT_SPREAD: {
          value: DirectiveLocation.FRAGMENT_SPREAD,
          description: 'Location adjacent to a fragment spread.'
        },
        INLINE_FRAGMENT: {
          value: DirectiveLocation.INLINE_FRAGMENT,
          description: 'Location adjacent to an inline fragment.'
        },
        SCHEMA: {
          value: DirectiveLocation.SCHEMA,
          description: 'Location adjacent to a schema definition.'
        },
        SCALAR: {
          value: DirectiveLocation.SCALAR,
          description: 'Location adjacent to a scalar definition.'
        },
        OBJECT: {
          value: DirectiveLocation.OBJECT,
          description: 'Location adjacent to an object type definition.'
        },
        FIELD_DEFINITION: {
          value: DirectiveLocation.FIELD_DEFINITION,
          description: 'Location adjacent to a field definition.'
        },
        ARGUMENT_DEFINITION: {
          value: DirectiveLocation.ARGUMENT_DEFINITION,
          description: 'Location adjacent to an argument definition.'
        },
        INTERFACE: {
          value: DirectiveLocation.INTERFACE,
          description: 'Location adjacent to an interface definition.'
        },
        UNION: {
          value: DirectiveLocation.UNION,
          description: 'Location adjacent to a union definition.'
        },
        ENUM: {
          value: DirectiveLocation.ENUM,
          description: 'Location adjacent to an enum definition.'
        },
        ENUM_VALUE: {
          value: DirectiveLocation.ENUM_VALUE,
          description: 'Location adjacent to an enum value definition.'
        },
        INPUT_OBJECT: {
          value: DirectiveLocation.INPUT_OBJECT,
          description: 'Location adjacent to an input object type definition.'
        },
        INPUT_FIELD_DEFINITION: {
          value: DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: 'Location adjacent to an input object field definition.'
        }
      }
    });

    var __Type = new GraphQLObjectType({
      name: '__Type',
      isIntrospection: true,
      description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\n\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',
      fields: function fields() {
        return {
          kind: {
            type: GraphQLNonNull(__TypeKind),
            resolve: function resolve(type) {
              if (isScalarType(type)) {
                return TypeKind.SCALAR;
              } else if (isObjectType(type)) {
                return TypeKind.OBJECT;
              } else if (isInterfaceType(type)) {
                return TypeKind.INTERFACE;
              } else if (isUnionType(type)) {
                return TypeKind.UNION;
              } else if (isEnumType(type)) {
                return TypeKind.ENUM;
              } else if (isInputObjectType(type)) {
                return TypeKind.INPUT_OBJECT;
              } else if (isListType(type)) {
                return TypeKind.LIST;
              } else if (isNonNullType(type)) {
                return TypeKind.NON_NULL;
              }
              throw new Error('Unknown kind of type: ' + type);
            }
          },
          name: { type: GraphQLString },
          description: { type: GraphQLString },
          fields: {
            type: GraphQLList(GraphQLNonNull(__Field)),
            args: {
              includeDeprecated: { type: GraphQLBoolean, defaultValue: false }
            },
            resolve: function resolve(type, _ref) {
              var includeDeprecated = _ref.includeDeprecated;

              if (isObjectType(type) || isInterfaceType(type)) {
                var fields = objectValues(type.getFields());
                if (!includeDeprecated) {
                  fields = fields.filter(function (field) {
                    return !field.deprecationReason;
                  });
                }
                return fields;
              }
              return null;
            }
          },
          interfaces: {
            type: GraphQLList(GraphQLNonNull(__Type)),
            resolve: function resolve(type) {
              if (isObjectType(type)) {
                return type.getInterfaces();
              }
            }
          },
          possibleTypes: {
            type: GraphQLList(GraphQLNonNull(__Type)),
            resolve: function resolve(type, args, context, _ref2) {
              var schema = _ref2.schema;

              if (isAbstractType(type)) {
                return schema.getPossibleTypes(type);
              }
            }
          },
          enumValues: {
            type: GraphQLList(GraphQLNonNull(__EnumValue)),
            args: {
              includeDeprecated: { type: GraphQLBoolean, defaultValue: false }
            },
            resolve: function resolve(type, _ref3) {
              var includeDeprecated = _ref3.includeDeprecated;

              if (isEnumType(type)) {
                var values = type.getValues();
                if (!includeDeprecated) {
                  values = values.filter(function (value) {
                    return !value.deprecationReason;
                  });
                }
                return values;
              }
            }
          },
          inputFields: {
            type: GraphQLList(GraphQLNonNull(__InputValue)),
            resolve: function resolve(type) {
              if (isInputObjectType(type)) {
                return objectValues(type.getFields());
              }
            }
          },
          ofType: { type: __Type }
        };
      }
    });

    var __Field = new GraphQLObjectType({
      name: '__Field',
      isIntrospection: true,
      description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',
      fields: function fields() {
        return {
          name: { type: GraphQLNonNull(GraphQLString) },
          description: { type: GraphQLString },
          args: {
            type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),
            resolve: function resolve(field) {
              return field.args || [];
            }
          },
          type: { type: GraphQLNonNull(__Type) },
          isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },
          deprecationReason: {
            type: GraphQLString
          }
        };
      }
    });

    var __InputValue = new GraphQLObjectType({
      name: '__InputValue',
      isIntrospection: true,
      description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',
      fields: function fields() {
        return {
          name: { type: GraphQLNonNull(GraphQLString) },
          description: { type: GraphQLString },
          type: { type: GraphQLNonNull(__Type) },
          defaultValue: {
            type: GraphQLString,
            description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',
            resolve: function resolve(inputVal) {
              return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));
            }
          }
        };
      }
    });

    var __EnumValue = new GraphQLObjectType({
      name: '__EnumValue',
      isIntrospection: true,
      description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',
      fields: function fields() {
        return {
          name: { type: GraphQLNonNull(GraphQLString) },
          description: { type: GraphQLString },
          isDeprecated: { type: GraphQLNonNull(GraphQLBoolean) },
          deprecationReason: {
            type: GraphQLString
          }
        };
      }
    });

    var TypeKind = {
      SCALAR: 'SCALAR',
      OBJECT: 'OBJECT',
      INTERFACE: 'INTERFACE',
      UNION: 'UNION',
      ENUM: 'ENUM',
      INPUT_OBJECT: 'INPUT_OBJECT',
      LIST: 'LIST',
      NON_NULL: 'NON_NULL'
    };

    var __TypeKind = new GraphQLEnumType({
      name: '__TypeKind',
      isIntrospection: true,
      description: 'An enum describing what kind of type a given `__Type` is.',
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: 'Indicates this type is a scalar.'
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'
        },
        UNION: {
          value: TypeKind.UNION,
          description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'
        },
        LIST: {
          value: TypeKind.LIST,
          description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'
        }
      }
    });

    /**
     * Note that these are GraphQLField and not GraphQLFieldConfig,
     * so the format for args is different.
     */

    var SchemaMetaFieldDef = {
      name: '__schema',
      type: GraphQLNonNull(__Schema),
      description: 'Access the current type schema of this server.',
      args: [],
      resolve: function resolve(source, args, context, _ref4) {
        var schema = _ref4.schema;
        return schema;
      }
    };

    var TypeMetaFieldDef = {
      name: '__type',
      type: __Type,
      description: 'Request the type information of a single type.',
      args: [{ name: 'name', type: GraphQLNonNull(GraphQLString) }],
      resolve: function resolve(source, _ref5, context, _ref6) {
        var name = _ref5.name;
        var schema = _ref6.schema;
        return schema.getType(name);
      }
    };

    var TypeNameMetaFieldDef = {
      name: '__typename',
      type: GraphQLNonNull(GraphQLString),
      description: 'The name of the current Object type at runtime.',
      args: [],
      resolve: function resolve(source, args, context, _ref7) {
        var parentType = _ref7.parentType;
        return parentType.name;
      }
    };

    var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];

    function isIntrospectionType(type) {
      return isNamedType(type) && (
      // Would prefer to use introspectionTypes.some(), however %checks needs
      // a simple expression.
      type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function find(list, predicate) {
      for (var i = 0; i < list.length; i++) {
        if (predicate(list[i])) {
          return list[i];
        }
      }
    }

    var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * Test if the given value is a GraphQL schema.
     */

    // eslint-disable-next-line no-redeclare
    function isSchema(schema) {
      return instanceOf(schema, GraphQLSchema);
    }

    /**
     * Schema Definition
     *
     * A Schema is created by supplying the root types of each type of operation,
     * query and mutation (optional). A schema definition is then supplied to the
     * validator and executor.
     *
     * Example:
     *
     *     const MyAppSchema = new GraphQLSchema({
     *       query: MyAppQueryRootType,
     *       mutation: MyAppMutationRootType,
     *     })
     *
     * Note: If an array of `directives` are provided to GraphQLSchema, that will be
     * the exact list of directives represented and allowed. If `directives` is not
     * provided then a default set of the specified directives (e.g. @include and
     * @skip) will be used. If you wish to provide *additional* directives to these
     * specified directives, you must explicitly declare them. Example:
     *
     *     const MyAppSchema = new GraphQLSchema({
     *       ...
     *       directives: specifiedDirectives.concat([ myCustomDirective ]),
     *     })
     *
     */
    var GraphQLSchema = function () {
      // Used as a cache for validateSchema().
      function GraphQLSchema(config) {
        var _this = this;

        _classCallCheck$2(this, GraphQLSchema);

        // If this schema was built from a source known to be valid, then it may be
        // marked with assumeValid to avoid an additional type system validation.
        if (config && config.assumeValid) {
          this.__validationErrors = [];
        } else {
          // Otherwise check for common mistakes during construction to produce
          // clear and early error messages.
          !((typeof config === 'undefined' ? 'undefined' : _typeof$2(config)) === 'object') ? invariant(0, 'Must provide configuration object.') : void 0;
          !(!config.types || Array.isArray(config.types)) ? invariant(0, '"types" must be Array if provided but got: ' + String(config.types) + '.') : void 0;
          !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '"directives" must be Array if provided but got: ' + (String(config.directives) + '.')) : void 0;
          !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '"allowedLegacyNames" must be Array if provided but got: ' + (String(config.allowedLegacyNames) + '.')) : void 0;
        }

        this.__allowedLegacyNames = config.allowedLegacyNames;
        this._queryType = config.query;
        this._mutationType = config.mutation;
        this._subscriptionType = config.subscription;
        // Provide specified directives (e.g. @include and @skip) by default.
        this._directives = config.directives || specifiedDirectives;
        this.astNode = config.astNode;

        // Build type map now to detect any errors within this schema.
        var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];

        var types = config.types;
        if (types) {
          initialTypes = initialTypes.concat(types);
        }

        // Keep track of all types referenced within the schema.
        var typeMap = Object.create(null);

        // First by deeply visiting all initial types.
        typeMap = initialTypes.reduce(typeMapReducer, typeMap);

        // Then by deeply visiting all directive types.
        typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap);

        // Storing the resulting map for reference by the schema.
        this._typeMap = typeMap;

        // Keep track of all implementations by interface name.
        this._implementations = Object.create(null);
        Object.keys(this._typeMap).forEach(function (typeName) {
          var type = _this._typeMap[typeName];
          if (isObjectType(type)) {
            type.getInterfaces().forEach(function (iface) {
              if (isInterfaceType(iface)) {
                var impls = _this._implementations[iface.name];
                if (impls) {
                  impls.push(type);
                } else {
                  _this._implementations[iface.name] = [type];
                }
              }
            });
          }
        });
      }
      // Referenced by validateSchema().


      GraphQLSchema.prototype.getQueryType = function getQueryType() {
        return this._queryType;
      };

      GraphQLSchema.prototype.getMutationType = function getMutationType() {
        return this._mutationType;
      };

      GraphQLSchema.prototype.getSubscriptionType = function getSubscriptionType() {
        return this._subscriptionType;
      };

      GraphQLSchema.prototype.getTypeMap = function getTypeMap() {
        return this._typeMap;
      };

      GraphQLSchema.prototype.getType = function getType(name) {
        return this.getTypeMap()[name];
      };

      GraphQLSchema.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {
        if (isUnionType(abstractType)) {
          return abstractType.getTypes();
        }
        return this._implementations[abstractType.name];
      };

      GraphQLSchema.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {
        var possibleTypeMap = this._possibleTypeMap;
        if (!possibleTypeMap) {
          this._possibleTypeMap = possibleTypeMap = Object.create(null);
        }

        if (!possibleTypeMap[abstractType.name]) {
          var possibleTypes = this.getPossibleTypes(abstractType);
          !Array.isArray(possibleTypes) ? invariant(0, 'Could not find possible implementing types for ' + abstractType.name + ' ' + 'in schema. Check that schema.types is defined and is an array of ' + 'all possible types in the schema.') : void 0;
          possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {
            return map[type.name] = true, map;
          }, Object.create(null));
        }

        return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);
      };

      GraphQLSchema.prototype.getDirectives = function getDirectives() {
        return this._directives;
      };

      GraphQLSchema.prototype.getDirective = function getDirective(name) {
        return find(this.getDirectives(), function (directive) {
          return directive.name === name;
        });
      };

      return GraphQLSchema;
    }();

    function typeMapReducer(map, type) {
      if (!type) {
        return map;
      }
      if (isWrappingType(type)) {
        return typeMapReducer(map, type.ofType);
      }
      if (map[type.name]) {
        !(map[type.name] === type) ? invariant(0, 'Schema must contain unique named types but contains multiple ' + ('types named "' + type.name + '".')) : void 0;
        return map;
      }
      map[type.name] = type;

      var reducedMap = map;

      if (isUnionType(type)) {
        reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);
      }

      if (isObjectType(type)) {
        reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);
      }

      if (isObjectType(type) || isInterfaceType(type)) {
        objectValues(type.getFields()).forEach(function (field) {
          if (field.args) {
            var fieldArgTypes = field.args.map(function (arg) {
              return arg.type;
            });
            reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);
          }
          reducedMap = typeMapReducer(reducedMap, field.type);
        });
      }

      if (isInputObjectType(type)) {
        objectValues(type.getFields()).forEach(function (field) {
          reducedMap = typeMapReducer(reducedMap, field.type);
        });
      }

      return reducedMap;
    }

    function typeMapDirectiveReducer(map, directive) {
      // Directives are not validated until validateSchema() is called.
      if (!isDirective(directive)) {
        return map;
      }
      return directive.args.reduce(function (_map, arg) {
        return typeMapReducer(_map, arg.type);
      }, map);
    }

    /**
     * Takes a Source and a UTF-8 character offset, and returns the corresponding
     * line and column as a SourceLocation.
     */
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function getLocation(source, position) {
      var lineRegexp = /\r\n|[\n\r]/g;
      var line = 1;
      var column = position + 1;
      var match = void 0;
      while ((match = lineRegexp.exec(source.body)) && match.index < position) {
        line += 1;
        column = position + 1 - (match.index + match[0].length);
      }
      return { line: line, column: column };
    }

    /**
     * Represents a location in a Source.
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Prints a GraphQLError to a string, representing useful location information
     * about the error's position in the source.
     */
    function printError(error) {
      var printedLocations = [];
      if (error.nodes) {
        error.nodes.forEach(function (node) {
          if (node.loc) {
            printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));
          }
        });
      } else if (error.source && error.locations) {
        var source = error.source;
        error.locations.forEach(function (location) {
          printedLocations.push(highlightSourceAtLocation(source, location));
        });
      }
      return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\n\n') + '\n';
    }

    /**
     * Render a helpful description of the location of the error in the GraphQL
     * Source document.
     */
    function highlightSourceAtLocation(source, location) {
      var line = location.line;
      var lineOffset = source.locationOffset.line - 1;
      var columnOffset = getColumnOffset(source, location);
      var contextLine = line + lineOffset;
      var contextColumn = location.column + columnOffset;
      var prevLineNum = (contextLine - 1).toString();
      var lineNum = contextLine.toString();
      var nextLineNum = (contextLine + 1).toString();
      var padLen = nextLineNum.length;
      var lines = source.body.split(/\r\n|[\n\r]/g);
      lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];
      var outputLines = [source.name + ' (' + contextLine + ':' + contextColumn + ')', line >= 2 && lpad(padLen, prevLineNum) + ': ' + lines[line - 2], lpad(padLen, lineNum) + ': ' + lines[line - 1], whitespace(2 + padLen + contextColumn - 1) + '^', line < lines.length && lpad(padLen, nextLineNum) + ': ' + lines[line]];
      return outputLines.filter(Boolean).join('\n');
    }

    function getColumnOffset(source, location) {
      return location.line === 1 ? source.locationOffset.column - 1 : 0;
    }

    function whitespace(len) {
      return Array(len + 1).join(' ');
    }

    function lpad(len, str) {
      return whitespace(len - str.length) + str;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * A GraphQLError describes an Error found during the parse, validate, or
     * execute phases of performing a GraphQL operation. In addition to a message
     * and stack trace, it also includes information about the locations in a
     * GraphQL document and/or execution result that correspond to the Error.
     */


    function GraphQLError( // eslint-disable-line no-redeclare
    message, nodes, source, positions, path, originalError, extensions) {
      // Compute list of blame nodes.
      var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined;

      // Compute locations in the source for the given nodes/positions.
      var _source = source;
      if (!_source && _nodes) {
        var node = _nodes[0];
        _source = node && node.loc && node.loc.source;
      }

      var _positions = positions;
      if (!_positions && _nodes) {
        _positions = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push(node.loc.start);
          }
          return list;
        }, []);
      }
      if (_positions && _positions.length === 0) {
        _positions = undefined;
      }

      var _locations = void 0;
      if (positions && source) {
        _locations = positions.map(function (pos) {
          return getLocation(source, pos);
        });
      } else if (_nodes) {
        _locations = _nodes.reduce(function (list, node) {
          if (node.loc) {
            list.push(getLocation(node.loc.source, node.loc.start));
          }
          return list;
        }, []);
      }

      Object.defineProperties(this, {
        message: {
          value: message,
          // By being enumerable, JSON.stringify will include `message` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: true,
          writable: true
        },
        locations: {
          // Coercing falsey values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: _locations || undefined,
          // By being enumerable, JSON.stringify will include `locations` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: true
        },
        path: {
          // Coercing falsey values to undefined ensures they will not be included
          // in JSON.stringify() when not provided.
          value: path || undefined,
          // By being enumerable, JSON.stringify will include `path` in the
          // resulting output. This ensures that the simplest possible GraphQL
          // service adheres to the spec.
          enumerable: true
        },
        nodes: {
          value: _nodes || undefined
        },
        source: {
          value: _source || undefined
        },
        positions: {
          value: _positions || undefined
        },
        originalError: {
          value: originalError
        },
        extensions: {
          value: extensions || originalError && originalError.extensions
        }
      });

      // Include (non-enumerable) stack trace.
      if (originalError && originalError.stack) {
        Object.defineProperty(this, 'stack', {
          value: originalError.stack,
          writable: true,
          configurable: true
        });
      } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, GraphQLError);
      } else {
        Object.defineProperty(this, 'stack', {
          value: Error().stack,
          writable: true,
          configurable: true
        });
      }
    }

    GraphQLError.prototype = Object.create(Error.prototype, {
      constructor: { value: GraphQLError },
      name: { value: 'GraphQLError' },
      toString: {
        value: function toString() {
          return printError(this);
        }
      }
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /**
     * Upholds the spec rules about naming.
     */
    function assertValidName(name) {
      var error = isValidNameError(name);
      if (error) {
        throw error;
      }
      return name;
    }

    /**
     * Returns an Error if a name is invalid.
     */
    function isValidNameError(name, node) {
      !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;
      if (name.length > 1 && name[0] === '_' && name[1] === '_') {
        return new GraphQLError('Name "' + name + '" must not begin with "__", which is reserved by ' + 'GraphQL introspection.', node);
      }
      if (!NAME_RX.test(name)) {
        return new GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "' + name + '" does not.', node);
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Provided two types, return true if the types are equal (invariant).
     */
    function isEqualType(typeA, typeB) {
      // Equivalent types are equal.
      if (typeA === typeB) {
        return true;
      }

      // If either type is non-null, the other must also be non-null.
      if (isNonNullType(typeA) && isNonNullType(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }

      // If either type is a list, the other must also be a list.
      if (isListType(typeA) && isListType(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
      }

      // Otherwise the types are not equal.
      return false;
    }

    /**
     * Provided a type and a super type, return true if the first type is either
     * equal or a subset of the second super type (covariant).
     */
    function isTypeSubTypeOf(schema, maybeSubType, superType) {
      // Equivalent type is a valid subtype
      if (maybeSubType === superType) {
        return true;
      }

      // If superType is non-null, maybeSubType must also be non-null.
      if (isNonNullType(superType)) {
        if (isNonNullType(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if (isNonNullType(maybeSubType)) {
        // If superType is nullable, maybeSubType may be non-null or nullable.
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
      }

      // If superType type is a list, maybeSubType type must also be a list.
      if (isListType(superType)) {
        if (isListType(maybeSubType)) {
          return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
      }
      if (isListType(maybeSubType)) {
        // If superType is not a list, maybeSubType must also be not a list.
        return false;
      }

      // If superType type is an abstract type, maybeSubType type may be a currently
      // possible object type.
      if (isAbstractType(superType) && isObjectType(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {
        return true;
      }

      // Otherwise, the child type is not a valid subtype of the parent type.
      return false;
    }

    /**
     * Provided two composite types, determine if they "overlap". Two composite
     * types overlap when the Sets of possible concrete types for each intersect.
     *
     * This is often used to determine if a fragment of a given type could possibly
     * be visited in a context of another type.
     *
     * This function is commutative.
     */
    function doTypesOverlap(schema, typeA, typeB) {
      // Equivalent types overlap
      if (typeA === typeB) {
        return true;
      }

      if (isAbstractType(typeA)) {
        if (isAbstractType(typeB)) {
          // If both types are abstract, then determine if there is any intersection
          // between possible concrete types of each.
          return schema.getPossibleTypes(typeA).some(function (type) {
            return schema.isPossibleType(typeB, type);
          });
        }
        // Determine if the latter type is a possible concrete type of the former.
        return schema.isPossibleType(typeA, typeB);
      }

      if (isAbstractType(typeB)) {
        // Determine if the former type is a possible concrete type of the latter.
        return schema.isPossibleType(typeB, typeA);
      }

      // Otherwise the types do not overlap.
      return false;
    }

    function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * Implements the "Type Validation" sub-sections of the specification's
     * "Type System" section.
     *
     * Validation runs synchronously, returning an array of encountered errors, or
     * an empty array if no errors were encountered and the Schema is valid.
     */
    function validateSchema(schema) {
      // First check to ensure the provided value is in fact a GraphQLSchema.
      !isSchema(schema) ? invariant(0, 'Expected ' + String(schema) + ' to be a GraphQL schema.') : void 0;

      // If this Schema has already been validated, return the previous results.
      if (schema.__validationErrors) {
        return schema.__validationErrors;
      }

      // Validate the schema, producing a list of errors.
      var context = new SchemaValidationContext(schema);
      validateRootTypes(context);
      validateDirectives(context);
      validateTypes(context);

      // Persist the results of validation before returning to ensure validation
      // does not run multiple times for this schema.
      var errors = context.getErrors();
      schema.__validationErrors = errors;
      return errors;
    }

    /**
     * Utility function which asserts a schema is valid by throwing an error if
     * it is invalid.
     */
    function assertValidSchema(schema) {
      var errors = validateSchema(schema);
      if (errors.length !== 0) {
        throw new Error(errors.map(function (error) {
          return error.message;
        }).join('\n\n'));
      }
    }

    var SchemaValidationContext = function () {
      function SchemaValidationContext(schema) {
        _classCallCheck$3(this, SchemaValidationContext);

        this._errors = [];
        this.schema = schema;
      }

      SchemaValidationContext.prototype.reportError = function reportError(message, nodes) {
        var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);
        this.addError(new GraphQLError(message, _nodes));
      };

      SchemaValidationContext.prototype.addError = function addError(error) {
        this._errors.push(error);
      };

      SchemaValidationContext.prototype.getErrors = function getErrors() {
        return this._errors;
      };

      return SchemaValidationContext;
    }();

    function validateRootTypes(context) {
      var schema = context.schema;
      var queryType = schema.getQueryType();
      if (!queryType) {
        context.reportError('Query root type must be provided.', schema.astNode);
      } else if (!isObjectType(queryType)) {
        context.reportError('Query root type must be Object type, it cannot be ' + String(queryType) + '.', getOperationTypeNode(schema, queryType, 'query'));
      }

      var mutationType = schema.getMutationType();
      if (mutationType && !isObjectType(mutationType)) {
        context.reportError('Mutation root type must be Object type if provided, it cannot be ' + (String(mutationType) + '.'), getOperationTypeNode(schema, mutationType, 'mutation'));
      }

      var subscriptionType = schema.getSubscriptionType();
      if (subscriptionType && !isObjectType(subscriptionType)) {
        context.reportError('Subscription root type must be Object type if provided, it cannot be ' + (String(subscriptionType) + '.'), getOperationTypeNode(schema, subscriptionType, 'subscription'));
      }
    }

    function getOperationTypeNode(schema, type, operation) {
      var astNode = schema.astNode;
      var operationTypeNode = astNode && astNode.operationTypes.find(function (operationType) {
        return operationType.operation === operation;
      });
      return operationTypeNode ? operationTypeNode.type : type && type.astNode;
    }

    function validateDirectives(context) {
      var directives = context.schema.getDirectives();
      directives.forEach(function (directive) {
        // Ensure all directives are in fact GraphQL directives.
        if (!isDirective(directive)) {
          context.reportError('Expected directive but got: ' + String(directive) + '.', directive && directive.astNode);
          return;
        }

        // Ensure they are named correctly.
        validateName(context, directive);

        // TODO: Ensure proper locations.

        // Ensure the arguments are valid.
        var argNames = Object.create(null);
        directive.args.forEach(function (arg) {
          var argName = arg.name;

          // Ensure they are named correctly.
          validateName(context, arg);

          // Ensure they are unique per directive.
          if (argNames[argName]) {
            context.reportError('Argument @' + directive.name + '(' + argName + ':) can only be defined once.', getAllDirectiveArgNodes(directive, argName));
            return; // continue loop
          }
          argNames[argName] = true;

          // Ensure the type is an input type.
          if (!isInputType(arg.type)) {
            context.reportError('The type of @' + directive.name + '(' + argName + ':) must be Input Type ' + ('but got: ' + String(arg.type) + '.'), getDirectiveArgTypeNode(directive, argName));
          }
        });
      });
    }

    function validateName(context, node) {
      // If a schema explicitly allows some legacy name which is no longer valid,
      // allow it to be assumed valid.
      if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {
        return;
      }
      // Ensure names are valid, however introspection types opt out.
      var error = isValidNameError(node.name, node.astNode || undefined);
      if (error) {
        context.addError(error);
      }
    }

    function validateTypes(context) {
      var typeMap = context.schema.getTypeMap();
      objectValues(typeMap).forEach(function (type) {
        // Ensure all provided types are in fact GraphQL type.
        if (!isNamedType(type)) {
          context.reportError('Expected GraphQL named type but got: ' + String(type) + '.', type && type.astNode);
          return;
        }

        // Ensure it is named correctly (excluding introspection types).
        if (!isIntrospectionType(type)) {
          validateName(context, type);
        }

        if (isObjectType(type)) {
          // Ensure fields are valid
          validateFields(context, type);

          // Ensure objects implement the interfaces they claim to.
          validateObjectInterfaces(context, type);
        } else if (isInterfaceType(type)) {
          // Ensure fields are valid.
          validateFields(context, type);
        } else if (isUnionType(type)) {
          // Ensure Unions include valid member types.
          validateUnionMembers(context, type);
        } else if (isEnumType(type)) {
          // Ensure Enums have valid values.
          validateEnumValues(context, type);
        } else if (isInputObjectType(type)) {
          // Ensure Input Object fields are valid.
          validateInputFields(context, type);
        }
      });
    }

    function validateFields(context, type) {
      var fields = objectValues(type.getFields());

      // Objects and Interfaces both must define one or more fields.
      if (fields.length === 0) {
        context.reportError('Type ' + type.name + ' must define one or more fields.', getAllObjectOrInterfaceNodes(type));
      }

      fields.forEach(function (field) {
        // Ensure they are named correctly.
        validateName(context, field);

        // Ensure they were defined at most once.
        var fieldNodes = getAllFieldNodes(type, field.name);
        if (fieldNodes.length > 1) {
          context.reportError('Field ' + type.name + '.' + field.name + ' can only be defined once.', fieldNodes);
          return; // continue loop
        }

        // Ensure the type is an output type
        if (!isOutputType(field.type)) {
          context.reportError('The type of ' + type.name + '.' + field.name + ' must be Output Type ' + ('but got: ' + String(field.type) + '.'), getFieldTypeNode(type, field.name));
        }

        // Ensure the arguments are valid
        var argNames = Object.create(null);
        field.args.forEach(function (arg) {
          var argName = arg.name;

          // Ensure they are named correctly.
          validateName(context, arg);

          // Ensure they are unique per field.
          if (argNames[argName]) {
            context.reportError('Field argument ' + type.name + '.' + field.name + '(' + argName + ':) can only ' + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));
          }
          argNames[argName] = true;

          // Ensure the type is an input type
          if (!isInputType(arg.type)) {
            context.reportError('The type of ' + type.name + '.' + field.name + '(' + argName + ':) must be Input ' + ('Type but got: ' + String(arg.type) + '.'), getFieldArgTypeNode(type, field.name, argName));
          }
        });
      });
    }

    function validateObjectInterfaces(context, object) {
      var implementedTypeNames = Object.create(null);
      object.getInterfaces().forEach(function (iface) {
        if (!isInterfaceType(iface)) {
          context.reportError('Type ' + String(object) + ' must only implement Interface types, ' + ('it cannot implement ' + String(iface) + '.'), getImplementsInterfaceNode(object, iface));
          return;
        }

        if (implementedTypeNames[iface.name]) {
          context.reportError('Type ' + object.name + ' can only implement ' + iface.name + ' once.', getAllImplementsInterfaceNodes(object, iface));
          return; // continue loop
        }
        implementedTypeNames[iface.name] = true;
        validateObjectImplementsInterface(context, object, iface);
      });
    }

    function validateObjectImplementsInterface(context, object, iface) {
      var objectFieldMap = object.getFields();
      var ifaceFieldMap = iface.getFields();

      // Assert each interface field is implemented.
      Object.keys(ifaceFieldMap).forEach(function (fieldName) {
        var objectField = objectFieldMap[fieldName];
        var ifaceField = ifaceFieldMap[fieldName];

        // Assert interface field exists on object.
        if (!objectField) {
          context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expected but ' + (object.name + ' does not provide it.'), [getFieldNode(iface, fieldName), object.astNode]);
          // Continue loop over fields.
          return;
        }

        // Assert interface field type is satisfied by object field type, by being
        // a valid subtype. (covariant)
        if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {
          context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expects type ' + (String(ifaceField.type) + ' but ' + object.name + '.' + fieldName + ' ') + ('is type ' + String(objectField.type) + '.'), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);
        }

        // Assert each interface field arg is implemented.
        ifaceField.args.forEach(function (ifaceArg) {
          var argName = ifaceArg.name;
          var objectArg = find(objectField.args, function (arg) {
            return arg.name === argName;
          });

          // Assert interface field arg exists on object field.
          if (!objectArg) {
            context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expected but ' + object.name + '.' + fieldName + ' does not provide it.'), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);
            // Continue loop over arguments.
            return;
          }

          // Assert interface field arg type matches object field arg type.
          // (invariant)
          // TODO: change to contravariant?
          if (!isEqualType(ifaceArg.type, objectArg.type)) {
            context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expects type ' + String(ifaceArg.type) + ' but ') + (object.name + '.' + fieldName + '(' + argName + ':) is type ') + (String(objectArg.type) + '.'), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);
          }

          // TODO: validate default values?
        });

        // Assert additional arguments must not be required.
        objectField.args.forEach(function (objectArg) {
          var argName = objectArg.name;
          var ifaceArg = find(ifaceField.args, function (arg) {
            return arg.name === argName;
          });
          if (!ifaceArg && isNonNullType(objectArg.type)) {
            context.reportError('Object field argument ' + object.name + '.' + fieldName + '(' + argName + ':) ' + ('is of required type ' + String(objectArg.type) + ' but is not also ') + ('provided by the Interface field ' + iface.name + '.' + fieldName + '.'), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);
          }
        });
      });
    }

    function validateUnionMembers(context, union) {
      var memberTypes = union.getTypes();

      if (memberTypes.length === 0) {
        context.reportError('Union type ' + union.name + ' must define one or more member types.', union.astNode);
      }

      var includedTypeNames = Object.create(null);
      memberTypes.forEach(function (memberType) {
        if (includedTypeNames[memberType.name]) {
          context.reportError('Union type ' + union.name + ' can only include type ' + (memberType.name + ' once.'), getUnionMemberTypeNodes(union, memberType.name));
          return; // continue loop
        }
        includedTypeNames[memberType.name] = true;
        if (!isObjectType(memberType)) {
          context.reportError('Union type ' + union.name + ' can only include Object types, ' + ('it cannot include ' + String(memberType) + '.'), getUnionMemberTypeNodes(union, String(memberType)));
        }
      });
    }

    function validateEnumValues(context, enumType) {
      var enumValues = enumType.getValues();

      if (enumValues.length === 0) {
        context.reportError('Enum type ' + enumType.name + ' must define one or more values.', enumType.astNode);
      }

      enumValues.forEach(function (enumValue) {
        var valueName = enumValue.name;

        // Ensure no duplicates.
        var allNodes = getEnumValueNodes(enumType, valueName);
        if (allNodes && allNodes.length > 1) {
          context.reportError('Enum type ' + enumType.name + ' can include value ' + valueName + ' only once.', allNodes);
        }

        // Ensure valid name.
        validateName(context, enumValue);
        if (valueName === 'true' || valueName === 'false' || valueName === 'null') {
          context.reportError('Enum type ' + enumType.name + ' cannot include value: ' + valueName + '.', enumValue.astNode);
        }
      });
    }

    function validateInputFields(context, inputObj) {
      var fields = objectValues(inputObj.getFields());

      if (fields.length === 0) {
        context.reportError('Input Object type ' + inputObj.name + ' must define one or more fields.', inputObj.astNode);
      }

      // Ensure the arguments are valid
      fields.forEach(function (field) {
        // Ensure they are named correctly.
        validateName(context, field);

        // TODO: Ensure they are unique per field.

        // Ensure the type is an input type
        if (!isInputType(field.type)) {
          context.reportError('The type of ' + inputObj.name + '.' + field.name + ' must be Input Type ' + ('but got: ' + String(field.type) + '.'), field.astNode && field.astNode.type);
        }
      });
    }

    function getAllObjectNodes(type) {
      return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
    }

    function getAllObjectOrInterfaceNodes(type) {
      return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
    }

    function getImplementsInterfaceNode(type, iface) {
      return getAllImplementsInterfaceNodes(type, iface)[0];
    }

    function getAllImplementsInterfaceNodes(type, iface) {
      var implementsNodes = [];
      var astNodes = getAllObjectNodes(type);
      for (var i = 0; i < astNodes.length; i++) {
        var _astNode = astNodes[i];
        if (_astNode && _astNode.interfaces) {
          _astNode.interfaces.forEach(function (node) {
            if (node.name.value === iface.name) {
              implementsNodes.push(node);
            }
          });
        }
      }
      return implementsNodes;
    }

    function getFieldNode(type, fieldName) {
      return getAllFieldNodes(type, fieldName)[0];
    }

    function getAllFieldNodes(type, fieldName) {
      var fieldNodes = [];
      var astNodes = getAllObjectOrInterfaceNodes(type);
      for (var i = 0; i < astNodes.length; i++) {
        var _astNode2 = astNodes[i];
        if (_astNode2 && _astNode2.fields) {
          _astNode2.fields.forEach(function (node) {
            if (node.name.value === fieldName) {
              fieldNodes.push(node);
            }
          });
        }
      }
      return fieldNodes;
    }

    function getFieldTypeNode(type, fieldName) {
      var fieldNode = getFieldNode(type, fieldName);
      return fieldNode && fieldNode.type;
    }

    function getFieldArgNode(type, fieldName, argName) {
      return getAllFieldArgNodes(type, fieldName, argName)[0];
    }

    function getAllFieldArgNodes(type, fieldName, argName) {
      var argNodes = [];
      var fieldNode = getFieldNode(type, fieldName);
      if (fieldNode && fieldNode.arguments) {
        fieldNode.arguments.forEach(function (node) {
          if (node.name.value === argName) {
            argNodes.push(node);
          }
        });
      }
      return argNodes;
    }

    function getFieldArgTypeNode(type, fieldName, argName) {
      var fieldArgNode = getFieldArgNode(type, fieldName, argName);
      return fieldArgNode && fieldArgNode.type;
    }

    function getAllDirectiveArgNodes(directive, argName) {
      var argNodes = [];
      var directiveNode = directive.astNode;
      if (directiveNode && directiveNode.arguments) {
        directiveNode.arguments.forEach(function (node) {
          if (node.name.value === argName) {
            argNodes.push(node);
          }
        });
      }
      return argNodes;
    }

    function getDirectiveArgTypeNode(directive, argName) {
      var argNode = getAllDirectiveArgNodes(directive, argName)[0];
      return argNode && argNode.type;
    }

    function getUnionMemberTypeNodes(union, typeName) {
      return union.astNode && union.astNode.types && union.astNode.types.filter(function (type) {
        return type.name.value === typeName;
      });
    }

    function getEnumValueNodes(enumType, valueName) {
      return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function (value) {
        return value.name.value === valueName;
      });
    }

    function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * A representation of source input to GraphQL.
     * `name` and `locationOffset` are optional. They are useful for clients who
     * store GraphQL documents in source files; for example, if the GraphQL input
     * starts at line 40 in a file named Foo.graphql, it might be useful for name to
     * be "Foo.graphql" and location to be `{ line: 40, column: 0 }`.
     * line and column in locationOffset are 1-indexed
     */
    var Source = function Source(body, name, locationOffset) {
      _classCallCheck$4(this, Source);

      this.body = body;
      this.name = name || 'GraphQL request';
      this.locationOffset = locationOffset || { line: 1, column: 1 };
      !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;
      !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;
    };

    /**
     * Produces a GraphQLError representing a syntax error, containing useful
     * descriptive information about the syntax error's position in the source.
     */
    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function syntaxError(source, position, description) {
      return new GraphQLError('Syntax Error: ' + description, undefined, source, [position]);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Given an arbitrary Error, presumably thrown while attempting to execute a
     * GraphQL operation, produce a new GraphQLError aware of the location in the
     * document responsible for the original Error.
     */
    function locatedError(originalError, nodes, path) {
      // Note: this uses a brand-check to support GraphQL errors originating from
      // other contexts.
      // $FlowFixMe(>=0.68.0)
      if (originalError && Array.isArray(originalError.path)) {
        return originalError;
      }

      return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);
    }

    var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };


    /**
     * Given a GraphQLError, format it according to the rules described by the
     * Response Format, Errors section of the GraphQL Specification.
     */
    function formatError(error) {
      !error ? invariant(0, 'Received null or undefined error.') : void 0;
      return _extends$1({}, error.extensions, {
        message: error.message || 'An unknown error occurred.',
        locations: error.locations,
        path: error.path
      });
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var error = /*#__PURE__*/Object.freeze({
        GraphQLError: GraphQLError,
        syntaxError: syntaxError,
        locatedError: locatedError,
        printError: printError,
        formatError: formatError
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Produces the value of a block string from its parsed raw value, similar to
     * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.
     *
     * This implements the GraphQL spec's BlockStringValue() static algorithm.
     */
    function blockStringValue(rawString) {
      // Expand a block string's raw value into independent lines.
      var lines = rawString.split(/\r\n|[\n\r]/g);

      // Remove common indentation from all lines but first.
      var commonIndent = null;
      for (var i = 1; i < lines.length; i++) {
        var line = lines[i];
        var indent = leadingWhitespace(line);
        if (indent < line.length && (commonIndent === null || indent < commonIndent)) {
          commonIndent = indent;
          if (commonIndent === 0) {
            break;
          }
        }
      }

      if (commonIndent) {
        for (var _i = 1; _i < lines.length; _i++) {
          lines[_i] = lines[_i].slice(commonIndent);
        }
      }

      // Remove leading and trailing blank lines.
      while (lines.length > 0 && isBlank(lines[0])) {
        lines.shift();
      }
      while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
        lines.pop();
      }

      // Return a string of the lines joined with U+000A.
      return lines.join('\n');
    }

    function leadingWhitespace(str) {
      var i = 0;
      while (i < str.length && (str[i] === ' ' || str[i] === '\t')) {
        i++;
      }
      return i;
    }

    function isBlank(str) {
      return leadingWhitespace(str) === str.length;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Given a Source object, this returns a Lexer for that source.
     * A Lexer is a stateful stream generator in that every time
     * it is advanced, it returns the next token in the Source. Assuming the
     * source lexes, the final Token emitted by the lexer will be of kind
     * EOF, after which the lexer will repeatedly return the same EOF token
     * whenever called.
     */
    function createLexer(source, options) {
      var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);
      var lexer = {
        source: source,
        options: options,
        lastToken: startOfFileToken,
        token: startOfFileToken,
        line: 1,
        lineStart: 0,
        advance: advanceLexer,
        lookahead: lookahead
      };
      return lexer;
    }

    function advanceLexer() {
      this.lastToken = this.token;
      var token = this.token = this.lookahead();
      return token;
    }

    function lookahead() {
      var token = this.token;
      if (token.kind !== TokenKind.EOF) {
        do {
          // Note: next is only mutable during parsing, so we cast to allow this.
          token = token.next || (token.next = readToken(this, token));
        } while (token.kind === TokenKind.COMMENT);
      }
      return token;
    }

    /**
     * The return type of createLexer.
     */


    /**
     * An exported enum describing the different kinds of tokens that the
     * lexer emits.
     */
    var TokenKind = Object.freeze({
      SOF: '<SOF>',
      EOF: '<EOF>',
      BANG: '!',
      DOLLAR: '$',
      AMP: '&',
      PAREN_L: '(',
      PAREN_R: ')',
      SPREAD: '...',
      COLON: ':',
      EQUALS: '=',
      AT: '@',
      BRACKET_L: '[',
      BRACKET_R: ']',
      BRACE_L: '{',
      PIPE: '|',
      BRACE_R: '}',
      NAME: 'Name',
      INT: 'Int',
      FLOAT: 'Float',
      STRING: 'String',
      BLOCK_STRING: 'BlockString',
      COMMENT: 'Comment'
    });

    /**
     * The enum type representing the token kinds values.
     */


    /**
     * A helper function to describe a token as a string for debugging
     */
    function getTokenDesc(token) {
      var value = token.value;
      return value ? token.kind + ' "' + value + '"' : token.kind;
    }

    var charCodeAt = String.prototype.charCodeAt;
    var slice = String.prototype.slice;

    /**
     * Helper function for constructing the Token object.
     */
    function Tok(kind, start, end, line, column, prev, value) {
      this.kind = kind;
      this.start = start;
      this.end = end;
      this.line = line;
      this.column = column;
      this.value = value;
      this.prev = prev;
      this.next = null;
    }

    // Print a simplified form when appearing in JSON/util.inspect.
    Tok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    };

    function printCharCode(code) {
      return (
        // NaN/undefined represents access beyond the end of the file.
        isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.
        code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
        '"\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '"'
      );
    }

    /**
     * Gets the next token from the source starting at the given position.
     *
     * This skips over whitespace and comments until it finds the next lexable
     * token, then lexes punctuators immediately or calls the appropriate helper
     * function for more complicated tokens.
     */
    function readToken(lexer, prev) {
      var source = lexer.source;
      var body = source.body;
      var bodyLength = body.length;

      var pos = positionAfterWhitespace(body, prev.end, lexer);
      var line = lexer.line;
      var col = 1 + pos - lexer.lineStart;

      if (pos >= bodyLength) {
        return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
      }

      var code = charCodeAt.call(body, pos);

      // SourceCharacter
      if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
        throw syntaxError(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');
      }

      switch (code) {
        // !
        case 33:
          return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);
        // #
        case 35:
          return readComment(source, pos, line, col, prev);
        // $
        case 36:
          return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);
        // &
        case 38:
          return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);
        // (
        case 40:
          return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);
        // )
        case 41:
          return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);
        // .
        case 46:
          if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {
            return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);
          }
          break;
        // :
        case 58:
          return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);
        // =
        case 61:
          return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);
        // @
        case 64:
          return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);
        // [
        case 91:
          return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);
        // ]
        case 93:
          return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);
        // {
        case 123:
          return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);
        // |
        case 124:
          return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);
        // }
        case 125:
          return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);
        // A-Z _ a-z
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          return readName(source, pos, line, col, prev);
        // - 0-9
        case 45:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return readNumber(source, pos, code, line, col, prev);
        // "
        case 34:
          if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {
            return readBlockString(source, pos, line, col, prev);
          }
          return readString(source, pos, line, col, prev);
      }

      throw syntaxError(source, pos, unexpectedCharacterMessage(code));
    }

    /**
     * Report a message that an unexpected character was encountered.
     */
    function unexpectedCharacterMessage(code) {
      if (code === 39) {
        // '
        return "Unexpected single quote character ('), did you mean to use " + 'a double quote (")?';
      }

      return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';
    }

    /**
     * Reads from body starting at startPosition until it finds a non-whitespace
     * or commented character, then returns the position of that character for
     * lexing.
     */
    function positionAfterWhitespace(body, startPosition, lexer) {
      var bodyLength = body.length;
      var position = startPosition;
      while (position < bodyLength) {
        var code = charCodeAt.call(body, position);
        // tab | space | comma | BOM
        if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {
          ++position;
        } else if (code === 10) {
          // new line
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
        } else if (code === 13) {
          // carriage return
          if (charCodeAt.call(body, position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }
          ++lexer.line;
          lexer.lineStart = position;
        } else {
          break;
        }
      }
      return position;
    }

    /**
     * Reads a comment token from the source file.
     *
     * #[\u0009\u0020-\uFFFF]*
     */
    function readComment(source, start, line, col, prev) {
      var body = source.body;
      var code = void 0;
      var position = start;

      do {
        code = charCodeAt.call(body, ++position);
      } while (code !== null && (
      // SourceCharacter but not LineTerminator
      code > 0x001f || code === 0x0009));

      return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));
    }

    /**
     * Reads a number token from the source file, either a float
     * or an int depending on whether a decimal point appears.
     *
     * Int:   -?(0|[1-9][0-9]*)
     * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
     */
    function readNumber(source, start, firstCode, line, col, prev) {
      var body = source.body;
      var code = firstCode;
      var position = start;
      var isFloat = false;

      if (code === 45) {
        // -
        code = charCodeAt.call(body, ++position);
      }

      if (code === 48) {
        // 0
        code = charCodeAt.call(body, ++position);
        if (code >= 48 && code <= 57) {
          throw syntaxError(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');
        }
      } else {
        position = readDigits(source, position, code);
        code = charCodeAt.call(body, position);
      }

      if (code === 46) {
        // .
        isFloat = true;

        code = charCodeAt.call(body, ++position);
        position = readDigits(source, position, code);
        code = charCodeAt.call(body, position);
      }

      if (code === 69 || code === 101) {
        // E e
        isFloat = true;

        code = charCodeAt.call(body, ++position);
        if (code === 43 || code === 45) {
          // + -
          code = charCodeAt.call(body, ++position);
        }
        position = readDigits(source, position, code);
      }

      return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));
    }

    /**
     * Returns the new position in the source after reading digits.
     */
    function readDigits(source, start, firstCode) {
      var body = source.body;
      var position = start;
      var code = firstCode;
      if (code >= 48 && code <= 57) {
        // 0 - 9
        do {
          code = charCodeAt.call(body, ++position);
        } while (code >= 48 && code <= 57); // 0 - 9
        return position;
      }
      throw syntaxError(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');
    }

    /**
     * Reads a string token from the source file.
     *
     * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
     */
    function readString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 1;
      var chunkStart = position;
      var code = 0;
      var value = '';

      while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&
      // not LineTerminator
      code !== 0x000a && code !== 0x000d) {
        // Closing Quote (")
        if (code === 34) {
          value += slice.call(body, chunkStart, position);
          return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);
        }

        // SourceCharacter
        if (code < 0x0020 && code !== 0x0009) {
          throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');
        }

        ++position;
        if (code === 92) {
          // \
          value += slice.call(body, chunkStart, position - 1);
          code = charCodeAt.call(body, position);
          switch (code) {
            case 34:
              value += '"';
              break;
            case 47:
              value += '/';
              break;
            case 92:
              value += '\\';
              break;
            case 98:
              value += '\b';
              break;
            case 102:
              value += '\f';
              break;
            case 110:
              value += '\n';
              break;
            case 114:
              value += '\r';
              break;
            case 116:
              value += '\t';
              break;
            case 117:
              // u
              var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));
              if (charCode < 0) {
                throw syntaxError(source, position, 'Invalid character escape sequence: ' + ('\\u' + body.slice(position + 1, position + 5) + '.'));
              }
              value += String.fromCharCode(charCode);
              position += 4;
              break;
            default:
              throw syntaxError(source, position, 'Invalid character escape sequence: \\' + String.fromCharCode(code) + '.');
          }
          ++position;
          chunkStart = position;
        }
      }

      throw syntaxError(source, position, 'Unterminated string.');
    }

    /**
     * Reads a block string token from the source file.
     *
     * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
     */
    function readBlockString(source, start, line, col, prev) {
      var body = source.body;
      var position = start + 3;
      var chunkStart = position;
      var code = 0;
      var rawValue = '';

      while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {
        // Closing Triple-Quote (""")
        if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {
          rawValue += slice.call(body, chunkStart, position);
          return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));
        }

        // SourceCharacter
        if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
          throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');
        }

        // Escape Triple-Quote (\""")
        if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {
          rawValue += slice.call(body, chunkStart, position) + '"""';
          position += 4;
          chunkStart = position;
        } else {
          ++position;
        }
      }

      throw syntaxError(source, position, 'Unterminated string.');
    }

    /**
     * Converts four hexidecimal chars to the integer that the
     * string represents. For example, uniCharCode('0','0','0','f')
     * will return 15, and uniCharCode('0','0','f','f') returns 255.
     *
     * Returns a negative number on error, if a char was invalid.
     *
     * This is implemented by noting that char2hex() returns -1 on error,
     * which means the result of ORing the char2hex() will also be negative.
     */
    function uniCharCode(a, b, c, d) {
      return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
    }

    /**
     * Converts a hex character to its integer value.
     * '0' becomes 0, '9' becomes 9
     * 'A' becomes 10, 'F' becomes 15
     * 'a' becomes 10, 'f' becomes 15
     *
     * Returns -1 on error.
     */
    function char2hex(a) {
      return a >= 48 && a <= 57 ? a - 48 // 0-9
      : a >= 65 && a <= 70 ? a - 55 // A-F
      : a >= 97 && a <= 102 ? a - 87 // a-f
      : -1;
    }

    /**
     * Reads an alphanumeric + underscore name from the source.
     *
     * [_A-Za-z][_0-9A-Za-z]*
     */
    function readName(source, start, line, col, prev) {
      var body = source.body;
      var bodyLength = body.length;
      var position = start + 1;
      var code = 0;
      while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _
      code >= 48 && code <= 57 || // 0-9
      code >= 65 && code <= 90 || // A-Z
      code >= 97 && code <= 122) // a-z
      ) {
        ++position;
      }
      return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Configuration options to control parser behavior
     */


    /**
     * Given a GraphQL source, parses it into a Document.
     * Throws GraphQLError if a syntax error is encountered.
     */
    function parse(source, options) {
      var sourceObj = typeof source === 'string' ? new Source(source) : source;
      if (!(sourceObj instanceof Source)) {
        throw new TypeError('Must provide Source. Received: ' + String(sourceObj));
      }
      var lexer = createLexer(sourceObj, options || {});
      return parseDocument(lexer);
    }

    /**
     * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
     * that value.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Values directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: valueFromAST().
     */
    function parseValue(source, options) {
      var sourceObj = typeof source === 'string' ? new Source(source) : source;
      var lexer = createLexer(sourceObj, options || {});
      expect(lexer, TokenKind.SOF);
      var value = parseValueLiteral(lexer, false);
      expect(lexer, TokenKind.EOF);
      return value;
    }

    /**
     * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
     * that type.
     * Throws GraphQLError if a syntax error is encountered.
     *
     * This is useful within tools that operate upon GraphQL Types directly and
     * in isolation of complete GraphQL documents.
     *
     * Consider providing the results to the utility function: typeFromAST().
     */
    function parseType(source, options) {
      var sourceObj = typeof source === 'string' ? new Source(source) : source;
      var lexer = createLexer(sourceObj, options || {});
      expect(lexer, TokenKind.SOF);
      var type = parseTypeReference(lexer);
      expect(lexer, TokenKind.EOF);
      return type;
    }

    /**
     * Converts a name lex token into a name parse node.
     */
    function parseName(lexer) {
      var token = expect(lexer, TokenKind.NAME);
      return {
        kind: Kind.NAME,
        value: token.value,
        loc: loc(lexer, token)
      };
    }

    // Implements the parsing rules in the Document section.

    /**
     * Document : Definition+
     */
    function parseDocument(lexer) {
      var start = lexer.token;
      expect(lexer, TokenKind.SOF);
      var definitions = [];
      do {
        definitions.push(parseDefinition(lexer));
      } while (!skip(lexer, TokenKind.EOF));

      return {
        kind: Kind.DOCUMENT,
        definitions: definitions,
        loc: loc(lexer, start)
      };
    }

    /**
     * Definition :
     *   - ExecutableDefinition
     *   - TypeSystemDefinition
     */
    function parseDefinition(lexer) {
      if (peek(lexer, TokenKind.NAME)) {
        switch (lexer.token.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
          case 'fragment':
            return parseExecutableDefinition(lexer);
          case 'schema':
          case 'scalar':
          case 'type':
          case 'interface':
          case 'union':
          case 'enum':
          case 'input':
          case 'extend':
          case 'directive':
            // Note: The schema definition language is an experimental addition.
            return parseTypeSystemDefinition(lexer);
        }
      } else if (peek(lexer, TokenKind.BRACE_L)) {
        return parseExecutableDefinition(lexer);
      } else if (peekDescription(lexer)) {
        // Note: The schema definition language is an experimental addition.
        return parseTypeSystemDefinition(lexer);
      }

      throw unexpected(lexer);
    }

    /**
     * ExecutableDefinition :
     *   - OperationDefinition
     *   - FragmentDefinition
     */
    function parseExecutableDefinition(lexer) {
      if (peek(lexer, TokenKind.NAME)) {
        switch (lexer.token.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
            return parseOperationDefinition(lexer);

          case 'fragment':
            return parseFragmentDefinition(lexer);
        }
      } else if (peek(lexer, TokenKind.BRACE_L)) {
        return parseOperationDefinition(lexer);
      }

      throw unexpected(lexer);
    }

    // Implements the parsing rules in the Operations section.

    /**
     * OperationDefinition :
     *  - SelectionSet
     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
     */
    function parseOperationDefinition(lexer) {
      var start = lexer.token;
      if (peek(lexer, TokenKind.BRACE_L)) {
        return {
          kind: Kind.OPERATION_DEFINITION,
          operation: 'query',
          name: undefined,
          variableDefinitions: [],
          directives: [],
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }
      var operation = parseOperationType(lexer);
      var name = void 0;
      if (peek(lexer, TokenKind.NAME)) {
        name = parseName(lexer);
      }
      return {
        kind: Kind.OPERATION_DEFINITION,
        operation: operation,
        name: name,
        variableDefinitions: parseVariableDefinitions(lexer),
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }

    /**
     * OperationType : one of query mutation subscription
     */
    function parseOperationType(lexer) {
      var operationToken = expect(lexer, TokenKind.NAME);
      switch (operationToken.value) {
        case 'query':
          return 'query';
        case 'mutation':
          return 'mutation';
        case 'subscription':
          return 'subscription';
      }

      throw unexpected(lexer, operationToken);
    }

    /**
     * VariableDefinitions : ( VariableDefinition+ )
     */
    function parseVariableDefinitions(lexer) {
      return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];
    }

    /**
     * VariableDefinition : Variable : Type DefaultValue?
     */
    function parseVariableDefinition(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.VARIABLE_DEFINITION,
        variable: parseVariable(lexer),
        type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),
        defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,
        loc: loc(lexer, start)
      };
    }

    /**
     * Variable : $ Name
     */
    function parseVariable(lexer) {
      var start = lexer.token;
      expect(lexer, TokenKind.DOLLAR);
      return {
        kind: Kind.VARIABLE,
        name: parseName(lexer),
        loc: loc(lexer, start)
      };
    }

    /**
     * SelectionSet : { Selection+ }
     */
    function parseSelectionSet(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.SELECTION_SET,
        selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),
        loc: loc(lexer, start)
      };
    }

    /**
     * Selection :
     *   - Field
     *   - FragmentSpread
     *   - InlineFragment
     */
    function parseSelection(lexer) {
      return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);
    }

    /**
     * Field : Alias? Name Arguments? Directives? SelectionSet?
     *
     * Alias : Name :
     */
    function parseField(lexer) {
      var start = lexer.token;

      var nameOrAlias = parseName(lexer);
      var alias = void 0;
      var name = void 0;
      if (skip(lexer, TokenKind.COLON)) {
        alias = nameOrAlias;
        name = parseName(lexer);
      } else {
        name = nameOrAlias;
      }

      return {
        kind: Kind.FIELD,
        alias: alias,
        name: name,
        arguments: parseArguments(lexer, false),
        directives: parseDirectives(lexer, false),
        selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,
        loc: loc(lexer, start)
      };
    }

    /**
     * Arguments[Const] : ( Argument[?Const]+ )
     */
    function parseArguments(lexer, isConst) {
      var item = isConst ? parseConstArgument : parseArgument;
      return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];
    }

    /**
     * Argument[Const] : Name : Value[?Const]
     */
    function parseArgument(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.ARGUMENT,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),
        loc: loc(lexer, start)
      };
    }

    function parseConstArgument(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.ARGUMENT,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),
        loc: loc(lexer, start)
      };
    }

    // Implements the parsing rules in the Fragments section.

    /**
     * Corresponds to both FragmentSpread and InlineFragment in the spec.
     *
     * FragmentSpread : ... FragmentName Directives?
     *
     * InlineFragment : ... TypeCondition? Directives? SelectionSet
     */
    function parseFragment(lexer) {
      var start = lexer.token;
      expect(lexer, TokenKind.SPREAD);
      if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {
        return {
          kind: Kind.FRAGMENT_SPREAD,
          name: parseFragmentName(lexer),
          directives: parseDirectives(lexer, false),
          loc: loc(lexer, start)
        };
      }
      var typeCondition = void 0;
      if (lexer.token.value === 'on') {
        lexer.advance();
        typeCondition = parseNamedType(lexer);
      }
      return {
        kind: Kind.INLINE_FRAGMENT,
        typeCondition: typeCondition,
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }

    /**
     * FragmentDefinition :
     *   - fragment FragmentName on TypeCondition Directives? SelectionSet
     *
     * TypeCondition : NamedType
     */
    function parseFragmentDefinition(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'fragment');
      // Experimental support for defining variables within fragments changes
      // the grammar of FragmentDefinition:
      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet
      if (lexer.options.experimentalFragmentVariables) {
        return {
          kind: Kind.FRAGMENT_DEFINITION,
          name: parseFragmentName(lexer),
          variableDefinitions: parseVariableDefinitions(lexer),
          typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
          directives: parseDirectives(lexer, false),
          selectionSet: parseSelectionSet(lexer),
          loc: loc(lexer, start)
        };
      }
      return {
        kind: Kind.FRAGMENT_DEFINITION,
        name: parseFragmentName(lexer),
        typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
        directives: parseDirectives(lexer, false),
        selectionSet: parseSelectionSet(lexer),
        loc: loc(lexer, start)
      };
    }

    /**
     * FragmentName : Name but not `on`
     */
    function parseFragmentName(lexer) {
      if (lexer.token.value === 'on') {
        throw unexpected(lexer);
      }
      return parseName(lexer);
    }

    // Implements the parsing rules in the Values section.

    /**
     * Value[Const] :
     *   - [~Const] Variable
     *   - IntValue
     *   - FloatValue
     *   - StringValue
     *   - BooleanValue
     *   - NullValue
     *   - EnumValue
     *   - ListValue[?Const]
     *   - ObjectValue[?Const]
     *
     * BooleanValue : one of `true` `false`
     *
     * NullValue : `null`
     *
     * EnumValue : Name but not `true`, `false` or `null`
     */
    function parseValueLiteral(lexer, isConst) {
      var token = lexer.token;
      switch (token.kind) {
        case TokenKind.BRACKET_L:
          return parseList(lexer, isConst);
        case TokenKind.BRACE_L:
          return parseObject(lexer, isConst);
        case TokenKind.INT:
          lexer.advance();
          return {
            kind: Kind.INT,
            value: token.value,
            loc: loc(lexer, token)
          };
        case TokenKind.FLOAT:
          lexer.advance();
          return {
            kind: Kind.FLOAT,
            value: token.value,
            loc: loc(lexer, token)
          };
        case TokenKind.STRING:
        case TokenKind.BLOCK_STRING:
          return parseStringLiteral(lexer);
        case TokenKind.NAME:
          if (token.value === 'true' || token.value === 'false') {
            lexer.advance();
            return {
              kind: Kind.BOOLEAN,
              value: token.value === 'true',
              loc: loc(lexer, token)
            };
          } else if (token.value === 'null') {
            lexer.advance();
            return {
              kind: Kind.NULL,
              loc: loc(lexer, token)
            };
          }
          lexer.advance();
          return {
            kind: Kind.ENUM,
            value: token.value,
            loc: loc(lexer, token)
          };
        case TokenKind.DOLLAR:
          if (!isConst) {
            return parseVariable(lexer);
          }
          break;
      }
      throw unexpected(lexer);
    }

    function parseStringLiteral(lexer) {
      var token = lexer.token;
      lexer.advance();
      return {
        kind: Kind.STRING,
        value: token.value,
        block: token.kind === TokenKind.BLOCK_STRING,
        loc: loc(lexer, token)
      };
    }

    function parseConstValue(lexer) {
      return parseValueLiteral(lexer, true);
    }

    function parseValueValue(lexer) {
      return parseValueLiteral(lexer, false);
    }

    /**
     * ListValue[Const] :
     *   - [ ]
     *   - [ Value[?Const]+ ]
     */
    function parseList(lexer, isConst) {
      var start = lexer.token;
      var item = isConst ? parseConstValue : parseValueValue;
      return {
        kind: Kind.LIST,
        values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
        loc: loc(lexer, start)
      };
    }

    /**
     * ObjectValue[Const] :
     *   - { }
     *   - { ObjectField[?Const]+ }
     */
    function parseObject(lexer, isConst) {
      var start = lexer.token;
      expect(lexer, TokenKind.BRACE_L);
      var fields = [];
      while (!skip(lexer, TokenKind.BRACE_R)) {
        fields.push(parseObjectField(lexer, isConst));
      }
      return {
        kind: Kind.OBJECT,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * ObjectField[Const] : Name : Value[?Const]
     */
    function parseObjectField(lexer, isConst) {
      var start = lexer.token;
      return {
        kind: Kind.OBJECT_FIELD,
        name: parseName(lexer),
        value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),
        loc: loc(lexer, start)
      };
    }

    // Implements the parsing rules in the Directives section.

    /**
     * Directives[Const] : Directive[?Const]+
     */
    function parseDirectives(lexer, isConst) {
      var directives = [];
      while (peek(lexer, TokenKind.AT)) {
        directives.push(parseDirective(lexer, isConst));
      }
      return directives;
    }

    /**
     * Directive[Const] : @ Name Arguments[?Const]?
     */
    function parseDirective(lexer, isConst) {
      var start = lexer.token;
      expect(lexer, TokenKind.AT);
      return {
        kind: Kind.DIRECTIVE,
        name: parseName(lexer),
        arguments: parseArguments(lexer, isConst),
        loc: loc(lexer, start)
      };
    }

    // Implements the parsing rules in the Types section.

    /**
     * Type :
     *   - NamedType
     *   - ListType
     *   - NonNullType
     */
    function parseTypeReference(lexer) {
      var start = lexer.token;
      var type = void 0;
      if (skip(lexer, TokenKind.BRACKET_L)) {
        type = parseTypeReference(lexer);
        expect(lexer, TokenKind.BRACKET_R);
        type = {
          kind: Kind.LIST_TYPE,
          type: type,
          loc: loc(lexer, start)
        };
      } else {
        type = parseNamedType(lexer);
      }
      if (skip(lexer, TokenKind.BANG)) {
        return {
          kind: Kind.NON_NULL_TYPE,
          type: type,
          loc: loc(lexer, start)
        };
      }
      return type;
    }

    /**
     * NamedType : Name
     */
    function parseNamedType(lexer) {
      var start = lexer.token;
      return {
        kind: Kind.NAMED_TYPE,
        name: parseName(lexer),
        loc: loc(lexer, start)
      };
    }

    // Implements the parsing rules in the Type Definition section.

    /**
     * TypeSystemDefinition :
     *   - SchemaDefinition
     *   - TypeDefinition
     *   - TypeExtension
     *   - DirectiveDefinition
     *
     * TypeDefinition :
     *   - ScalarTypeDefinition
     *   - ObjectTypeDefinition
     *   - InterfaceTypeDefinition
     *   - UnionTypeDefinition
     *   - EnumTypeDefinition
     *   - InputObjectTypeDefinition
     */
    function parseTypeSystemDefinition(lexer) {
      // Many definitions begin with a description and require a lookahead.
      var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;

      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return parseSchemaDefinition(lexer);
          case 'scalar':
            return parseScalarTypeDefinition(lexer);
          case 'type':
            return parseObjectTypeDefinition(lexer);
          case 'interface':
            return parseInterfaceTypeDefinition(lexer);
          case 'union':
            return parseUnionTypeDefinition(lexer);
          case 'enum':
            return parseEnumTypeDefinition(lexer);
          case 'input':
            return parseInputObjectTypeDefinition(lexer);
          case 'extend':
            return parseTypeExtension(lexer);
          case 'directive':
            return parseDirectiveDefinition(lexer);
        }
      }

      throw unexpected(lexer, keywordToken);
    }

    function peekDescription(lexer) {
      return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);
    }

    /**
     * Description : StringValue
     */
    function parseDescription(lexer) {
      if (peekDescription(lexer)) {
        return parseStringLiteral(lexer);
      }
    }

    /**
     * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }
     */
    function parseSchemaDefinition(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'schema');
      var directives = parseDirectives(lexer, true);
      var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);
      return {
        kind: Kind.SCHEMA_DEFINITION,
        directives: directives,
        operationTypes: operationTypes,
        loc: loc(lexer, start)
      };
    }

    /**
     * OperationTypeDefinition : OperationType : NamedType
     */
    function parseOperationTypeDefinition(lexer) {
      var start = lexer.token;
      var operation = parseOperationType(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseNamedType(lexer);
      return {
        kind: Kind.OPERATION_TYPE_DEFINITION,
        operation: operation,
        type: type,
        loc: loc(lexer, start)
      };
    }

    /**
     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
     */
    function parseScalarTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'scalar');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.SCALAR_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }

    /**
     * ObjectTypeDefinition :
     *   Description?
     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
     */
    function parseObjectTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'type');
      var name = parseName(lexer);
      var interfaces = parseImplementsInterfaces(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      return {
        kind: Kind.OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * ImplementsInterfaces :
     *   - implements `&`? NamedType
     *   - ImplementsInterfaces & NamedType
     */
    function parseImplementsInterfaces(lexer) {
      var types = [];
      if (lexer.token.value === 'implements') {
        lexer.advance();
        // Optional leading ampersand
        skip(lexer, TokenKind.AMP);
        do {
          types.push(parseNamedType(lexer));
        } while (skip(lexer, TokenKind.AMP) ||
        // Legacy support for the SDL?
        lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));
      }
      return types;
    }

    /**
     * FieldsDefinition : { FieldDefinition+ }
     */
    function parseFieldsDefinition(lexer) {
      // Legacy support for the SDL?
      if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {
        lexer.advance();
        lexer.advance();
        return [];
      }
      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];
    }

    /**
     * FieldDefinition :
     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
     */
    function parseFieldDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      var args = parseArgumentDefs(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseTypeReference(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.FIELD_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        type: type,
        directives: directives,
        loc: loc(lexer, start)
      };
    }

    /**
     * ArgumentsDefinition : ( InputValueDefinition+ )
     */
    function parseArgumentDefs(lexer) {
      if (!peek(lexer, TokenKind.PAREN_L)) {
        return [];
      }
      return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);
    }

    /**
     * InputValueDefinition :
     *   - Description? Name : Type DefaultValue? Directives[Const]?
     */
    function parseInputValueDef(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      expect(lexer, TokenKind.COLON);
      var type = parseTypeReference(lexer);
      var defaultValue = void 0;
      if (skip(lexer, TokenKind.EQUALS)) {
        defaultValue = parseConstValue(lexer);
      }
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.INPUT_VALUE_DEFINITION,
        description: description,
        name: name,
        type: type,
        defaultValue: defaultValue,
        directives: directives,
        loc: loc(lexer, start)
      };
    }

    /**
     * InterfaceTypeDefinition :
     *   - Description? interface Name Directives[Const]? FieldsDefinition?
     */
    function parseInterfaceTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'interface');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      return {
        kind: Kind.INTERFACE_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * UnionTypeDefinition :
     *   - Description? union Name Directives[Const]? UnionMemberTypes?
     */
    function parseUnionTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'union');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var types = parseUnionMemberTypes(lexer);
      return {
        kind: Kind.UNION_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        types: types,
        loc: loc(lexer, start)
      };
    }

    /**
     * UnionMemberTypes :
     *   - = `|`? NamedType
     *   - UnionMemberTypes | NamedType
     */
    function parseUnionMemberTypes(lexer) {
      var types = [];
      if (skip(lexer, TokenKind.EQUALS)) {
        // Optional leading pipe
        skip(lexer, TokenKind.PIPE);
        do {
          types.push(parseNamedType(lexer));
        } while (skip(lexer, TokenKind.PIPE));
      }
      return types;
    }

    /**
     * EnumTypeDefinition :
     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
     */
    function parseEnumTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'enum');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var values = parseEnumValuesDefinition(lexer);
      return {
        kind: Kind.ENUM_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        values: values,
        loc: loc(lexer, start)
      };
    }

    /**
     * EnumValuesDefinition : { EnumValueDefinition+ }
     */
    function parseEnumValuesDefinition(lexer) {
      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];
    }

    /**
     * EnumValueDefinition : Description? EnumValue Directives[Const]?
     *
     * EnumValue : Name
     */
    function parseEnumValueDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      return {
        kind: Kind.ENUM_VALUE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }

    /**
     * InputObjectTypeDefinition :
     *   - Description? input Name Directives[Const]? InputFieldsDefinition?
     */
    function parseInputObjectTypeDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'input');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseInputFieldsDefinition(lexer);
      return {
        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * InputFieldsDefinition : { InputValueDefinition+ }
     */
    function parseInputFieldsDefinition(lexer) {
      return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];
    }

    /**
     * TypeExtension :
     *   - ScalarTypeExtension
     *   - ObjectTypeExtension
     *   - InterfaceTypeExtension
     *   - UnionTypeExtension
     *   - EnumTypeExtension
     *   - InputObjectTypeDefinition
     */
    function parseTypeExtension(lexer) {
      var keywordToken = lexer.lookahead();

      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'scalar':
            return parseScalarTypeExtension(lexer);
          case 'type':
            return parseObjectTypeExtension(lexer);
          case 'interface':
            return parseInterfaceTypeExtension(lexer);
          case 'union':
            return parseUnionTypeExtension(lexer);
          case 'enum':
            return parseEnumTypeExtension(lexer);
          case 'input':
            return parseInputObjectTypeExtension(lexer);
        }
      }

      throw unexpected(lexer, keywordToken);
    }

    /**
     * ScalarTypeExtension :
     *   - extend scalar Name Directives[Const]
     */
    function parseScalarTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'scalar');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      if (directives.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.SCALAR_TYPE_EXTENSION,
        name: name,
        directives: directives,
        loc: loc(lexer, start)
      };
    }

    /**
     * ObjectTypeExtension :
     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend type Name ImplementsInterfaces? Directives[Const]
     *  - extend type Name ImplementsInterfaces
     */
    function parseObjectTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'type');
      var name = parseName(lexer);
      var interfaces = parseImplementsInterfaces(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.OBJECT_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * InterfaceTypeExtension :
     *   - extend interface Name Directives[Const]? FieldsDefinition
     *   - extend interface Name Directives[Const]
     */
    function parseInterfaceTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'interface');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseFieldsDefinition(lexer);
      if (directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.INTERFACE_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * UnionTypeExtension :
     *   - extend union Name Directives[Const]? UnionMemberTypes
     *   - extend union Name Directives[Const]
     */
    function parseUnionTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'union');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var types = parseUnionMemberTypes(lexer);
      if (directives.length === 0 && types.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.UNION_TYPE_EXTENSION,
        name: name,
        directives: directives,
        types: types,
        loc: loc(lexer, start)
      };
    }

    /**
     * EnumTypeExtension :
     *   - extend enum Name Directives[Const]? EnumValuesDefinition
     *   - extend enum Name Directives[Const]
     */
    function parseEnumTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'enum');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var values = parseEnumValuesDefinition(lexer);
      if (directives.length === 0 && values.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.ENUM_TYPE_EXTENSION,
        name: name,
        directives: directives,
        values: values,
        loc: loc(lexer, start)
      };
    }

    /**
     * InputObjectTypeExtension :
     *   - extend input Name Directives[Const]? InputFieldsDefinition
     *   - extend input Name Directives[Const]
     */
    function parseInputObjectTypeExtension(lexer) {
      var start = lexer.token;
      expectKeyword(lexer, 'extend');
      expectKeyword(lexer, 'input');
      var name = parseName(lexer);
      var directives = parseDirectives(lexer, true);
      var fields = parseInputFieldsDefinition(lexer);
      if (directives.length === 0 && fields.length === 0) {
        throw unexpected(lexer);
      }
      return {
        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields,
        loc: loc(lexer, start)
      };
    }

    /**
     * DirectiveDefinition :
     *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations
     */
    function parseDirectiveDefinition(lexer) {
      var start = lexer.token;
      var description = parseDescription(lexer);
      expectKeyword(lexer, 'directive');
      expect(lexer, TokenKind.AT);
      var name = parseName(lexer);
      var args = parseArgumentDefs(lexer);
      expectKeyword(lexer, 'on');
      var locations = parseDirectiveLocations(lexer);
      return {
        kind: Kind.DIRECTIVE_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        locations: locations,
        loc: loc(lexer, start)
      };
    }

    /**
     * DirectiveLocations :
     *   - `|`? DirectiveLocation
     *   - DirectiveLocations | DirectiveLocation
     */
    function parseDirectiveLocations(lexer) {
      // Optional leading pipe
      skip(lexer, TokenKind.PIPE);
      var locations = [];
      do {
        locations.push(parseDirectiveLocation(lexer));
      } while (skip(lexer, TokenKind.PIPE));
      return locations;
    }

    /*
     * DirectiveLocation :
     *   - ExecutableDirectiveLocation
     *   - TypeSystemDirectiveLocation
     *
     * ExecutableDirectiveLocation : one of
     *   `QUERY`
     *   `MUTATION`
     *   `SUBSCRIPTION`
     *   `FIELD`
     *   `FRAGMENT_DEFINITION`
     *   `FRAGMENT_SPREAD`
     *   `INLINE_FRAGMENT`
     *
     * TypeSystemDirectiveLocation : one of
     *   `SCHEMA`
     *   `SCALAR`
     *   `OBJECT`
     *   `FIELD_DEFINITION`
     *   `ARGUMENT_DEFINITION`
     *   `INTERFACE`
     *   `UNION`
     *   `ENUM`
     *   `ENUM_VALUE`
     *   `INPUT_OBJECT`
     *   `INPUT_FIELD_DEFINITION`
     */
    function parseDirectiveLocation(lexer) {
      var start = lexer.token;
      var name = parseName(lexer);
      if (DirectiveLocation.hasOwnProperty(name.value)) {
        return name;
      }
      throw unexpected(lexer, start);
    }

    // Core parsing utility functions

    /**
     * Returns a location object, used to identify the place in
     * the source that created a given parsed object.
     */
    function loc(lexer, startToken) {
      if (!lexer.options.noLocation) {
        return new Loc(startToken, lexer.lastToken, lexer.source);
      }
    }

    function Loc(startToken, endToken, source) {
      this.start = startToken.start;
      this.end = endToken.end;
      this.startToken = startToken;
      this.endToken = endToken;
      this.source = source;
    }

    // Print a simplified form when appearing in JSON/util.inspect.
    Loc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {
      return { start: this.start, end: this.end };
    };

    /**
     * Determines if the next token is of a given kind
     */
    function peek(lexer, kind) {
      return lexer.token.kind === kind;
    }

    /**
     * If the next token is of the given kind, return true after advancing
     * the lexer. Otherwise, do not change the parser state and return false.
     */
    function skip(lexer, kind) {
      var match = lexer.token.kind === kind;
      if (match) {
        lexer.advance();
      }
      return match;
    }

    /**
     * If the next token is of the given kind, return that token after advancing
     * the lexer. Otherwise, do not change the parser state and throw an error.
     */
    function expect(lexer, kind) {
      var token = lexer.token;
      if (token.kind === kind) {
        lexer.advance();
        return token;
      }
      throw syntaxError(lexer.source, token.start, 'Expected ' + kind + ', found ' + getTokenDesc(token));
    }

    /**
     * If the next token is a keyword with the given value, return that token after
     * advancing the lexer. Otherwise, do not change the parser state and return
     * false.
     */
    function expectKeyword(lexer, value) {
      var token = lexer.token;
      if (token.kind === TokenKind.NAME && token.value === value) {
        lexer.advance();
        return token;
      }
      throw syntaxError(lexer.source, token.start, 'Expected "' + value + '", found ' + getTokenDesc(token));
    }

    /**
     * Helper function for creating an error when an unexpected lexed token
     * is encountered.
     */
    function unexpected(lexer, atToken) {
      var token = atToken || lexer.token;
      return syntaxError(lexer.source, token.start, 'Unexpected ' + getTokenDesc(token));
    }

    /**
     * Returns a possibly empty list of parse nodes, determined by
     * the parseFn. This list begins with a lex token of openKind
     * and ends with a lex token of closeKind. Advances the parser
     * to the next lex token after the closing token.
     */
    function any(lexer, openKind, parseFn, closeKind) {
      expect(lexer, openKind);
      var nodes = [];
      while (!skip(lexer, closeKind)) {
        nodes.push(parseFn(lexer));
      }
      return nodes;
    }

    /**
     * Returns a non-empty list of parse nodes, determined by
     * the parseFn. This list begins with a lex token of openKind
     * and ends with a lex token of closeKind. Advances the parser
     * to the next lex token after the closing token.
     */
    function many(lexer, openKind, parseFn, closeKind) {
      expect(lexer, openKind);
      var nodes = [parseFn(lexer)];
      while (!skip(lexer, closeKind)) {
        nodes.push(parseFn(lexer));
      }
      return nodes;
    }

    var parser = /*#__PURE__*/Object.freeze({
        parse: parse,
        parseValue: parseValue,
        parseType: parseType,
        parseConstValue: parseConstValue,
        parseTypeReference: parseTypeReference,
        parseNamedType: parseNamedType
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Given a Schema and an AST node describing a type, return a GraphQLType
     * definition which applies to that type. For example, if provided the parsed
     * AST node for `[User]`, a GraphQLList instance will be returned, containing
     * the type called "User" found in the schema. If a type called "User" is not
     * found in the schema, then undefined will be returned.
     */
    /* eslint-disable no-redeclare */

    function typeFromAST(schema, typeNode) {
      /* eslint-enable no-redeclare */
      var innerType = void 0;
      if (typeNode.kind === Kind.LIST_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && GraphQLList(innerType);
      }
      if (typeNode.kind === Kind.NON_NULL_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && GraphQLNonNull(innerType);
      }
      if (typeNode.kind === Kind.NAMED_TYPE) {
        return schema.getType(typeNode.name.value);
      }
      /* istanbul ignore next */
      throw new Error('Unexpected type kind: ' + typeNode.kind + '.');
    }

    function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * TypeInfo is a utility class which, given a GraphQL schema, can keep track
     * of the current field and type definitions at any point in a GraphQL document
     * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
     */
    var TypeInfo = function () {
      function TypeInfo(schema,
      // NOTE: this experimental optional second parameter is only needed in order
      // to support non-spec-compliant codebases. You should never need to use it.
      getFieldDefFn,
      // Initial type may be provided in rare cases to facilitate traversals
      initialType) {
        _classCallCheck$5(this, TypeInfo);

        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn || getFieldDef;
        if (initialType) {
          if (isInputType(initialType)) {
            this._inputTypeStack.push(initialType);
          }
          if (isCompositeType(initialType)) {
            this._parentTypeStack.push(initialType);
          }
          if (isOutputType(initialType)) {
            this._typeStack.push(initialType);
          }
        }
      }

      TypeInfo.prototype.getType = function getType() {
        if (this._typeStack.length > 0) {
          return this._typeStack[this._typeStack.length - 1];
        }
      };

      TypeInfo.prototype.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) {
          return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
      };

      TypeInfo.prototype.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) {
          return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
      };

      TypeInfo.prototype.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) {
          return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
      };

      TypeInfo.prototype.getFieldDef = function getFieldDef() {
        if (this._fieldDefStack.length > 0) {
          return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
      };

      TypeInfo.prototype.getDirective = function getDirective() {
        return this._directive;
      };

      TypeInfo.prototype.getArgument = function getArgument() {
        return this._argument;
      };

      TypeInfo.prototype.getEnumValue = function getEnumValue() {
        return this._enumValue;
      };

      // Flow does not yet handle this case.


      TypeInfo.prototype.enter = function enter(node /* ASTNode */) {
        var schema = this._schema;
        // Note: many of the types below are explicitly typed as "mixed" to drop
        // any assumptions of a valid schema to ensure runtime types are properly
        // checked before continuing since TypeInfo is used as part of validation
        // which occurs before guarantees of schema and document validity.
        switch (node.kind) {
          case Kind.SELECTION_SET:
            var namedType = getNamedType(this.getType());
            this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);
            break;
          case Kind.FIELD:
            var parentType = this.getParentType();
            var fieldDef = void 0;
            var fieldType = void 0;
            if (parentType) {
              fieldDef = this._getFieldDef(schema, parentType, node);
              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }
            this._fieldDefStack.push(fieldDef);
            this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);
            break;
          case Kind.DIRECTIVE:
            this._directive = schema.getDirective(node.name.value);
            break;
          case Kind.OPERATION_DEFINITION:
            var type = void 0;
            if (node.operation === 'query') {
              type = schema.getQueryType();
            } else if (node.operation === 'mutation') {
              type = schema.getMutationType();
            } else if (node.operation === 'subscription') {
              type = schema.getSubscriptionType();
            }
            this._typeStack.push(isObjectType(type) ? type : undefined);
            break;
          case Kind.INLINE_FRAGMENT:
          case Kind.FRAGMENT_DEFINITION:
            var typeConditionAST = node.typeCondition;
            var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());
            this._typeStack.push(isOutputType(outputType) ? outputType : undefined);
            break;
          case Kind.VARIABLE_DEFINITION:
            var inputType = typeFromAST(schema, node.type);
            this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);
            break;
          case Kind.ARGUMENT:
            var argDef = void 0;
            var argType = void 0;
            var fieldOrDirective = this.getDirective() || this.getFieldDef();
            if (fieldOrDirective) {
              argDef = find(fieldOrDirective.args, function (arg) {
                return arg.name === node.name.value;
              });
              if (argDef) {
                argType = argDef.type;
              }
            }
            this._argument = argDef;
            this._inputTypeStack.push(isInputType(argType) ? argType : undefined);
            break;
          case Kind.LIST:
            var listType = getNullableType(this.getInputType());
            var itemType = isListType(listType) ? listType.ofType : listType;
            this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);
            break;
          case Kind.OBJECT_FIELD:
            var objectType = getNamedType(this.getInputType());
            var inputFieldType = void 0;
            if (isInputObjectType(objectType)) {
              var inputField = objectType.getFields()[node.name.value];
              if (inputField) {
                inputFieldType = inputField.type;
              }
            }
            this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);
            break;
          case Kind.ENUM:
            var enumType = getNamedType(this.getInputType());
            var enumValue = void 0;
            if (isEnumType(enumType)) {
              enumValue = enumType.getValue(node.value);
            }
            this._enumValue = enumValue;
            break;
        }
      };

      TypeInfo.prototype.leave = function leave(node) {
        switch (node.kind) {
          case Kind.SELECTION_SET:
            this._parentTypeStack.pop();
            break;
          case Kind.FIELD:
            this._fieldDefStack.pop();
            this._typeStack.pop();
            break;
          case Kind.DIRECTIVE:
            this._directive = null;
            break;
          case Kind.OPERATION_DEFINITION:
          case Kind.INLINE_FRAGMENT:
          case Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();
            break;
          case Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();
            break;
          case Kind.ARGUMENT:
            this._argument = null;
            this._inputTypeStack.pop();
            break;
          case Kind.LIST:
          case Kind.OBJECT_FIELD:
            this._inputTypeStack.pop();
            break;
          case Kind.ENUM:
            this._enumValue = null;
            break;
        }
      };

      return TypeInfo;
    }();

    /**
     * Not exactly the same as the executor's definition of getFieldDef, in this
     * statically evaluated environment we do not always have an Object type,
     * and need to handle Interface and Union types.
     */
    function getFieldDef(schema, parentType, fieldNode) {
      var name = fieldNode.name.value;
      if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return SchemaMetaFieldDef;
      }
      if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return TypeMetaFieldDef;
      }
      if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {
        return TypeNameMetaFieldDef;
      }
      if (isObjectType(parentType) || isInterfaceType(parentType)) {
        return parentType.getFields()[name];
      }
    }

    function nonExecutableDefinitionMessage(defName) {
      return 'The ' + defName + ' definition is not executable.';
    }

    /**
     * Executable definitions
     *
     * A GraphQL document is only valid for execution if all definitions are either
     * operation or fragment definitions.
     */
    function ExecutableDefinitions(context) {
      return {
        Document: function Document(node) {
          node.definitions.forEach(function (definition) {
            if (definition.kind !== Kind.OPERATION_DEFINITION && definition.kind !== Kind.FRAGMENT_DEFINITION) {
              context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION ? 'schema' : definition.name.value), [definition]));
            }
          });
          return false;
        }
      };
    }

    function duplicateOperationNameMessage(operationName) {
      return 'There can be only one operation named "' + operationName + '".';
    }

    /**
     * Unique operation names
     *
     * A GraphQL document is only valid if all defined operations have unique names.
     */
    function UniqueOperationNames(context) {
      var knownOperationNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition(node) {
          var operationName = node.name;
          if (operationName) {
            if (knownOperationNames[operationName.value]) {
              context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));
            } else {
              knownOperationNames[operationName.value] = operationName;
            }
          }
          return false;
        },

        FragmentDefinition: function FragmentDefinition() {
          return false;
        }
      };
    }

    function anonOperationNotAloneMessage() {
      return 'This anonymous operation must be the only defined operation.';
    }

    /**
     * Lone anonymous operation
     *
     * A GraphQL document is only valid if when it contains an anonymous operation
     * (the query short-hand) that it contains only that one operation definition.
     */
    function LoneAnonymousOperation(context) {
      var operationCount = 0;
      return {
        Document: function Document(node) {
          operationCount = node.definitions.filter(function (definition) {
            return definition.kind === Kind.OPERATION_DEFINITION;
          }).length;
        },
        OperationDefinition: function OperationDefinition(node) {
          if (!node.name && operationCount > 1) {
            context.reportError(new GraphQLError(anonOperationNotAloneMessage(), [node]));
          }
        }
      };
    }

    function singleFieldOnlyMessage(name) {
      return (name ? 'Subscription "' + name + '" ' : 'Anonymous Subscription ') + 'must select only one top level field.';
    }

    /**
     * Subscriptions must only include one field.
     *
     * A GraphQL subscription is valid only if it contains a single root field.
     */
    function SingleFieldSubscriptions(context) {
      return {
        OperationDefinition: function OperationDefinition(node) {
          if (node.operation === 'subscription') {
            if (node.selectionSet.selections.length !== 1) {
              context.reportError(new GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));
            }
          }
        }
      };
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Given an invalid input string and a list of valid options, returns a filtered
     * list of valid options sorted based on their similarity with the input.
     */
    function suggestionList(input, options) {
      var optionsByDistance = Object.create(null);
      var oLength = options.length;
      var inputThreshold = input.length / 2;
      for (var i = 0; i < oLength; i++) {
        var distance = lexicalDistance(input, options[i]);
        var threshold = Math.max(inputThreshold, options[i].length / 2, 1);
        if (distance <= threshold) {
          optionsByDistance[options[i]] = distance;
        }
      }
      return Object.keys(optionsByDistance).sort(function (a, b) {
        return optionsByDistance[a] - optionsByDistance[b];
      });
    }

    /**
     * Computes the lexical distance between strings A and B.
     *
     * The "distance" between two strings is given by counting the minimum number
     * of edits needed to transform string A into string B. An edit can be an
     * insertion, deletion, or substitution of a single character, or a swap of two
     * adjacent characters.
     *
     * Includes a custom alteration from Damerau-Levenshtein to treat case changes
     * as a single edit which helps identify mis-cased values with an edit distance
     * of 1.
     *
     * This distance can be useful for detecting typos in input or sorting
     *
     * @param {string} a
     * @param {string} b
     * @return {int} distance in number of edits
     */
    function lexicalDistance(aStr, bStr) {
      if (aStr === bStr) {
        return 0;
      }

      var i = void 0;
      var j = void 0;
      var d = [];
      var a = aStr.toLowerCase();
      var b = bStr.toLowerCase();
      var aLength = a.length;
      var bLength = b.length;

      // Any case change counts as a single edit
      if (a === b) {
        return 1;
      }

      for (i = 0; i <= aLength; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= bLength; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= aLength; i++) {
        for (j = 1; j <= bLength; j++) {
          var cost = a[i - 1] === b[j - 1] ? 0 : 1;

          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[aLength][bLength];
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var MAX_LENGTH = 5;

    /**
     * Given [ A, B, C ] return 'A, B, or C'.
     */
    function orList(items) {
      var selected = items.slice(0, MAX_LENGTH);
      return selected.reduce(function (list, quoted, index) {
        return list + (selected.length > 2 ? ', ' : ' ') + (index === selected.length - 1 ? 'or ' : '') + quoted;
      });
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Given [ A, B, C ] return '"A", "B", or "C"'.
     */
    function quotedOrList(items) {
      return orList(items.map(function (item) {
        return '"' + item + '"';
      }));
    }

    function unknownTypeMessage(typeName, suggestedTypes) {
      var message = 'Unknown type "' + typeName + '".';
      if (suggestedTypes.length) {
        message += ' Did you mean ' + quotedOrList(suggestedTypes) + '?';
      }
      return message;
    }

    /**
     * Known type names
     *
     * A GraphQL document is only valid if referenced types (specifically
     * variable definitions and fragment conditions) are defined by the type schema.
     */
    function KnownTypeNames(context) {
      return {
        // TODO: when validating IDL, re-enable these. Experimental version does not
        // add unreferenced types, resulting in false-positive errors. Squelched
        // errors for now.
        ObjectTypeDefinition: function ObjectTypeDefinition() {
          return false;
        },
        InterfaceTypeDefinition: function InterfaceTypeDefinition() {
          return false;
        },
        UnionTypeDefinition: function UnionTypeDefinition() {
          return false;
        },
        InputObjectTypeDefinition: function InputObjectTypeDefinition() {
          return false;
        },
        NamedType: function NamedType(node) {
          var schema = context.getSchema();
          var typeName = node.name.value;
          var type = schema.getType(typeName);
          if (!type) {
            context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));
          }
        }
      };
    }

    function inlineFragmentOnNonCompositeErrorMessage(type) {
      return 'Fragment cannot condition on non composite type "' + String(type) + '".';
    }

    function fragmentOnNonCompositeErrorMessage(fragName, type) {
      return 'Fragment "' + fragName + '" cannot condition on non composite ' + ('type "' + String(type) + '".');
    }

    /**
     * Fragments on composite type
     *
     * Fragments use a type condition to determine if they apply, since fragments
     * can only be spread into a composite type (object, interface, or union), the
     * type condition must also be a composite type.
     */
    function FragmentsOnCompositeTypes(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var typeCondition = node.typeCondition;
          if (typeCondition) {
            var type = typeFromAST(context.getSchema(), typeCondition);
            if (type && !isCompositeType(type)) {
              context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), [typeCondition]));
            }
          }
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var type = typeFromAST(context.getSchema(), node.typeCondition);
          if (type && !isCompositeType(type)) {
            context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), [node.typeCondition]));
          }
        }
      };
    }

    function nonInputTypeOnVarMessage(variableName, typeName) {
      return 'Variable "$' + variableName + '" cannot be non-input type "' + typeName + '".';
    }

    /**
     * Variables are input types
     *
     * A GraphQL operation is only valid if all the variables it defines are of
     * input types (scalar, enum, or input object).
     */
    function VariablesAreInputTypes(context) {
      return {
        VariableDefinition: function VariableDefinition(node) {
          var type = typeFromAST(context.getSchema(), node.type);

          // If the variable type is not an input type, return an error.
          if (type && !isInputType(type)) {
            var variableName = node.variable.name.value;
            context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));
          }
        }
      };
    }

    function noSubselectionAllowedMessage(fieldName, type) {
      return 'Field "' + fieldName + '" must not have a selection since ' + ('type "' + String(type) + '" has no subfields.');
    }

    function requiredSubselectionMessage(fieldName, type) {
      return 'Field "' + fieldName + '" of type "' + String(type) + '" must have a ' + ('selection of subfields. Did you mean "' + fieldName + ' { ... }"?');
    }

    /**
     * Scalar leafs
     *
     * A GraphQL document is valid only if all leaf fields (fields without
     * sub selections) are of scalar or enum types.
     */
    function ScalarLeafs(context) {
      return {
        Field: function Field(node) {
          var type = context.getType();
          var selectionSet = node.selectionSet;
          if (type) {
            if (isLeafType(getNamedType(type))) {
              if (selectionSet) {
                context.reportError(new GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [selectionSet]));
              }
            } else if (!selectionSet) {
              context.reportError(new GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));
            }
          }
        }
      };
    }

    function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {
      var message = 'Cannot query field "' + fieldName + '" on type "' + type + '".';
      if (suggestedTypeNames.length !== 0) {
        var suggestions = quotedOrList(suggestedTypeNames);
        message += ' Did you mean to use an inline fragment on ' + suggestions + '?';
      } else if (suggestedFieldNames.length !== 0) {
        message += ' Did you mean ' + quotedOrList(suggestedFieldNames) + '?';
      }
      return message;
    }

    /**
     * Fields on correct type
     *
     * A GraphQL document is only valid if all fields selected are defined by the
     * parent type, or are an allowed meta field such as __typename.
     */
    function FieldsOnCorrectType(context) {
      return {
        Field: function Field(node) {
          var type = context.getParentType();
          if (type) {
            var fieldDef = context.getFieldDef();
            if (!fieldDef) {
              // This field doesn't exist, lets look for suggestions.
              var schema = context.getSchema();
              var fieldName = node.name.value;
              // First determine if there are any suggested types to condition on.
              var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);
              // If there are no suggested types, then perhaps this was a typo?
              var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);

              // Report an error, including helpful suggestions.
              context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));
            }
          }
        }
      };
    }

    /**
     * Go through all of the implementations of type, as well as the interfaces
     * that they implement. If any of those types include the provided field,
     * suggest them, sorted by how often the type is referenced,  starting
     * with Interfaces.
     */
    function getSuggestedTypeNames(schema, type, fieldName) {
      if (isAbstractType(type)) {
        var suggestedObjectTypes = [];
        var interfaceUsageCount = Object.create(null);
        schema.getPossibleTypes(type).forEach(function (possibleType) {
          if (!possibleType.getFields()[fieldName]) {
            return;
          }
          // This object type defines this field.
          suggestedObjectTypes.push(possibleType.name);
          possibleType.getInterfaces().forEach(function (possibleInterface) {
            if (!possibleInterface.getFields()[fieldName]) {
              return;
            }
            // This interface type defines this field.
            interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;
          });
        });

        // Suggest interface types based on how common they are.
        var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {
          return interfaceUsageCount[b] - interfaceUsageCount[a];
        });

        // Suggest both interface and object types.
        return suggestedInterfaceTypes.concat(suggestedObjectTypes);
      }

      // Otherwise, must be an Object type, which does not have possible fields.
      return [];
    }

    /**
     * For the field name provided, determine if there are any similar field names
     * that may be the result of a typo.
     */
    function getSuggestedFieldNames(schema, type, fieldName) {
      if (isObjectType(type) || isInterfaceType(type)) {
        var possibleFieldNames = Object.keys(type.getFields());
        return suggestionList(fieldName, possibleFieldNames);
      }
      // Otherwise, must be a Union type, which does not define fields.
      return [];
    }

    function duplicateFragmentNameMessage(fragName) {
      return 'There can be only one fragment named "' + fragName + '".';
    }

    /**
     * Unique fragment names
     *
     * A GraphQL document is only valid if all defined fragments have unique names.
     */
    function UniqueFragmentNames(context) {
      var knownFragmentNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          var fragmentName = node.name.value;
          if (knownFragmentNames[fragmentName]) {
            context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));
          } else {
            knownFragmentNames[fragmentName] = node.name;
          }
          return false;
        }
      };
    }

    function unknownFragmentMessage(fragName) {
      return 'Unknown fragment "' + fragName + '".';
    }

    /**
     * Known fragment names
     *
     * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
     * to fragments defined in the same document.
     */
    function KnownFragmentNames(context) {
      return {
        FragmentSpread: function FragmentSpread(node) {
          var fragmentName = node.name.value;
          var fragment = context.getFragment(fragmentName);
          if (!fragment) {
            context.reportError(new GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));
          }
        }
      };
    }

    function unusedFragMessage(fragName) {
      return 'Fragment "' + fragName + '" is never used.';
    }

    /**
     * No unused fragments
     *
     * A GraphQL document is only valid if all fragment definitions are spread
     * within operations, or spread within other fragments spread within operations.
     */
    function NoUnusedFragments(context) {
      var operationDefs = [];
      var fragmentDefs = [];

      return {
        OperationDefinition: function OperationDefinition(node) {
          operationDefs.push(node);
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          fragmentDefs.push(node);
          return false;
        },

        Document: {
          leave: function leave() {
            var fragmentNameUsed = Object.create(null);
            operationDefs.forEach(function (operation) {
              context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {
                fragmentNameUsed[fragment.name.value] = true;
              });
            });

            fragmentDefs.forEach(function (fragmentDef) {
              var fragName = fragmentDef.name.value;
              if (fragmentNameUsed[fragName] !== true) {
                context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));
              }
            });
          }
        }
      };
    }

    function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {
      return 'Fragment "' + fragName + '" cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
    }

    function typeIncompatibleAnonSpreadMessage(parentType, fragType) {
      return 'Fragment cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
    }

    /**
     * Possible fragment spread
     *
     * A fragment spread is only valid if the type condition could ever possibly
     * be true: if there is a non-empty intersection of the possible parent types,
     * and possible types which pass the type condition.
     */
    function PossibleFragmentSpreads(context) {
      return {
        InlineFragment: function InlineFragment(node) {
          var fragType = context.getType();
          var parentType = context.getParentType();
          if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
            context.reportError(new GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));
          }
        },
        FragmentSpread: function FragmentSpread(node) {
          var fragName = node.name.value;
          var fragType = getFragmentType(context, fragName);
          var parentType = context.getParentType();
          if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
            context.reportError(new GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));
          }
        }
      };
    }

    function getFragmentType(context, name) {
      var frag = context.getFragment(name);
      if (frag) {
        var type = typeFromAST(context.getSchema(), frag.typeCondition);
        if (isCompositeType(type)) {
          return type;
        }
      }
    }

    function cycleErrorMessage(fragName, spreadNames) {
      var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';
      return 'Cannot spread fragment "' + fragName + '" within itself' + via + '.';
    }

    function NoFragmentCycles(context) {
      // Tracks already visited fragments to maintain O(N) and to ensure that cycles
      // are not redundantly reported.
      var visitedFrags = Object.create(null);

      // Array of AST nodes used to produce meaningful errors
      var spreadPath = [];

      // Position in the spread path
      var spreadPathIndexByName = Object.create(null);

      return {
        OperationDefinition: function OperationDefinition() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition(node) {
          if (!visitedFrags[node.name.value]) {
            detectCycleRecursive(node);
          }
          return false;
        }
      };

      // This does a straight-forward DFS to find cycles.
      // It does not terminate when a cycle was found but continues to explore
      // the graph to find all possible cycles.
      function detectCycleRecursive(fragment) {
        var fragmentName = fragment.name.value;
        visitedFrags[fragmentName] = true;

        var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
        if (spreadNodes.length === 0) {
          return;
        }

        spreadPathIndexByName[fragmentName] = spreadPath.length;

        for (var i = 0; i < spreadNodes.length; i++) {
          var spreadNode = spreadNodes[i];
          var spreadName = spreadNode.name.value;
          var cycleIndex = spreadPathIndexByName[spreadName];

          if (cycleIndex === undefined) {
            spreadPath.push(spreadNode);
            if (!visitedFrags[spreadName]) {
              var spreadFragment = context.getFragment(spreadName);
              if (spreadFragment) {
                detectCycleRecursive(spreadFragment);
              }
            }
            spreadPath.pop();
          } else {
            var cyclePath = spreadPath.slice(cycleIndex);
            context.reportError(new GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {
              return s.name.value;
            })), cyclePath.concat(spreadNode)));
          }
        }

        spreadPathIndexByName[fragmentName] = undefined;
      }
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    function duplicateVariableMessage(variableName) {
      return 'There can be only one variable named "' + variableName + '".';
    }

    /**
     * Unique variable names
     *
     * A GraphQL operation is only valid if all its variables are uniquely named.
     */
    function UniqueVariableNames(context) {
      var knownVariableNames = Object.create(null);
      return {
        OperationDefinition: function OperationDefinition() {
          knownVariableNames = Object.create(null);
        },
        VariableDefinition: function VariableDefinition(node) {
          var variableName = node.variable.name.value;
          if (knownVariableNames[variableName]) {
            context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));
          } else {
            knownVariableNames[variableName] = node.variable.name;
          }
        }
      };
    }

    function undefinedVarMessage(varName, opName) {
      return opName ? 'Variable "$' + varName + '" is not defined by operation "' + opName + '".' : 'Variable "$' + varName + '" is not defined.';
    }

    /**
     * No undefined variables
     *
     * A GraphQL operation is only valid if all variables encountered, both directly
     * and via fragment spreads, are defined by that operation.
     */
    function NoUndefinedVariables(context) {
      var variableNameDefined = Object.create(null);

      return {
        OperationDefinition: {
          enter: function enter() {
            variableNameDefined = Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);

            usages.forEach(function (_ref) {
              var node = _ref.node;

              var varName = node.name.value;
              if (variableNameDefined[varName] !== true) {
                context.reportError(new GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));
              }
            });
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          variableNameDefined[node.variable.name.value] = true;
        }
      };
    }

    function unusedVariableMessage(varName, opName) {
      return opName ? 'Variable "$' + varName + '" is never used in operation "' + opName + '".' : 'Variable "$' + varName + '" is never used.';
    }

    /**
     * No unused variables
     *
     * A GraphQL operation is only valid if all variables defined by an operation
     * are used, either directly or within a spread fragment.
     */
    function NoUnusedVariables(context) {
      var variableDefs = [];

      return {
        OperationDefinition: {
          enter: function enter() {
            variableDefs = [];
          },
          leave: function leave(operation) {
            var variableNameUsed = Object.create(null);
            var usages = context.getRecursiveVariableUsages(operation);
            var opName = operation.name ? operation.name.value : null;

            usages.forEach(function (_ref) {
              var node = _ref.node;

              variableNameUsed[node.name.value] = true;
            });

            variableDefs.forEach(function (variableDef) {
              var variableName = variableDef.variable.name.value;
              if (variableNameUsed[variableName] !== true) {
                context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));
              }
            });
          }
        },
        VariableDefinition: function VariableDefinition(def) {
          variableDefs.push(def);
        }
      };
    }

    function unknownDirectiveMessage(directiveName) {
      return 'Unknown directive "' + directiveName + '".';
    }

    function misplacedDirectiveMessage(directiveName, location) {
      return 'Directive "' + directiveName + '" may not be used on ' + location + '.';
    }

    /**
     * Known directives
     *
     * A GraphQL document is only valid if all `@directives` are known by the
     * schema and legally positioned.
     */
    function KnownDirectives(context) {
      return {
        Directive: function Directive(node, key, parent, path, ancestors) {
          var directiveDef = find(context.getSchema().getDirectives(), function (def) {
            return def.name === node.name.value;
          });
          if (!directiveDef) {
            context.reportError(new GraphQLError(unknownDirectiveMessage(node.name.value), [node]));
            return;
          }
          var candidateLocation = getDirectiveLocationForASTPath(ancestors);
          if (candidateLocation && directiveDef.locations.indexOf(candidateLocation) === -1) {
            context.reportError(new GraphQLError(misplacedDirectiveMessage(node.name.value, candidateLocation), [node]));
          }
        }
      };
    }

    function getDirectiveLocationForASTPath(ancestors) {
      var appliedTo = ancestors[ancestors.length - 1];
      if (!Array.isArray(appliedTo)) {
        switch (appliedTo.kind) {
          case Kind.OPERATION_DEFINITION:
            switch (appliedTo.operation) {
              case 'query':
                return DirectiveLocation.QUERY;
              case 'mutation':
                return DirectiveLocation.MUTATION;
              case 'subscription':
                return DirectiveLocation.SUBSCRIPTION;
            }
            break;
          case Kind.FIELD:
            return DirectiveLocation.FIELD;
          case Kind.FRAGMENT_SPREAD:
            return DirectiveLocation.FRAGMENT_SPREAD;
          case Kind.INLINE_FRAGMENT:
            return DirectiveLocation.INLINE_FRAGMENT;
          case Kind.FRAGMENT_DEFINITION:
            return DirectiveLocation.FRAGMENT_DEFINITION;
          case Kind.SCHEMA_DEFINITION:
            return DirectiveLocation.SCHEMA;
          case Kind.SCALAR_TYPE_DEFINITION:
          case Kind.SCALAR_TYPE_EXTENSION:
            return DirectiveLocation.SCALAR;
          case Kind.OBJECT_TYPE_DEFINITION:
          case Kind.OBJECT_TYPE_EXTENSION:
            return DirectiveLocation.OBJECT;
          case Kind.FIELD_DEFINITION:
            return DirectiveLocation.FIELD_DEFINITION;
          case Kind.INTERFACE_TYPE_DEFINITION:
          case Kind.INTERFACE_TYPE_EXTENSION:
            return DirectiveLocation.INTERFACE;
          case Kind.UNION_TYPE_DEFINITION:
          case Kind.UNION_TYPE_EXTENSION:
            return DirectiveLocation.UNION;
          case Kind.ENUM_TYPE_DEFINITION:
          case Kind.ENUM_TYPE_EXTENSION:
            return DirectiveLocation.ENUM;
          case Kind.ENUM_VALUE_DEFINITION:
            return DirectiveLocation.ENUM_VALUE;
          case Kind.INPUT_OBJECT_TYPE_DEFINITION:
          case Kind.INPUT_OBJECT_TYPE_EXTENSION:
            return DirectiveLocation.INPUT_OBJECT;
          case Kind.INPUT_VALUE_DEFINITION:
            var parentNode = ancestors[ancestors.length - 3];
            return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;
        }
      }
    }

    function duplicateDirectiveMessage(directiveName) {
      return 'The directive "' + directiveName + '" can only be used once at ' + 'this location.';
    }

    /**
     * Unique directive names per location
     *
     * A GraphQL document is only valid if all directives at a given location
     * are uniquely named.
     */
    function UniqueDirectivesPerLocation(context) {
      return {
        // Many different AST nodes may contain directives. Rather than listing
        // them all, just listen for entering any node, and check to see if it
        // defines any directives.
        enter: function enter(node) {
          // Flow can't refine that node.directives will only contain directives,
          var directives = node.directives;
          if (directives) {
            var knownDirectives = Object.create(null);
            directives.forEach(function (directive) {
              var directiveName = directive.name.value;
              if (knownDirectives[directiveName]) {
                context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));
              } else {
                knownDirectives[directiveName] = directive;
              }
            });
          }
        }
      };
    }

    function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {
      var message = 'Unknown argument "' + argName + '" on field "' + fieldName + '" of ' + ('type "' + typeName + '".');
      if (suggestedArgs.length) {
        message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';
      }
      return message;
    }

    function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {
      var message = 'Unknown argument "' + argName + '" on directive "@' + directiveName + '".';
      if (suggestedArgs.length) {
        message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';
      }
      return message;
    }

    /**
     * Known argument names
     *
     * A GraphQL field is only valid if all supplied arguments are defined by
     * that field.
     */
    function KnownArgumentNames(context) {
      return {
        Argument: function Argument(node, key, parent, path, ancestors) {
          var argDef = context.getArgument();
          if (!argDef) {
            var argumentOf = ancestors[ancestors.length - 1];
            if (argumentOf.kind === Kind.FIELD) {
              var fieldDef = context.getFieldDef();
              var parentType = context.getParentType();
              if (fieldDef && parentType) {
                context.reportError(new GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, suggestionList(node.name.value, fieldDef.args.map(function (arg) {
                  return arg.name;
                }))), [node]));
              }
            } else if (argumentOf.kind === Kind.DIRECTIVE) {
              var directive = context.getDirective();
              if (directive) {
                context.reportError(new GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, suggestionList(node.name.value, directive.args.map(function (arg) {
                  return arg.name;
                }))), [node]));
              }
            }
          }
        }
      };
    }

    function duplicateArgMessage(argName) {
      return 'There can be only one argument named "' + argName + '".';
    }

    /**
     * Unique argument names
     *
     * A GraphQL field or directive is only valid if all supplied arguments are
     * uniquely named.
     */
    function UniqueArgumentNames(context) {
      var knownArgNames = Object.create(null);
      return {
        Field: function Field() {
          knownArgNames = Object.create(null);
        },
        Directive: function Directive() {
          knownArgNames = Object.create(null);
        },
        Argument: function Argument(node) {
          var argName = node.name.value;
          if (knownArgNames[argName]) {
            context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));
          } else {
            knownArgNames[argName] = node.name;
          }
          return false;
        }
      };
    }

    /**
     * Creates a keyed JS object from an array, given a function to produce the keys
     * for each value in the array.
     *
     * This provides a convenient lookup for the array items if the key function
     * produces unique results.
     *
     *     const phoneBook = [
     *       { name: 'Jon', num: '555-1234' },
     *       { name: 'Jenny', num: '867-5309' }
     *     ]
     *
     *     // { Jon: { name: 'Jon', num: '555-1234' },
     *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
     *     const entriesByName = keyMap(
     *       phoneBook,
     *       entry => entry.name
     *     )
     *
     *     // { name: 'Jenny', num: '857-6309' }
     *     const jennyEntry = entriesByName['Jenny']
     *
     */
    function keyMap(list, keyFn) {
      return list.reduce(function (map, item) {
        return map[keyFn(item)] = item, map;
      }, Object.create(null));
    } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *  strict
       */

    function badValueMessage(typeName, valueName, message) {
      return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');
    }

    function requiredFieldMessage(typeName, fieldName, fieldTypeName) {
      return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');
    }

    function unknownFieldMessage(typeName, fieldName, message) {
      return 'Field "' + fieldName + '" is not defined by type ' + typeName + (message ? '; ' + message : '.');
    }

    /**
     * Value literals of correct type
     *
     * A GraphQL document is only valid if all value literals are of the type
     * expected at their position.
     */
    function ValuesOfCorrectType(context) {
      return {
        NullValue: function NullValue(node) {
          var type = context.getInputType();
          if (isNonNullType(type)) {
            context.reportError(new GraphQLError(badValueMessage(String(type), print(node)), node));
          }
        },
        ListValue: function ListValue(node) {
          // Note: TypeInfo will traverse into a list's item type, so look to the
          // parent input type to check if it is a list.
          var type = getNullableType(context.getParentInputType());
          if (!isListType(type)) {
            isValidScalar(context, node);
            return false; // Don't traverse further.
          }
        },
        ObjectValue: function ObjectValue(node) {
          var type = getNamedType(context.getInputType());
          if (!isInputObjectType(type)) {
            isValidScalar(context, node);
            return false; // Don't traverse further.
          }
          // Ensure every required field exists.
          var inputFields = type.getFields();
          var fieldNodeMap = keyMap(node.fields, function (field) {
            return field.name.value;
          });
          Object.keys(inputFields).forEach(function (fieldName) {
            var fieldType = inputFields[fieldName].type;
            var fieldNode = fieldNodeMap[fieldName];
            if (!fieldNode && isNonNullType(fieldType)) {
              context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));
            }
          });
        },
        ObjectField: function ObjectField(node) {
          var parentType = getNamedType(context.getParentInputType());
          var fieldType = context.getInputType();
          if (!fieldType && isInputObjectType(parentType)) {
            var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));
            var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + orList(suggestions) + '?' : undefined;
            context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));
          }
        },
        EnumValue: function EnumValue(node) {
          var type = getNamedType(context.getInputType());
          if (!isEnumType(type)) {
            isValidScalar(context, node);
          } else if (!type.getValue(node.value)) {
            context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));
          }
        },

        IntValue: function IntValue(node) {
          return isValidScalar(context, node);
        },
        FloatValue: function FloatValue(node) {
          return isValidScalar(context, node);
        },
        StringValue: function StringValue(node) {
          return isValidScalar(context, node);
        },
        BooleanValue: function BooleanValue(node) {
          return isValidScalar(context, node);
        }
      };
    }

    /**
     * Any value literal may be a valid representation of a Scalar, depending on
     * that scalar type.
     */
    function isValidScalar(context, node) {
      // Report any error at the full type expected by the location.
      var locationType = context.getInputType();
      if (!locationType) {
        return;
      }

      var type = getNamedType(locationType);

      if (!isScalarType(type)) {
        context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), enumTypeSuggestion(type, node)), node));
        return;
      }

      // Scalars determine if a literal value is valid via parseLiteral() which
      // may throw or return an invalid value to indicate failure.
      try {
        var parseResult = type.parseLiteral(node, undefined /* variables */);
        if (isInvalid(parseResult)) {
          context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node)), node));
        }
      } catch (error) {
        // Ensure a reference to the original error is maintained.
        context.reportError(new GraphQLError(badValueMessage(String(locationType), print(node), error.message), node, undefined, undefined, undefined, error));
      }
    }

    function enumTypeSuggestion(type, node) {
      if (isEnumType(type)) {
        var suggestions = suggestionList(print(node), type.getValues().map(function (value) {
          return value.name;
        }));
        if (suggestions.length !== 0) {
          return 'Did you mean the enum value ' + orList(suggestions) + '?';
        }
      }
    }

    function missingFieldArgMessage(fieldName, argName, type) {
      return 'Field "' + fieldName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
    }

    function missingDirectiveArgMessage(directiveName, argName, type) {
      return 'Directive "@' + directiveName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
    }

    /**
     * Provided required arguments
     *
     * A field or directive is only valid if all required (non-null) field arguments
     * have been provided.
     */
    function ProvidedNonNullArguments(context) {
      return {
        Field: {
          // Validate on leave to allow for deeper errors to appear first.
          leave: function leave(node) {
            var fieldDef = context.getFieldDef();
            if (!fieldDef) {
              return false;
            }
            var argNodes = node.arguments || [];

            var argNodeMap = keyMap(argNodes, function (arg) {
              return arg.name.value;
            });
            fieldDef.args.forEach(function (argDef) {
              var argNode = argNodeMap[argDef.name];
              if (!argNode && isNonNullType(argDef.type)) {
                context.reportError(new GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));
              }
            });
          }
        },

        Directive: {
          // Validate on leave to allow for deeper errors to appear first.
          leave: function leave(node) {
            var directiveDef = context.getDirective();
            if (!directiveDef) {
              return false;
            }
            var argNodes = node.arguments || [];

            var argNodeMap = keyMap(argNodes, function (arg) {
              return arg.name.value;
            });
            directiveDef.args.forEach(function (argDef) {
              var argNode = argNodeMap[argDef.name];
              if (!argNode && isNonNullType(argDef.type)) {
                context.reportError(new GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));
              }
            });
          }
        }
      };
    }

    function defaultForRequiredVarMessage(varName, type, guessType) {
      return 'Variable "$' + varName + '" of type "' + String(type) + '" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type "' + String(guessType) + '".');
    }

    /**
     * Variable's default value is allowed
     *
     * A GraphQL document is only valid if all variable default values are allowed
     * due to a variable not being required.
     */
    function VariablesDefaultValueAllowed(context) {
      return {
        VariableDefinition: function VariableDefinition(node) {
          var name = node.variable.name.value;
          var defaultValue = node.defaultValue;
          var type = context.getInputType();
          if (isNonNullType(type) && defaultValue) {
            context.reportError(new GraphQLError(defaultForRequiredVarMessage(name, type, type.ofType), [defaultValue]));
          }
          return false; // Do not traverse further.
        },

        SelectionSet: function SelectionSet() {
          return false;
        },
        FragmentDefinition: function FragmentDefinition() {
          return false;
        }
      };
    }

    function badVarPosMessage(varName, varType, expectedType) {
      return 'Variable "$' + varName + '" of type "' + String(varType) + '" used in ' + ('position expecting type "' + String(expectedType) + '".');
    }

    /**
     * Variables passed to field arguments conform to type
     */
    function VariablesInAllowedPosition(context) {
      var varDefMap = Object.create(null);

      return {
        OperationDefinition: {
          enter: function enter() {
            varDefMap = Object.create(null);
          },
          leave: function leave(operation) {
            var usages = context.getRecursiveVariableUsages(operation);

            usages.forEach(function (_ref) {
              var node = _ref.node,
                  type = _ref.type;

              var varName = node.name.value;
              var varDef = varDefMap[varName];
              if (varDef && type) {
                // A var type is allowed if it is the same or more strict (e.g. is
                // a subtype of) than the expected type. It can be more strict if
                // the variable type is non-null when the expected type is nullable.
                // If both are list types, the variable item type can be more strict
                // than the expected item type (contravariant).
                var schema = context.getSchema();
                var varType = typeFromAST(schema, varDef.type);
                if (varType && !isTypeSubTypeOf(schema, effectiveType(varType, varDef), type)) {
                  context.reportError(new GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));
                }
              }
            });
          }
        },
        VariableDefinition: function VariableDefinition(node) {
          varDefMap[node.variable.name.value] = node;
        }
      };
    }

    // If a variable definition has a default value, it's effectively non-null.
    function effectiveType(varType, varDef) {
      return !varDef.defaultValue || isNonNullType(varType) ? varType : GraphQLNonNull(varType);
    }

    function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function fieldsConflictMessage(responseName, reason) {
      return 'Fields "' + responseName + '" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';
    }

    function reasonMessage(reason) {
      if (Array.isArray(reason)) {
        return reason.map(function (_ref) {
          var responseName = _ref[0],
              subreason = _ref[1];
          return 'subfields "' + responseName + '" conflict because ' + reasonMessage(subreason);
        }).join(' and ');
      }
      return reason;
    }

    /**
     * Overlapping fields can be merged
     *
     * A selection set is only valid if all fields (including spreading any
     * fragments) either correspond to distinct response names or can be merged
     * without ambiguity.
     */
    function OverlappingFieldsCanBeMerged(context) {
      // A memoization for when two fragments are compared "between" each other for
      // conflicts. Two fragments may be compared many times, so memoizing this can
      // dramatically improve the performance of this validator.
      var comparedFragmentPairs = new PairSet();

      // A cache for the "field map" and list of fragment names found in any given
      // selection set. Selection sets may be asked for this information multiple
      // times, so this improves the performance of this validator.
      var cachedFieldsAndFragmentNames = new Map();

      return {
        SelectionSet: function SelectionSet(selectionSet) {
          var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
          conflicts.forEach(function (_ref2) {
            var _ref2$ = _ref2[0],
                responseName = _ref2$[0],
                reason = _ref2$[1],
                fields1 = _ref2[1],
                fields2 = _ref2[2];
            return context.reportError(new GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));
          });
        }
      };
    }
    // Field name and reason.

    // Reason is a string, or a nested list of conflicts.

    // Tuple defining a field node in a context.

    // Map of array of those.


    /**
     * Algorithm:
     *
     * Conflicts occur when two fields exist in a query which will produce the same
     * response name, but represent differing values, thus creating a conflict.
     * The algorithm below finds all conflicts via making a series of comparisons
     * between fields. In order to compare as few fields as possible, this makes
     * a series of comparisons "within" sets of fields and "between" sets of fields.
     *
     * Given any selection set, a collection produces both a set of fields by
     * also including all inline fragments, as well as a list of fragments
     * referenced by fragment spreads.
     *
     * A) Each selection set represented in the document first compares "within" its
     * collected set of fields, finding any conflicts between every pair of
     * overlapping fields.
     * Note: This is the *only time* that a the fields "within" a set are compared
     * to each other. After this only fields "between" sets are compared.
     *
     * B) Also, if any fragment is referenced in a selection set, then a
     * comparison is made "between" the original set of fields and the
     * referenced fragment.
     *
     * C) Also, if multiple fragments are referenced, then comparisons
     * are made "between" each referenced fragment.
     *
     * D) When comparing "between" a set of fields and a referenced fragment, first
     * a comparison is made between each field in the original set of fields and
     * each field in the the referenced set of fields.
     *
     * E) Also, if any fragment is referenced in the referenced selection set,
     * then a comparison is made "between" the original set of fields and the
     * referenced fragment (recursively referring to step D).
     *
     * F) When comparing "between" two fragments, first a comparison is made between
     * each field in the first referenced set of fields and each field in the the
     * second referenced set of fields.
     *
     * G) Also, any fragments referenced by the first must be compared to the
     * second, and any fragments referenced by the second must be compared to the
     * first (recursively referring to step F).
     *
     * H) When comparing two fields, if both have selection sets, then a comparison
     * is made "between" both selection sets, first comparing the set of fields in
     * the first selection set with the set of fields in the second.
     *
     * I) Also, if any fragment is referenced in either selection set, then a
     * comparison is made "between" the other set of fields and the
     * referenced fragment.
     *
     * J) Also, if two fragments are referenced in both selection sets, then a
     * comparison is made "between" the two fragments.
     *
     */

    // Find all conflicts found "within" a selection set, including those found
    // via spreading in fragments. Called when visiting each SelectionSet in the
    // GraphQL Document.
    function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
      var conflicts = [];

      var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
          fieldMap = _getFieldsAndFragment[0],
          fragmentNames = _getFieldsAndFragment[1];

      // (A) Find find all conflicts "within" the fields of this selection set.
      // Note: this is the *only place* `collectConflictsWithin` is called.


      collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);

      if (fragmentNames.length !== 0) {
        // (B) Then collect conflicts between these fields and those represented by
        // each spread fragment name found.
        var comparedFragments = Object.create(null);
        for (var i = 0; i < fragmentNames.length; i++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]);
          // (C) Then compare this fragment with all other fragments found in this
          // selection set to collect conflicts between fragments spread together.
          // This compares each item in the list of fragment names to every other
          // item in that same list (except for itself).
          for (var j = i + 1; j < fragmentNames.length; j++) {
            collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
          }
        }
      }
      return conflicts;
    }

    // Collect all conflicts found between a set of fields and a fragment reference
    // including via spreading in any nested fragments.
    function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
      // Memoize so a fragment is not compared for conflicts more than once.
      if (comparedFragments[fragmentName]) {
        return;
      }
      comparedFragments[fragmentName] = true;

      var fragment = context.getFragment(fragmentName);
      if (!fragment) {
        return;
      }

      var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
          fieldMap2 = _getReferencedFieldsA[0],
          fragmentNames2 = _getReferencedFieldsA[1];

      // Do not compare a fragment's fieldMap to itself.


      if (fieldMap === fieldMap2) {
        return;
      }

      // (D) First collect any conflicts between the provided collection of fields
      // and the collection of fields represented by the given fragment.
      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);

      // (E) Then collect any conflicts between the provided collection of fields
      // and any fragment names found in the given fragment.
      for (var i = 0; i < fragmentNames2.length; i++) {
        collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
      }
    }

    // Collect all conflicts found between two fragments, including via spreading in
    // any nested fragments.
    function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
      // No need to compare a fragment to itself.
      if (fragmentName1 === fragmentName2) {
        return;
      }

      // Memoize so two fragments are not compared for conflicts more than once.
      if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
        return;
      }
      comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);

      var fragment1 = context.getFragment(fragmentName1);
      var fragment2 = context.getFragment(fragmentName2);
      if (!fragment1 || !fragment2) {
        return;
      }

      var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
          fieldMap1 = _getReferencedFieldsA2[0],
          fragmentNames1 = _getReferencedFieldsA2[1];

      var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
          fieldMap2 = _getReferencedFieldsA3[0],
          fragmentNames2 = _getReferencedFieldsA3[1];

      // (F) First, collect all conflicts between these two collections of fields
      // (not including any nested fragments).


      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);

      // (G) Then collect conflicts between the first fragment and any nested
      // fragments spread in the second fragment.
      for (var j = 0; j < fragmentNames2.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
      }

      // (G) Then collect conflicts between the second fragment and any nested
      // fragments spread in the first fragment.
      for (var i = 0; i < fragmentNames1.length; i++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
      }
    }

    // Find all conflicts found between two selection sets, including those found
    // via spreading in fragments. Called when determining if conflicts exist
    // between the sub-fields of two overlapping fields.
    function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
      var conflicts = [];

      var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
          fieldMap1 = _getFieldsAndFragment2[0],
          fragmentNames1 = _getFieldsAndFragment2[1];

      var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
          fieldMap2 = _getFieldsAndFragment3[0],
          fragmentNames2 = _getFieldsAndFragment3[1];

      // (H) First, collect all conflicts between these two collections of field.


      collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);

      // (I) Then collect conflicts between the first collection of fields and
      // those referenced by each fragment name associated with the second.
      if (fragmentNames2.length !== 0) {
        var comparedFragments = Object.create(null);
        for (var j = 0; j < fragmentNames2.length; j++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
        }
      }

      // (I) Then collect conflicts between the second collection of fields and
      // those referenced by each fragment name associated with the first.
      if (fragmentNames1.length !== 0) {
        var _comparedFragments = Object.create(null);
        for (var i = 0; i < fragmentNames1.length; i++) {
          collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
        }
      }

      // (J) Also collect conflicts between any fragment names by the first and
      // fragment names by the second. This compares each item in the first set of
      // names to each item in the second set of names.
      for (var _i = 0; _i < fragmentNames1.length; _i++) {
        for (var _j = 0; _j < fragmentNames2.length; _j++) {
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);
        }
      }
      return conflicts;
    }

    // Collect all Conflicts "within" one collection of fields.
    function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
      // A field map is a keyed collection, where each key represents a response
      // name and the value at that key is a list of all fields which provide that
      // response name. For every response name, if there are multiple fields, they
      // must be compared to find a potential conflict.
      Object.keys(fieldMap).forEach(function (responseName) {
        var fields = fieldMap[responseName];
        // This compares every field in the list to every other field in this list
        // (except to itself). If the list only has one item, nothing needs to
        // be compared.
        if (fields.length > 1) {
          for (var i = 0; i < fields.length; i++) {
            for (var j = i + 1; j < fields.length; j++) {
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive
              responseName, fields[i], fields[j]);
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      });
    }

    // Collect all Conflicts between two collections of fields. This is similar to,
    // but different from the `collectConflictsWithin` function above. This check
    // assumes that `collectConflictsWithin` has already been called on each
    // provided collection of fields. This is true because this validator traverses
    // each individual selection set.
    function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
      // A field map is a keyed collection, where each key represents a response
      // name and the value at that key is a list of all fields which provide that
      // response name. For any response name which appears in both provided field
      // maps, each field from the first field map must be compared to every field
      // in the second field map to find potential conflicts.
      Object.keys(fieldMap1).forEach(function (responseName) {
        var fields2 = fieldMap2[responseName];
        if (fields2) {
          var fields1 = fieldMap1[responseName];
          for (var i = 0; i < fields1.length; i++) {
            for (var j = 0; j < fields2.length; j++) {
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          }
        }
      });
    }

    // Determines if there is a conflict between two particular fields, including
    // comparing their sub-fields.
    function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
      var parentType1 = field1[0],
          node1 = field1[1],
          def1 = field1[2];
      var parentType2 = field2[0],
          node2 = field2[1],
          def2 = field2[2];

      // If it is known that two fields could not possibly apply at the same
      // time, due to the parent types, then it is safe to permit them to diverge
      // in aliased field or arguments used as they will not present any ambiguity
      // by differing.
      // It is known that two parent types could never overlap if they are
      // different Object types. Interface or Union types might overlap - if not
      // in the current state of the schema, then perhaps in some future version,
      // thus may not safely diverge.

      var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);

      // The return type for each field.
      var type1 = def1 && def1.type;
      var type2 = def2 && def2.type;

      if (!areMutuallyExclusive) {
        // Two aliases must refer to the same field.
        var name1 = node1.name.value;
        var name2 = node2.name.value;
        if (name1 !== name2) {
          return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];
        }

        // Two field calls must have the same arguments.
        if (!sameArguments(node1.arguments || [], node2.arguments || [])) {
          return [[responseName, 'they have differing arguments'], [node1], [node2]];
        }
      }

      if (type1 && type2 && doTypesConflict(type1, type2)) {
        return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];
      }

      // Collect and compare sub-fields. Use the same "visited fragment names" list
      // for both collections so fields in a fragment reference are never
      // compared to themselves.
      var selectionSet1 = node1.selectionSet;
      var selectionSet2 = node2.selectionSet;
      if (selectionSet1 && selectionSet2) {
        var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);
        return subfieldConflicts(conflicts, responseName, node1, node2);
      }
    }

    function sameArguments(arguments1, arguments2) {
      if (arguments1.length !== arguments2.length) {
        return false;
      }
      return arguments1.every(function (argument1) {
        var argument2 = find(arguments2, function (argument) {
          return argument.name.value === argument1.name.value;
        });
        if (!argument2) {
          return false;
        }
        return sameValue(argument1.value, argument2.value);
      });
    }

    function sameValue(value1, value2) {
      return !value1 && !value2 || print(value1) === print(value2);
    }

    // Two types conflict if both types could not apply to a value simultaneously.
    // Composite types are ignored as their individual field types will be compared
    // later recursively. However List and Non-Null types must match.
    function doTypesConflict(type1, type2) {
      if (isListType(type1)) {
        return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if (isListType(type2)) {
        return true;
      }
      if (isNonNullType(type1)) {
        return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
      }
      if (isNonNullType(type2)) {
        return true;
      }
      if (isLeafType(type1) || isLeafType(type2)) {
        return type1 !== type2;
      }
      return false;
    }

    // Given a selection set, return the collection of fields (a mapping of response
    // name to field nodes and definitions) as well as a list of fragment names
    // referenced via fragment spreads.
    function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
      var cached = cachedFieldsAndFragmentNames.get(selectionSet);
      if (!cached) {
        var nodeAndDefs = Object.create(null);
        var fragmentNames = Object.create(null);
        _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
        cached = [nodeAndDefs, Object.keys(fragmentNames)];
        cachedFieldsAndFragmentNames.set(selectionSet, cached);
      }
      return cached;
    }

    // Given a reference to a fragment, return the represented collection of fields
    // as well as a list of nested fragment names referenced via fragment spreads.
    function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
      // Short-circuit building a type from the node if possible.
      var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
      if (cached) {
        return cached;
      }

      var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);
      return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
    }

    function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
      for (var i = 0; i < selectionSet.selections.length; i++) {
        var selection = selectionSet.selections[i];
        switch (selection.kind) {
          case Kind.FIELD:
            var fieldName = selection.name.value;
            var fieldDef = void 0;
            if (isObjectType(parentType) || isInterfaceType(parentType)) {
              fieldDef = parentType.getFields()[fieldName];
            }
            var responseName = selection.alias ? selection.alias.value : fieldName;
            if (!nodeAndDefs[responseName]) {
              nodeAndDefs[responseName] = [];
            }
            nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          case Kind.FRAGMENT_SPREAD:
            fragmentNames[selection.name.value] = true;
            break;
          case Kind.INLINE_FRAGMENT:
            var typeCondition = selection.typeCondition;
            var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;
            _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
            break;
        }
      }
    }

    // Given a series of Conflicts which occurred between two sub-fields, generate
    // a single Conflict.
    function subfieldConflicts(conflicts, responseName, node1, node2) {
      if (conflicts.length > 0) {
        return [[responseName, conflicts.map(function (_ref3) {
          var reason = _ref3[0];
          return reason;
        })], conflicts.reduce(function (allFields, _ref4) {
          var fields1 = _ref4[1];
          return allFields.concat(fields1);
        }, [node1]), conflicts.reduce(function (allFields, _ref5) {
          var fields2 = _ref5[2];
          return allFields.concat(fields2);
        }, [node2])];
      }
    }

    /**
     * A way to keep track of pairs of things when the ordering of the pair does
     * not matter. We do this by maintaining a sort of double adjacency sets.
     */

    var PairSet = function () {
      function PairSet() {
        _classCallCheck$6(this, PairSet);

        this._data = Object.create(null);
      }

      PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {
        var first = this._data[a];
        var result = first && first[b];
        if (result === undefined) {
          return false;
        }
        // areMutuallyExclusive being false is a superset of being true,
        // hence if we want to know if this PairSet "has" these two with no
        // exclusivity, we have to ensure it was added as such.
        if (areMutuallyExclusive === false) {
          return result === false;
        }
        return true;
      };

      PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {
        _pairSetAdd(this._data, a, b, areMutuallyExclusive);
        _pairSetAdd(this._data, b, a, areMutuallyExclusive);
      };

      return PairSet;
    }();

    function _pairSetAdd(data, a, b, areMutuallyExclusive) {
      var map = data[a];
      if (!map) {
        map = Object.create(null);
        data[a] = map;
      }
      map[b] = areMutuallyExclusive;
    }

    function duplicateInputFieldMessage(fieldName) {
      return 'There can be only one input field named "' + fieldName + '".';
    }

    /**
     * Unique input field names
     *
     * A GraphQL input object value is only valid if all supplied fields are
     * uniquely named.
     */
    function UniqueInputFieldNames(context) {
      var knownNameStack = [];
      var knownNames = Object.create(null);

      return {
        ObjectValue: {
          enter: function enter() {
            knownNameStack.push(knownNames);
            knownNames = Object.create(null);
          },
          leave: function leave() {
            knownNames = knownNameStack.pop();
          }
        },
        ObjectField: function ObjectField(node) {
          var fieldName = node.name.value;
          if (knownNames[fieldName]) {
            context.reportError(new GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));
          } else {
            knownNames[fieldName] = node.name;
          }
          return false;
        }
      };
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * This set includes all validation rules defined by the GraphQL spec.
     *
     * The order of the rules in this list has been adjusted to lead to the
     * most clear output when encountering multiple validation errors.
     */
    var specifiedRules = [ExecutableDefinitions, UniqueOperationNames, LoneAnonymousOperation, SingleFieldSubscriptions, KnownTypeNames, FragmentsOnCompositeTypes, VariablesAreInputTypes, ScalarLeafs, FieldsOnCorrectType, UniqueFragmentNames, KnownFragmentNames, NoUnusedFragments, PossibleFragmentSpreads, NoFragmentCycles, UniqueVariableNames, NoUndefinedVariables, NoUnusedVariables, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNames, UniqueArgumentNames, ValuesOfCorrectType, ProvidedNonNullArguments, VariablesDefaultValueAllowed, VariablesInAllowedPosition, OverlappingFieldsCanBeMerged, UniqueInputFieldNames];

    function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * An instance of this class is passed as the "this" context to all validators,
     * allowing access to commonly useful contextual information from within a
     * validation rule.
     */
    var ValidationContext = function () {
      function ValidationContext(schema, ast, typeInfo) {
        _classCallCheck$7(this, ValidationContext);

        this._schema = schema;
        this._ast = ast;
        this._typeInfo = typeInfo;
        this._errors = [];
        this._fragmentSpreads = new Map();
        this._recursivelyReferencedFragments = new Map();
        this._variableUsages = new Map();
        this._recursiveVariableUsages = new Map();
      }

      ValidationContext.prototype.reportError = function reportError(error) {
        this._errors.push(error);
      };

      ValidationContext.prototype.getErrors = function getErrors() {
        return this._errors;
      };

      ValidationContext.prototype.getSchema = function getSchema() {
        return this._schema;
      };

      ValidationContext.prototype.getDocument = function getDocument() {
        return this._ast;
      };

      ValidationContext.prototype.getFragment = function getFragment(name) {
        var fragments = this._fragments;
        if (!fragments) {
          this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {
            if (statement.kind === Kind.FRAGMENT_DEFINITION) {
              frags[statement.name.value] = statement;
            }
            return frags;
          }, Object.create(null));
        }
        return fragments[name];
      };

      ValidationContext.prototype.getFragmentSpreads = function getFragmentSpreads(node) {
        var spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
          spreads = [];
          var setsToVisit = [node];
          while (setsToVisit.length !== 0) {
            var set = setsToVisit.pop();
            for (var i = 0; i < set.selections.length; i++) {
              var selection = set.selections[i];
              if (selection.kind === Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          }
          this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
      };

      ValidationContext.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
        var fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
          fragments = [];
          var collectedNames = Object.create(null);
          var nodesToVisit = [operation.selectionSet];
          while (nodesToVisit.length !== 0) {
            var _node = nodesToVisit.pop();
            var spreads = this.getFragmentSpreads(_node);
            for (var i = 0; i < spreads.length; i++) {
              var fragName = spreads[i].name.value;
              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                var fragment = this.getFragment(fragName);
                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          }
          this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
      };

      ValidationContext.prototype.getVariableUsages = function getVariableUsages(node) {
        var usages = this._variableUsages.get(node);
        if (!usages) {
          var newUsages = [];
          var typeInfo = new TypeInfo(this._schema);
          visit(node, visitWithTypeInfo(typeInfo, {
            VariableDefinition: function VariableDefinition() {
              return false;
            },
            Variable: function Variable(variable) {
              newUsages.push({ node: variable, type: typeInfo.getInputType() });
            }
          }));
          usages = newUsages;
          this._variableUsages.set(node, usages);
        }
        return usages;
      };

      ValidationContext.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
        var usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
          usages = this.getVariableUsages(operation);
          var fragments = this.getRecursivelyReferencedFragments(operation);
          for (var i = 0; i < fragments.length; i++) {
            Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));
          }
          this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
      };

      ValidationContext.prototype.getType = function getType() {
        return this._typeInfo.getType();
      };

      ValidationContext.prototype.getParentType = function getParentType() {
        return this._typeInfo.getParentType();
      };

      ValidationContext.prototype.getInputType = function getInputType() {
        return this._typeInfo.getInputType();
      };

      ValidationContext.prototype.getParentInputType = function getParentInputType() {
        return this._typeInfo.getParentInputType();
      };

      ValidationContext.prototype.getFieldDef = function getFieldDef() {
        return this._typeInfo.getFieldDef();
      };

      ValidationContext.prototype.getDirective = function getDirective() {
        return this._typeInfo.getDirective();
      };

      ValidationContext.prototype.getArgument = function getArgument() {
        return this._typeInfo.getArgument();
      };

      return ValidationContext;
    }();

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Implements the "Validation" section of the spec.
     *
     * Validation runs synchronously, returning an array of encountered errors, or
     * an empty array if no errors were encountered and the document is valid.
     *
     * A list of specific validation rules may be provided. If not provided, the
     * default list of rules defined by the GraphQL specification will be used.
     *
     * Each validation rules is a function which returns a visitor
     * (see the language/visitor API). Visitor methods are expected to return
     * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
     *
     * Optionally a custom TypeInfo instance may be provided. If not provided, one
     * will be created from the provided schema.
     */
    function validate(schema, ast, rules, typeInfo) {
      !ast ? invariant(0, 'Must provide document') : void 0;
      // If the schema used for validation is invalid, throw an error.
      assertValidSchema(schema);
      return visitUsingRules(schema, typeInfo || new TypeInfo(schema), ast, rules || specifiedRules);
    }

    /**
     * This uses a specialized visitor which runs multiple visitors in parallel,
     * while maintaining the visitor skip and break API.
     *
     * @internal
     */
    function visitUsingRules(schema, typeInfo, documentAST, rules) {
      var context = new ValidationContext(schema, documentAST, typeInfo);
      var visitors = rules.map(function (rule) {
        return rule(context);
      });
      // Visit the whole document with each instance of all provided rules.
      visit(documentAST, visitWithTypeInfo(typeInfo, visitInParallel(visitors)));
      return context.getErrors();
    }

    // eslint-disable-next-line no-redeclare
    function isPromise(value) {
      return Boolean(value && typeof value.then === 'function');
    } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *  strict
       */

    /**
     * Returns true if the value acts like a Promise, i.e. has a "then" function,
     * otherwise returns false.
     */

    /**
     * Copyright (c) 2017-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Memoizes the provided three-argument function.
     */
    function memoize3(fn) {
      var cache0 = void 0;
      function memoized(a1, a2, a3) {
        if (!cache0) {
          cache0 = new WeakMap();
        }
        var cache1 = cache0.get(a1);
        var cache2 = void 0;
        if (cache1) {
          cache2 = cache1.get(a2);
          if (cache2) {
            var cachedValue = cache2.get(a3);
            if (cachedValue !== undefined) {
              return cachedValue;
            }
          }
        } else {
          cache1 = new WeakMap();
          cache0.set(a1, cache1);
        }
        if (!cache2) {
          cache2 = new WeakMap();
          cache1.set(a2, cache2);
        }
        var newValue = fn.apply(this, arguments);
        cache2.set(a3, newValue);
        return newValue;
      }
      return memoized;
    }

    /**
     * This function transforms a JS object `ObjMap<Promise<T>>` into
     * a `Promise<ObjMap<T>>`
     *
     * This is akin to bluebird's `Promise.props`, but implemented only using
     * `Promise.all` so it will work with any implementation of ES6 promises.
     */
    function promiseForObject(object) {
      var keys = Object.keys(object);
      var valuesAndPromises = keys.map(function (name) {
        return object[name];
      });
      return Promise.all(valuesAndPromises).then(function (values) {
        return values.reduce(function (resolvedObject, value, i) {
          resolvedObject[keys[i]] = value;
          return resolvedObject;
        }, Object.create(null));
      });
    } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *  strict
       */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Similar to Array.prototype.reduce(), however the reducing callback may return
     * a Promise, in which case reduction will continue after each promise resolves.
     *
     * If the callback does not return a Promise, then this function will also not
     * return a Promise.
     */
    function promiseReduce(values, callback, initialValue) {
      return values.reduce(function (previous, value) {
        return isPromise(previous) ? previous.then(function (resolved) {
          return callback(resolved, value);
        }) : callback(previous, value);
      }, initialValue);
    }

    var _typeof$3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };


    /**
     * Coerces a JavaScript value given a GraphQL Type.
     *
     * Returns either a value which is valid for the provided type or a list of
     * encountered coercion errors.
     *
     */
    function coerceValue(value, type, blameNode, path) {
      // A value must be provided if the type is non-null.
      if (isNonNullType(type)) {
        if (isNullish(value)) {
          return ofErrors([coercionError('Expected non-nullable type ' + String(type) + ' not to be null', blameNode, path)]);
        }
        return coerceValue(value, type.ofType, blameNode, path);
      }

      if (isNullish(value)) {
        // Explicitly return the value null.
        return ofValue(null);
      }

      if (isScalarType(type)) {
        // Scalars determine if a value is valid via parseValue(), which can
        // throw to indicate failure. If it throws, maintain a reference to
        // the original error.
        try {
          var parseResult = type.parseValue(value);
          if (isInvalid(parseResult)) {
            return ofErrors([coercionError('Expected type ' + type.name, blameNode, path)]);
          }
          return ofValue(parseResult);
        } catch (error) {
          return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, error.message, error)]);
        }
      }

      if (isEnumType(type)) {
        if (typeof value === 'string') {
          var enumValue = type.getValue(value);
          if (enumValue) {
            return ofValue(enumValue.value);
          }
        }
        var suggestions = suggestionList(String(value), type.getValues().map(function (enumValue) {
          return enumValue.name;
        }));
        var didYouMean = suggestions.length !== 0 ? 'did you mean ' + orList(suggestions) + '?' : undefined;
        return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, didYouMean)]);
      }

      if (isListType(type)) {
        var itemType = type.ofType;
        if (isCollection(value)) {
          var _errors = void 0;
          var coercedValue = [];
          forEach(value, function (itemValue, index) {
            var coercedItem = coerceValue(itemValue, itemType, blameNode, atPath(path, index));
            if (coercedItem.errors) {
              _errors = add(_errors, coercedItem.errors);
            } else if (!_errors) {
              coercedValue.push(coercedItem.value);
            }
          });
          return _errors ? ofErrors(_errors) : ofValue(coercedValue);
        }
        // Lists accept a non-list value as a list of one.
        var coercedItem = coerceValue(value, itemType, blameNode);
        return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);
      }

      if (isInputObjectType(type)) {
        if ((typeof value === 'undefined' ? 'undefined' : _typeof$3(value)) !== 'object') {
          return ofErrors([coercionError('Expected type ' + type.name + ' to be an object', blameNode, path)]);
        }
        var _errors2 = void 0;
        var _coercedValue = {};
        var fields = type.getFields();

        // Ensure every defined field is valid.
        for (var fieldName in fields) {
          if (hasOwnProperty.call(fields, fieldName)) {
            var field = fields[fieldName];
            var fieldValue = value[fieldName];
            if (isInvalid(fieldValue)) {
              if (!isInvalid(field.defaultValue)) {
                _coercedValue[fieldName] = field.defaultValue;
              } else if (isNonNullType(field.type)) {
                _errors2 = add(_errors2, coercionError('Field ' + printPath(atPath(path, fieldName)) + ' of required ' + ('type ' + String(field.type) + ' was not provided'), blameNode));
              }
            } else {
              var coercedField = coerceValue(fieldValue, field.type, blameNode, atPath(path, fieldName));
              if (coercedField.errors) {
                _errors2 = add(_errors2, coercedField.errors);
              } else if (!_errors2) {
                _coercedValue[fieldName] = coercedField.value;
              }
            }
          }
        }

        // Ensure every provided field is defined.
        for (var _fieldName in value) {
          if (hasOwnProperty.call(value, _fieldName)) {
            if (!fields[_fieldName]) {
              var _suggestions = suggestionList(_fieldName, Object.keys(fields));
              var _didYouMean = _suggestions.length !== 0 ? 'did you mean ' + orList(_suggestions) + '?' : undefined;
              _errors2 = add(_errors2, coercionError('Field "' + _fieldName + '" is not defined by type ' + type.name, blameNode, path, _didYouMean));
            }
          }
        }

        return _errors2 ? ofErrors(_errors2) : ofValue(_coercedValue);
      }

      /* istanbul ignore next */
      throw new Error('Unexpected type: ' + type + '.');
    }

    function ofValue(value) {
      return { errors: undefined, value: value };
    }

    function ofErrors(errors) {
      return { errors: errors, value: undefined };
    }

    function add(errors, moreErrors) {
      return (errors || []).concat(moreErrors);
    }

    function atPath(prev, key) {
      return { prev: prev, key: key };
    }

    function coercionError(message, blameNode, path, subMessage, originalError) {
      var pathStr = printPath(path);
      // Return a GraphQLError instance
      return new GraphQLError(message + (pathStr ? ' at ' + pathStr : '') + (subMessage ? '; ' + subMessage : '.'), blameNode, undefined, undefined, undefined, originalError);
    }

    // Build a string describing the path into the value where the error was found
    function printPath(path) {
      var pathStr = '';
      var currentPath = path;
      while (currentPath) {
        pathStr = (typeof currentPath.key === 'string' ? '.' + currentPath.key : '[' + String(currentPath.key) + ']') + pathStr;
        currentPath = currentPath.prev;
      }
      return pathStr ? 'value' + pathStr : '';
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Produces a JavaScript value given a GraphQL Value AST.
     *
     * A GraphQL type must be provided, which will be used to interpret different
     * GraphQL Value literals.
     *
     * Returns `undefined` when the value could not be validly coerced according to
     * the provided type.
     *
     * | GraphQL Value        | JSON Value    |
     * | -------------------- | ------------- |
     * | Input Object         | Object        |
     * | List                 | Array         |
     * | Boolean              | Boolean       |
     * | String               | String        |
     * | Int / Float          | Number        |
     * | Enum Value           | Mixed         |
     * | NullValue            | null          |
     *
     */
    function valueFromAST(valueNode, type, variables) {
      if (!valueNode) {
        // When there is no node, then there is also no value.
        // Importantly, this is different from returning the value null.
        return;
      }

      if (isNonNullType(type)) {
        if (valueNode.kind === Kind.NULL) {
          return; // Invalid: intentionally return no value.
        }
        return valueFromAST(valueNode, type.ofType, variables);
      }

      if (valueNode.kind === Kind.NULL) {
        // This is explicitly returning the value null.
        return null;
      }

      if (valueNode.kind === Kind.VARIABLE) {
        var variableName = valueNode.name.value;
        if (!variables || isInvalid(variables[variableName])) {
          // No valid return value.
          return;
        }
        // Note: we're not doing any checking that this variable is correct. We're
        // assuming that this query has been validated and the variable usage here
        // is of the correct type.
        return variables[variableName];
      }

      if (isListType(type)) {
        var itemType = type.ofType;
        if (valueNode.kind === Kind.LIST) {
          var coercedValues = [];
          var itemNodes = valueNode.values;
          for (var i = 0; i < itemNodes.length; i++) {
            if (isMissingVariable(itemNodes[i], variables)) {
              // If an array contains a missing variable, it is either coerced to
              // null or if the item type is non-null, it considered invalid.
              if (isNonNullType(itemType)) {
                return; // Invalid: intentionally return no value.
              }
              coercedValues.push(null);
            } else {
              var itemValue = valueFromAST(itemNodes[i], itemType, variables);
              if (isInvalid(itemValue)) {
                return; // Invalid: intentionally return no value.
              }
              coercedValues.push(itemValue);
            }
          }
          return coercedValues;
        }
        var coercedValue = valueFromAST(valueNode, itemType, variables);
        if (isInvalid(coercedValue)) {
          return; // Invalid: intentionally return no value.
        }
        return [coercedValue];
      }

      if (isInputObjectType(type)) {
        if (valueNode.kind !== Kind.OBJECT) {
          return; // Invalid: intentionally return no value.
        }
        var coercedObj = Object.create(null);
        var fieldNodes = keyMap(valueNode.fields, function (field) {
          return field.name.value;
        });
        var fields = objectValues(type.getFields());
        for (var _i = 0; _i < fields.length; _i++) {
          var field = fields[_i];
          var fieldNode = fieldNodes[field.name];
          if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
            if (!isInvalid(field.defaultValue)) {
              coercedObj[field.name] = field.defaultValue;
            } else if (isNonNullType(field.type)) {
              return; // Invalid: intentionally return no value.
            }
            continue;
          }
          var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
          if (isInvalid(fieldValue)) {
            return; // Invalid: intentionally return no value.
          }
          coercedObj[field.name] = fieldValue;
        }
        return coercedObj;
      }

      if (isEnumType(type)) {
        if (valueNode.kind !== Kind.ENUM) {
          return; // Invalid: intentionally return no value.
        }
        var enumValue = type.getValue(valueNode.value);
        if (!enumValue) {
          return; // Invalid: intentionally return no value.
        }
        return enumValue.value;
      }

      if (isScalarType(type)) {
        // Scalars fulfill parsing a literal value via parseLiteral().
        // Invalid values represent a failure to parse correctly, in which case
        // no value is returned.
        var result = void 0;
        try {
          result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
          return; // Invalid: intentionally return no value.
        }
        if (isInvalid(result)) {
          return; // Invalid: intentionally return no value.
        }
        return result;
      }

      /* istanbul ignore next */
      throw new Error('Unknown type: ' + type + '.');
    }

    // Returns true if the provided valueNode is a variable which is not defined
    // in the set of variables.
    function isMissingVariable(valueNode, variables) {
      return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Prepares an object map of variableValues of the correct type based on the
     * provided variable definitions and arbitrary input. If the input cannot be
     * parsed to match the variable definitions, a GraphQLError will be thrown.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     */
    function getVariableValues(schema, varDefNodes, inputs) {
      var errors = [];
      var coercedValues = {};
      for (var i = 0; i < varDefNodes.length; i++) {
        var varDefNode = varDefNodes[i];
        var varName = varDefNode.variable.name.value;
        var varType = typeFromAST(schema, varDefNode.type);
        if (!isInputType(varType)) {
          errors.push(new GraphQLError('Variable "$' + varName + '" expected value of type ' + ('"' + print(varDefNode.type) + '" which cannot be used as an input type.'), [varDefNode.type]));
        } else {
          var value = inputs[varName];
          if (isInvalid(value)) {
            if (isNonNullType(varType)) {
              errors.push(new GraphQLError('Variable "$' + varName + '" of required type ' + ('"' + String(varType) + '" was not provided.'), [varDefNode]));
            } else if (varDefNode.defaultValue) {
              coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);
            }
          } else {
            var _coerced = coerceValue(value, varType, varDefNode);
            var coercionErrors = _coerced.errors;
            if (coercionErrors) {
              (function () {
                var messagePrelude = 'Variable "$' + varName + '" got invalid value ' + JSON.stringify(value) + '; ';
                coercionErrors.forEach(function (error) {
                  error.message = messagePrelude + error.message;
                });
                errors.push.apply(errors, coercionErrors);
              })();
            } else {
              coercedValues[varName] = _coerced.value;
            }
          }
        }
      }
      return errors.length === 0 ? { errors: undefined, coerced: coercedValues } : { errors: errors, coerced: undefined };
    }

    /**
     * Prepares an object map of argument values given a list of argument
     * definitions and list of argument AST nodes.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     */
    function getArgumentValues(def, node, variableValues) {
      var coercedValues = {};
      var argDefs = def.args;
      var argNodes = node.arguments;
      if (!argDefs || !argNodes) {
        return coercedValues;
      }
      var argNodeMap = keyMap(argNodes, function (arg) {
        return arg.name.value;
      });
      for (var i = 0; i < argDefs.length; i++) {
        var argDef = argDefs[i];
        var name = argDef.name;
        var argType = argDef.type;
        var argumentNode = argNodeMap[name];
        var defaultValue = argDef.defaultValue;
        if (!argumentNode) {
          if (!isInvalid(defaultValue)) {
            coercedValues[name] = defaultValue;
          } else if (isNonNullType(argType)) {
            throw new GraphQLError('Argument "' + name + '" of required type ' + ('"' + String(argType) + '" was not provided.'), [node]);
          }
        } else if (argumentNode.value.kind === Kind.VARIABLE) {
          var variableName = argumentNode.value.name.value;
          if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !isInvalid(variableValues[variableName])) {
            // Note: this does not check that this variable value is correct.
            // This assumes that this query has been validated and the variable
            // usage here is of the correct type.
            coercedValues[name] = variableValues[variableName];
          } else if (!isInvalid(defaultValue)) {
            coercedValues[name] = defaultValue;
          } else if (isNonNullType(argType)) {
            throw new GraphQLError('Argument "' + name + '" of required type "' + String(argType) + '" was ' + ('provided the variable "$' + variableName + '" which was not provided ') + 'a runtime value.', [argumentNode.value]);
          }
        } else {
          var valueNode = argumentNode.value;
          var coercedValue = valueFromAST(valueNode, argType, variableValues);
          if (isInvalid(coercedValue)) {
            // Note: ValuesOfCorrectType validation should catch this before
            // execution. This is a runtime check to ensure execution does not
            // continue with an invalid argument value.
            throw new GraphQLError('Argument "' + name + '" has invalid value ' + print(valueNode) + '.', [argumentNode.value]);
          }
          coercedValues[name] = coercedValue;
        }
      }
      return coercedValues;
    }

    /**
     * Prepares an object map of argument values given a directive definition
     * and a AST node which may contain directives. Optionally also accepts a map
     * of variable values.
     *
     * If the directive does not exist on the node, returns undefined.
     *
     * Note: The returned value is a plain Object with a prototype, since it is
     * exposed to user code. Care should be taken to not pull values from the
     * Object prototype.
     */
    function getDirectiveValues(directiveDef, node, variableValues) {
      var directiveNode = node.directives && find(node.directives, function (directive) {
        return directive.name.value === directiveDef.name;
      });

      if (directiveNode) {
        return getArgumentValues(directiveDef, directiveNode, variableValues);
      }
    }

    var values = /*#__PURE__*/Object.freeze({
        getVariableValues: getVariableValues,
        getArgumentValues: getArgumentValues,
        getDirectiveValues: getDirectiveValues
    });

    var _typeof$4 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    /**
     * Terminology
     *
     * "Definitions" are the generic name for top-level statements in the document.
     * Examples of this include:
     * 1) Operations (such as a query)
     * 2) Fragments
     *
     * "Operations" are a generic name for requests in the document.
     * Examples of this include:
     * 1) query,
     * 2) mutation
     *
     * "Selections" are the definitions that can appear legally and at
     * single level of the query. These include:
     * 1) field references e.g "a"
     * 2) fragment "spreads" e.g. "...c"
     * 3) inline fragment "spreads" e.g. "...on Type { a }"
     */

    /**
     * Data that must be available at all points during query execution.
     *
     * Namely, schema of the type system that is currently executing,
     * and the fragments defined in the query document
     */


    /**
     * The result of GraphQL execution.
     *
     *   - `errors` is included when any errors occurred as a non-empty array.
     *   - `data` is the result of a successful execution of the query.
     */


    /**
     * Implements the "Evaluating requests" section of the GraphQL specification.
     *
     * Returns either a synchronous ExecutionResult (if all encountered resolvers
     * are synchronous), or a Promise of an ExecutionResult that will eventually be
     * resolved and never rejected.
     *
     * If the arguments to this function do not result in a legal execution context,
     * a GraphQLError will be thrown immediately explaining the invalid input.
     *
     * Accepts either an object with named arguments, or individual arguments.
     */

    /* eslint-disable no-redeclare */

    function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      /* eslint-enable no-redeclare */
      // Extract arguments from object args if provided.
      return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
    }

    function executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      // If arguments are missing or incorrect, throw an error.
      assertValidExecutionArguments(schema, document, variableValues);

      // If a valid context cannot be created due to incorrect arguments,
      // a "Response" with only errors is returned.
      var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);

      // Return early errors if execution context failed.
      if (Array.isArray(context)) {
        return { errors: context };
      }

      // Return a Promise that will eventually resolve to the data described by
      // The "Response" section of the GraphQL specification.
      //
      // If errors are encountered while executing a GraphQL field, only that
      // field and its descendants will be omitted, and sibling fields will still
      // be executed. An execution which encounters errors will still result in a
      // resolved Promise.
      var data = executeOperation(context, context.operation, rootValue);
      return buildResponse(context, data);
    }

    /**
     * Given a completed execution context and data, build the { errors, data }
     * response defined by the "Response" section of the GraphQL specification.
     */
    function buildResponse(context, data) {
      if (isPromise(data)) {
        return data.then(function (resolved) {
          return buildResponse(context, resolved);
        });
      }
      return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };
    }

    /**
     * Given a ResponsePath (found in the `path` entry in the information provided
     * as the last argument to a field resolver), return an Array of the path keys.
     */
    function responsePathAsArray(path) {
      var flattened = [];
      var curr = path;
      while (curr) {
        flattened.push(curr.key);
        curr = curr.prev;
      }
      return flattened.reverse();
    }

    /**
     * Given a ResponsePath and a key, return a new ResponsePath containing the
     * new key.
     */
    function addPath(prev, key) {
      return { prev: prev, key: key };
    }

    /**
     * Essential assertions before executing to provide developer feedback for
     * improper use of the GraphQL library.
     */
    function assertValidExecutionArguments(schema, document, rawVariableValues) {
      !document ? invariant(0, 'Must provide document') : void 0;

      // If the schema used for execution is invalid, throw an error.
      assertValidSchema(schema);

      // Variables, if provided, must be an object.
      !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof$4(rawVariableValues)) === 'object') ? invariant(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;
    }

    /**
     * Constructs a ExecutionContext object from the arguments passed to
     * execute, which we will pass throughout the other execution methods.
     *
     * Throws a GraphQLError if a valid execution context cannot be created.
     */
    function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {
      var errors = [];
      var operation = void 0;
      var hasMultipleAssumedOperations = false;
      var fragments = Object.create(null);
      for (var i = 0; i < document.definitions.length; i++) {
        var definition = document.definitions[i];
        switch (definition.kind) {
          case Kind.OPERATION_DEFINITION:
            if (!operationName && operation) {
              hasMultipleAssumedOperations = true;
            } else if (!operationName || definition.name && definition.name.value === operationName) {
              operation = definition;
            }
            break;
          case Kind.FRAGMENT_DEFINITION:
            fragments[definition.name.value] = definition;
            break;
        }
      }

      if (!operation) {
        if (operationName) {
          errors.push(new GraphQLError('Unknown operation named "' + operationName + '".'));
        } else {
          errors.push(new GraphQLError('Must provide an operation.'));
        }
      } else if (hasMultipleAssumedOperations) {
        errors.push(new GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));
      }

      var variableValues = void 0;
      if (operation) {
        var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});

        if (coercedVariableValues.errors) {
          errors.push.apply(errors, coercedVariableValues.errors);
        } else {
          variableValues = coercedVariableValues.coerced;
        }
      }

      if (errors.length !== 0) {
        return errors;
      }

      !operation ? invariant(0, 'Has operation if no errors.') : void 0;
      !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;

      return {
        schema: schema,
        fragments: fragments,
        rootValue: rootValue,
        contextValue: contextValue,
        operation: operation,
        variableValues: variableValues,
        fieldResolver: fieldResolver || defaultFieldResolver,
        errors: errors
      };
    }

    /**
     * Implements the "Evaluating operations" section of the spec.
     */
    function executeOperation(exeContext, operation, rootValue) {
      var type = getOperationRootType(exeContext.schema, operation);
      var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));

      var path = undefined;

      // Errors from sub-fields of a NonNull type may propagate to the top level,
      // at which point we still log the error and null the parent field, which
      // in this case is the entire response.
      //
      // Similar to completeValueCatchingError.
      try {
        var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);
        if (isPromise(result)) {
          return result.then(undefined, function (error) {
            exeContext.errors.push(error);
            return Promise.resolve(null);
          });
        }
        return result;
      } catch (error) {
        exeContext.errors.push(error);
        return null;
      }
    }

    /**
     * Extracts the root type of the operation from the schema.
     */
    function getOperationRootType(schema, operation) {
      switch (operation.operation) {
        case 'query':
          var queryType = schema.getQueryType();
          if (!queryType) {
            throw new GraphQLError('Schema does not define the required query root type.', [operation]);
          }
          return queryType;
        case 'mutation':
          var mutationType = schema.getMutationType();
          if (!mutationType) {
            throw new GraphQLError('Schema is not configured for mutations.', [operation]);
          }
          return mutationType;
        case 'subscription':
          var subscriptionType = schema.getSubscriptionType();
          if (!subscriptionType) {
            throw new GraphQLError('Schema is not configured for subscriptions.', [operation]);
          }
          return subscriptionType;
        default:
          throw new GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);
      }
    }

    /**
     * Implements the "Evaluating selection sets" section of the spec
     * for "write" mode.
     */
    function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
      return promiseReduce(Object.keys(fields), function (results, responseName) {
        var fieldNodes = fields[responseName];
        var fieldPath = addPath(path, responseName);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result === undefined) {
          return results;
        }
        if (isPromise(result)) {
          return result.then(function (resolvedResult) {
            results[responseName] = resolvedResult;
            return results;
          });
        }
        results[responseName] = result;
        return results;
      }, Object.create(null));
    }

    /**
     * Implements the "Evaluating selection sets" section of the spec
     * for "read" mode.
     */
    function executeFields(exeContext, parentType, sourceValue, path, fields) {
      var containsPromise = false;

      var finalResults = Object.keys(fields).reduce(function (results, responseName) {
        var fieldNodes = fields[responseName];
        var fieldPath = addPath(path, responseName);
        var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result === undefined) {
          return results;
        }
        results[responseName] = result;
        if (!containsPromise && isPromise(result)) {
          containsPromise = true;
        }
        return results;
      }, Object.create(null));

      // If there are no promises, we can just return the object
      if (!containsPromise) {
        return finalResults;
      }

      // Otherwise, results is a map from field name to the result
      // of resolving that field, which is possibly a promise. Return
      // a promise that will return this same map, but with any
      // promises replaced with the values they resolved to.
      return promiseForObject(finalResults);
    }

    /**
     * Given a selectionSet, adds all of the fields in that selection to
     * the passed in map of fields, and returns it at the end.
     *
     * CollectFields requires the "runtime type" of an object. For a field which
     * returns an Interface or Union type, the "runtime type" will be the actual
     * Object type returned by that field.
     */
    function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
      for (var i = 0; i < selectionSet.selections.length; i++) {
        var selection = selectionSet.selections[i];
        switch (selection.kind) {
          case Kind.FIELD:
            if (!shouldIncludeNode(exeContext, selection)) {
              continue;
            }
            var name = getFieldEntryKey(selection);
            if (!fields[name]) {
              fields[name] = [];
            }
            fields[name].push(selection);
            break;
          case Kind.INLINE_FRAGMENT:
            if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
              continue;
            }
            collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
            break;
          case Kind.FRAGMENT_SPREAD:
            var fragName = selection.name.value;
            if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
              continue;
            }
            visitedFragmentNames[fragName] = true;
            var fragment = exeContext.fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
              continue;
            }
            collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
            break;
        }
      }
      return fields;
    }

    /**
     * Determines if a field should be included based on the @include and @skip
     * directives, where @skip has higher precidence than @include.
     */
    function shouldIncludeNode(exeContext, node) {
      var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);
      if (skip && skip.if === true) {
        return false;
      }

      var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);
      if (include && include.if === false) {
        return false;
      }
      return true;
    }

    /**
     * Determines if a fragment is applicable to the given type.
     */
    function doesFragmentConditionMatch(exeContext, fragment, type) {
      var typeConditionNode = fragment.typeCondition;
      if (!typeConditionNode) {
        return true;
      }
      var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);
      if (conditionalType === type) {
        return true;
      }
      if (isAbstractType(conditionalType)) {
        return exeContext.schema.isPossibleType(conditionalType, type);
      }
      return false;
    }

    /**
     * Implements the logic to compute the key of a given field's entry
     */
    function getFieldEntryKey(node) {
      return node.alias ? node.alias.value : node.name.value;
    }

    /**
     * Resolves the field on the given source object. In particular, this
     * figures out the value that the field returns by calling its resolve function,
     * then calls completeValue to complete promises, serialize scalars, or execute
     * the sub-selection-set for objects.
     */
    function resolveField(exeContext, parentType, source, fieldNodes, path) {
      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;

      var fieldDef = getFieldDef$1(exeContext.schema, parentType, fieldName);
      if (!fieldDef) {
        return;
      }

      var resolveFn = fieldDef.resolve || exeContext.fieldResolver;

      var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);

      // Get the resolve function, regardless of if its result is normal
      // or abrupt (error).
      var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);

      return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);
    }

    function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
      // The resolve function's optional fourth argument is a collection of
      // information about the current execution state.
      return {
        fieldName: fieldNodes[0].name.value,
        fieldNodes: fieldNodes,
        returnType: fieldDef.type,
        parentType: parentType,
        path: path,
        schema: exeContext.schema,
        fragments: exeContext.fragments,
        rootValue: exeContext.rootValue,
        operation: exeContext.operation,
        variableValues: exeContext.variableValues
      };
    }

    // Isolates the "ReturnOrAbrupt" behavior to not de-opt the `resolveField`
    // function. Returns the result of resolveFn or the abrupt-return Error object.
    function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {
      try {
        // Build a JS object of arguments from the field.arguments AST, using the
        // variables scope to fulfill any variable references.
        // TODO: find a way to memoize, in case this field is within a List type.
        var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);

        // The resolve function's optional third argument is a context value that
        // is provided to every resolve function within an execution. It is commonly
        // used to represent an authenticated user, or request-specific caches.
        var context = exeContext.contextValue;

        var result = resolveFn(source, args, context, info);
        return isPromise(result) ? result.then(undefined, asErrorInstance) : result;
      } catch (error) {
        return asErrorInstance(error);
      }
    }

    // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a
    // consistent Error interface.
    function asErrorInstance(error) {
      return error instanceof Error ? error : new Error(error || undefined);
    }

    // This is a small wrapper around completeValue which detects and logs errors
    // in the execution context.
    function completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {
      // If the field type is non-nullable, then it is resolved without any
      // protection from errors, however it still properly locates the error.
      if (isNonNullType(returnType)) {
        return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);
      }

      // Otherwise, error protection is applied, logging the error and resolving
      // a null value for this field if one is encountered.
      try {
        var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);
        if (isPromise(completed)) {
          // If `completeValueWithLocatedError` returned a rejected promise, log
          // the rejection error and resolve to null.
          // Note: we don't rely on a `catch` method, but we do expect "thenable"
          // to take a second callback for the error case.
          return completed.then(undefined, function (error) {
            exeContext.errors.push(error);
            return Promise.resolve(null);
          });
        }
        return completed;
      } catch (error) {
        // If `completeValueWithLocatedError` returned abruptly (threw an error),
        // log the error and return null.
        exeContext.errors.push(error);
        return null;
      }
    }

    // This is a small wrapper around completeValue which annotates errors with
    // location information.
    function completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {
      try {
        var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
        if (isPromise(completed)) {
          return completed.then(undefined, function (error) {
            return Promise.reject(locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));
          });
        }
        return completed;
      } catch (error) {
        throw locatedError(asErrorInstance(error), fieldNodes, responsePathAsArray(path));
      }
    }

    /**
     * Implements the instructions for completeValue as defined in the
     * "Field entries" section of the spec.
     *
     * If the field type is Non-Null, then this recursively completes the value
     * for the inner type. It throws a field error if that completion returns null,
     * as per the "Nullability" section of the spec.
     *
     * If the field type is a List, then this recursively completes the value
     * for the inner type on each item in the list.
     *
     * If the field type is a Scalar or Enum, ensures the completed value is a legal
     * value of the type by calling the `serialize` method of GraphQL type
     * definition.
     *
     * If the field is an abstract type, determine the runtime type of the value
     * and then complete based on that type
     *
     * Otherwise, the field type expects a sub-selection set, and will complete the
     * value by evaluating all sub-selections.
     */
    function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
      // If result is a Promise, apply-lift over completeValue.
      if (isPromise(result)) {
        return result.then(function (resolved) {
          return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
        });
      }

      // If result is an Error, throw a located error.
      if (result instanceof Error) {
        throw result;
      }

      // If field type is NonNull, complete for inner type, and throw field error
      // if result is null.
      if (isNonNullType(returnType)) {
        var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
        if (completed === null) {
          throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');
        }
        return completed;
      }

      // If result value is null-ish (null, undefined, or NaN) then return null.
      if (isNullish(result)) {
        return null;
      }

      // If field type is List, complete each item in the list with the inner type
      if (isListType(returnType)) {
        return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
      }

      // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
      // returning null if serialization is not possible.
      if (isLeafType(returnType)) {
        return completeLeafValue(returnType, result);
      }

      // If field type is an abstract type, Interface or Union, determine the
      // runtime Object type and complete for that type.
      if (isAbstractType(returnType)) {
        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
      }

      // If field type is Object, execute and complete all sub-selections.
      if (isObjectType(returnType)) {
        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
      }

      // Not reachable. All possible output types have been considered.
      /* istanbul ignore next */
      throw new Error('Cannot complete value of unexpected type "' + String(returnType) + '".');
    }

    /**
     * Complete a list value by completing each item in the list with the
     * inner type
     */
    function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
      !isCollection(result) ? invariant(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;

      // This is specified as a simple map, however we're optimizing the path
      // where the list contains no Promises by avoiding creating another Promise.
      var itemType = returnType.ofType;
      var containsPromise = false;
      var completedResults = [];
      forEach(result, function (item, index) {
        // No need to modify the info object containing the path,
        // since from here on it is not ever accessed by resolver functions.
        var fieldPath = addPath(path, index);
        var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);

        if (!containsPromise && isPromise(completedItem)) {
          containsPromise = true;
        }
        completedResults.push(completedItem);
      });

      return containsPromise ? Promise.all(completedResults) : completedResults;
    }

    /**
     * Complete a Scalar or Enum by serializing to a valid value, returning
     * null if serialization is not possible.
     */
    function completeLeafValue(returnType, result) {
      !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;
      var serializedResult = returnType.serialize(result);
      if (isInvalid(serializedResult)) {
        throw new Error('Expected a value of type "' + String(returnType) + '" but ' + ('received: ' + String(result)));
      }
      return serializedResult;
    }

    /**
     * Complete a value of an abstract type by determining the runtime object type
     * of that value, then complete the value for that type.
     */
    function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
      var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);

      if (isPromise(runtimeType)) {
        return runtimeType.then(function (resolvedRuntimeType) {
          return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
        });
      }

      return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    }

    function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
      var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;

      if (!isObjectType(runtimeType)) {
        throw new GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value "' + String(result) + '", received "' + String(runtimeType) + '". ') + ('Either the ' + returnType.name + ' type should provide a "resolveType" ') + 'function or each possible types should provide an ' + '"isTypeOf" function.', fieldNodes);
      }

      if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {
        throw new GraphQLError('Runtime Object type "' + runtimeType.name + '" is not a possible type ' + ('for "' + returnType.name + '".'), fieldNodes);
      }

      return runtimeType;
    }

    /**
     * Complete an Object value by executing all sub-selections.
     */
    function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
      // If there is an isTypeOf predicate function, call it with the
      // current result. If isTypeOf returns false, then raise an error rather
      // than continuing execution.
      if (returnType.isTypeOf) {
        var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

        if (isPromise(isTypeOf)) {
          return isTypeOf.then(function (resolvedIsTypeOf) {
            if (!resolvedIsTypeOf) {
              throw invalidReturnTypeError(returnType, result, fieldNodes);
            }
            return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
          });
        }

        if (!isTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
      }

      return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
    }

    function invalidReturnTypeError(returnType, result, fieldNodes) {
      return new GraphQLError('Expected value of type "' + returnType.name + '" but got: ' + String(result) + '.', fieldNodes);
    }

    function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {
      // Collect sub-fields to execute to complete this value.
      var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
      return executeFields(exeContext, returnType, result, path, subFieldNodes);
    }

    /**
     * A memoized collection of relevant subfields in the context of the return
     * type. Memoizing ensures the subfields are not repeatedly calculated, which
     * saves overhead when resolving lists of values.
     */
    var collectSubfields = memoize3(_collectSubfields);
    function _collectSubfields(exeContext, returnType, fieldNodes) {
      var subFieldNodes = Object.create(null);
      var visitedFragmentNames = Object.create(null);
      for (var i = 0; i < fieldNodes.length; i++) {
        var selectionSet = fieldNodes[i].selectionSet;
        if (selectionSet) {
          subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);
        }
      }
      return subFieldNodes;
    }

    /**
     * If a resolveType function is not given, then a default resolve behavior is
     * used which attempts two strategies:
     *
     * First, See if the provided value has a `__typename` field defined, if so, use
     * that value as name of the resolved type.
     *
     * Otherwise, test each possible type for the abstract type by calling
     * isTypeOf for the object being coerced, returning the first type that matches.
     */
    function defaultResolveTypeFn(value, context, info, abstractType) {
      // First, look for `__typename`.
      if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof$4(value)) === 'object' && typeof value.__typename === 'string') {
        return value.__typename;
      }

      // Otherwise, test each possible type.
      var possibleTypes = info.schema.getPossibleTypes(abstractType);
      var promisedIsTypeOfResults = [];

      for (var i = 0; i < possibleTypes.length; i++) {
        var type = possibleTypes[i];

        if (type.isTypeOf) {
          var isTypeOfResult = type.isTypeOf(value, context, info);

          if (isPromise(isTypeOfResult)) {
            promisedIsTypeOfResults[i] = isTypeOfResult;
          } else if (isTypeOfResult) {
            return type;
          }
        }
      }

      if (promisedIsTypeOfResults.length) {
        return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
          for (var _i = 0; _i < isTypeOfResults.length; _i++) {
            if (isTypeOfResults[_i]) {
              return possibleTypes[_i];
            }
          }
        });
      }
    }

    /**
     * If a resolve function is not given, then a default resolve behavior is used
     * which takes the property of the source object of the same name as the field
     * and returns it as the result, or if it's a function, returns the result
     * of calling that function while passing along args and context.
     */
    var defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {
      // ensure source is a value for which property access is acceptable.
      if ((typeof source === 'undefined' ? 'undefined' : _typeof$4(source)) === 'object' || typeof source === 'function') {
        var property = source[info.fieldName];
        if (typeof property === 'function') {
          return source[info.fieldName](args, context, info);
        }
        return property;
      }
    };

    /**
     * This method looks up the field on the given type defintion.
     * It has special casing for the two introspection fields, __schema
     * and __typename. __typename is special because it can always be
     * queried as a field, even in situations where no other fields
     * are allowed, like on a Union. __schema could get automatically
     * added to the query type, but that would require mutating type
     * definitions, which would cause issues.
     */
    function getFieldDef$1(schema, parentType, fieldName) {
      if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return SchemaMetaFieldDef;
      } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return TypeMetaFieldDef;
      } else if (fieldName === TypeNameMetaFieldDef.name) {
        return TypeNameMetaFieldDef;
      }
      return parentType.getFields()[fieldName];
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * This is the primary entry point function for fulfilling GraphQL operations
     * by parsing, validating, and executing a GraphQL document along side a
     * GraphQL schema.
     *
     * More sophisticated GraphQL servers, such as those which persist queries,
     * may wish to separate the validation and execution phases to a static time
     * tooling step, and a server runtime step.
     *
     * Accepts either an object with named arguments, or individual arguments:
     *
     * schema:
     *    The GraphQL type system to use when validating and executing a query.
     * source:
     *    A GraphQL language formatted string representing the requested operation.
     * rootValue:
     *    The value provided as the first argument to resolver functions on the top
     *    level type (e.g. the query object type).
     * variableValues:
     *    A mapping of variable name to runtime value to use for all variables
     *    defined in the requestString.
     * operationName:
     *    The name of the operation to use if requestString contains multiple
     *    possible operations. Can be omitted if requestString contains only
     *    one operation.
     * fieldResolver:
     *    A resolver function to use when one is not provided by the schema.
     *    If not provided, the default field resolver is used (which looks for a
     *    value or method on the source value with the field's name).
     */

    /* eslint-disable no-redeclare */

    function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      var _arguments = arguments;

      /* eslint-enable no-redeclare */
      // Always return a Promise for a consistent API.
      return new Promise(function (resolve) {
        return resolve(
        // Extract arguments from object args if provided.
        _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));
      });
    }

    /**
     * The graphqlSync function also fulfills GraphQL operations by parsing,
     * validating, and executing a GraphQL document along side a GraphQL schema.
     * However, it guarantees to complete synchronously (or throw an error) assuming
     * that all field resolvers are also synchronous.
     */

    /* eslint-disable no-redeclare */

    function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      // Extract arguments from object args if provided.
      var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);

      // Assert that the execution was synchronous.
      if (result.then) {
        throw new Error('GraphQL execution failed to complete synchronously.');
      }

      return result;
    }

    function graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      // Validate Schema
      var schemaValidationErrors = validateSchema(schema);
      if (schemaValidationErrors.length > 0) {
        return { errors: schemaValidationErrors };
      }

      // Parse
      var document = void 0;
      try {
        document = parse(source);
      } catch (syntaxError) {
        return { errors: [syntaxError] };
      }

      // Validate
      var validationErrors = validate(schema, document);
      if (validationErrors.length > 0) {
        return { errors: validationErrors };
      }

      // Execute
      return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var language = /*#__PURE__*/Object.freeze({
        getLocation: getLocation,
        Kind: Kind,
        createLexer: createLexer,
        TokenKind: TokenKind,
        parse: parse,
        parseValue: parseValue,
        parseType: parseType,
        print: print,
        Source: Source,
        visit: visit,
        visitInParallel: visitInParallel,
        visitWithTypeInfo: visitWithTypeInfo,
        getVisitFn: getVisitFn,
        BREAK: BREAK,
        DirectiveLocation: DirectiveLocation
    });

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


    /**
     * Given an AsyncIterable and a callback function, return an AsyncIterator
     * which produces values mapped via calling the callback function.
     */
    function mapAsyncIterator(iterable, callback, rejectCallback) {
      var iterator = getAsyncIterator(iterable);
      var $return = void 0;
      var abruptClose = void 0;
      // $FlowFixMe(>=0.68.0)
      if (typeof iterator.return === 'function') {
        $return = iterator.return;
        abruptClose = function abruptClose(error) {
          var rethrow = function rethrow() {
            return Promise.reject(error);
          };
          return $return.call(iterator).then(rethrow, rethrow);
        };
      }

      function mapResult(result) {
        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
      }

      var mapReject = void 0;
      if (rejectCallback) {
        // Capture rejectCallback to ensure it cannot be null.
        var reject = rejectCallback;
        mapReject = function mapReject(error) {
          return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
        };
      }

      /* TODO: Flow doesn't support symbols as keys:
         https://github.com/facebook/flow/issues/3258 */
      return _defineProperty({
        next: function next() {
          return iterator.next().then(mapResult, mapReject);
        },
        return: function _return() {
          return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: undefined, done: true });
        },
        throw: function _throw(error) {
          // $FlowFixMe(>=0.68.0)
          if (typeof iterator.throw === 'function') {
            return iterator.throw(error).then(mapResult, mapReject);
          }
          return Promise.reject(error).catch(abruptClose);
        }
      }, $$asyncIterator, function () {
        return this;
      });
    }

    function asyncMapValue(value, callback) {
      return new Promise(function (resolve) {
        return resolve(callback(value));
      });
    }

    function iteratorResult(value) {
      return { value: value, done: false };
    }

    /**
     * Copyright (c) 2017-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Implements the "Subscribe" algorithm described in the GraphQL specification.
     *
     * Returns a Promise which resolves to either an AsyncIterator (if successful)
     * or an ExecutionResult (client error). The promise will be rejected if a
     * server error occurs.
     *
     * If the client-provided arguments to this function do not result in a
     * compliant subscription, a GraphQL Response (ExecutionResult) with
     * descriptive errors and no data will be returned.
     *
     * If the the source stream could not be created due to faulty subscription
     * resolver logic or underlying systems, the promise will resolve to a single
     * ExecutionResult containing `errors` and no `data`.
     *
     * If the operation succeeded, the promise resolves to an AsyncIterator, which
     * yields a stream of ExecutionResults representing the response stream.
     *
     * Accepts either an object with named arguments, or individual arguments.
     */

    /* eslint-disable no-redeclare */

    function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
      /* eslint-enable no-redeclare */
      // Extract arguments from object args if provided.
      return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);
    }

    /**
     * This function checks if the error is a GraphQLError. If it is, report it as
     * an ExecutionResult, containing only errors and no data. Otherwise treat the
     * error as a system-class error and re-throw it.
     */
    function reportGraphQLError(error) {
      if (error instanceof GraphQLError) {
        return { errors: [error] };
      }
      throw error;
    }

    function subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
      var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);

      // For each payload yielded from a subscription, map it over the normal
      // GraphQL `execute` function, with `payload` as the rootValue.
      // This implements the "MapSourceToResponseEvent" algorithm described in
      // the GraphQL specification. The `execute` function provides the
      // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
      // "ExecuteQuery" algorithm, for which `execute` is also used.
      var mapSourceToResponse = function mapSourceToResponse(payload) {
        return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);
      };

      // Resolve the Source Stream, then map every source value to a
      // ExecutionResult value as described above.
      return sourcePromise.then(function (resultOrStream) {
        return (
          // Note: Flow can't refine isAsyncIterable, so explicit casts are used.
          isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream
        );
      }, reportGraphQLError);
    }

    /**
     * Implements the "CreateSourceEventStream" algorithm described in the
     * GraphQL specification, resolving the subscription source event stream.
     *
     * Returns a Promise<AsyncIterable>.
     *
     * If the client-provided invalid arguments, the source stream could not be
     * created, or the resolver did not return an AsyncIterable, this function will
     * will throw an error, which should be caught and handled by the caller.
     *
     * A Source Event Stream represents a sequence of events, each of which triggers
     * a GraphQL execution for that event.
     *
     * This may be useful when hosting the stateful subscription service in a
     * different true or machine than the stateless GraphQL execution engine,
     * or otherwise separating these two steps. For more on this, see the
     * "Supporting Subscriptions at Scale" information in the GraphQL specification.
     */
    function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
      // If arguments are missing or incorrectly typed, this is an internal
      // developer mistake which should throw an early error.
      assertValidExecutionArguments(schema, document, variableValues);

      try {
        // If a valid context cannot be created due to incorrect arguments,
        // this will throw an error.
        var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);

        // Return early errors if execution context failed.
        if (Array.isArray(exeContext)) {
          return Promise.resolve({ errors: exeContext });
        }

        var type = getOperationRootType(schema, exeContext.operation);
        var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));
        var responseNames = Object.keys(fields);
        var responseName = responseNames[0];
        var fieldNodes = fields[responseName];
        var fieldNode = fieldNodes[0];
        var fieldName = fieldNode.name.value;
        var fieldDef = getFieldDef$1(schema, type, fieldName);

        if (!fieldDef) {
          throw new GraphQLError('The subscription field "' + fieldName + '" is not defined.', fieldNodes);
        }

        // Call the `subscribe()` resolver or the default resolver to produce an
        // AsyncIterable yielding raw payloads.
        var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;

        var path = addPath(undefined, responseName);

        var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path);

        // resolveFieldValueOrError implements the "ResolveFieldEventStream"
        // algorithm from GraphQL specification. It differs from
        // "ResolveFieldValue" due to providing a different `resolveFn`.
        var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);

        // Coerce to Promise for easier error handling and consistent return type.
        return Promise.resolve(result).then(function (eventStream) {
          // If eventStream is an Error, rethrow a located error.
          if (eventStream instanceof Error) {
            throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));
          }

          // Assert field returned an event stream, otherwise yield an error.
          if (isAsyncIterable(eventStream)) {
            // Note: isAsyncIterable above ensures this will be correct.
            return eventStream;
          }
          throw new Error('Subscription field must return Async Iterable. Received: ' + String(eventStream));
        });
      } catch (error) {
        return Promise.reject(error);
      }
    }

    /**
     * Copyright (c) 2017-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    function getIntrospectionQuery(options) {
      var descriptions = !(options && options.descriptions === false);
      return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
    }

    var introspectionQuery = getIntrospectionQuery();

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Returns an operation AST given a document AST and optionally an operation
     * name. If a name is not provided, an operation is only returned if only one is
     * provided in the document.
     */
    function getOperationAST(documentAST, operationName) {
      var operation = null;
      for (var i = 0; i < documentAST.definitions.length; i++) {
        var definition = documentAST.definitions[i];
        if (definition.kind === Kind.OPERATION_DEFINITION) {
          if (!operationName) {
            // If no operation name was provided, only return an Operation if there
            // is one defined in the document. Upon encountering the second, return
            // null.
            if (operation) {
              return null;
            }
            operation = definition;
          } else if (definition.name && definition.name.value === operationName) {
            return definition;
          }
        }
      }
      return operation;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Build an IntrospectionQuery from a GraphQLSchema
     *
     * IntrospectionQuery is useful for utilities that care about type and field
     * relationships, but do not need to traverse through those relationships.
     *
     * This is the inverse of buildClientSchema. The primary use case is outside
     * of the server context, for instance when doing schema comparisons.
     */
    function introspectionFromSchema(schema, options) {
      var queryAST = parse(getIntrospectionQuery(options));
      var result = execute(schema, queryAST);
      !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;
      return result.data;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Build a GraphQLSchema for use by client tools.
     *
     * Given the result of a client running the introspection query, creates and
     * returns a GraphQLSchema instance which can be then used with all graphql-js
     * tools, but cannot be used to execute a query, as introspection does not
     * represent the "resolver", "parse" or "serialize" functions or any other
     * server-internal mechanisms.
     *
     * This function expects a complete introspection result. Don't forget to check
     * the "errors" field of a server response before calling this function.
     */
    function buildClientSchema(introspection, options) {
      // Get the schema from the introspection result.
      var schemaIntrospection = introspection.__schema;

      // Converts the list of types into a keyMap based on the type names.
      var typeIntrospectionMap = keyMap(schemaIntrospection.types, function (type) {
        return type.name;
      });

      // A cache to use to store the actual GraphQLType definition objects by name.
      // Initialize to the GraphQL built in scalars. All functions below are inline
      // so that this type def cache is within the scope of the closure.
      var typeDefCache = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {
        return type.name;
      });

      // Given a type reference in introspection, return the GraphQLType instance.
      // preferring cached instances before building new instances.
      function getType(typeRef) {
        if (typeRef.kind === TypeKind.LIST) {
          var itemRef = typeRef.ofType;
          if (!itemRef) {
            throw new Error('Decorated type deeper than introspection query.');
          }
          return GraphQLList(getType(itemRef));
        }
        if (typeRef.kind === TypeKind.NON_NULL) {
          var nullableRef = typeRef.ofType;
          if (!nullableRef) {
            throw new Error('Decorated type deeper than introspection query.');
          }
          var nullableType = getType(nullableRef);
          return GraphQLNonNull(assertNullableType(nullableType));
        }
        if (!typeRef.name) {
          throw new Error('Unknown type reference: ' + JSON.stringify(typeRef));
        }
        return getNamedType$$1(typeRef.name);
      }

      function getNamedType$$1(typeName) {
        if (typeDefCache[typeName]) {
          return typeDefCache[typeName];
        }
        var typeIntrospection = typeIntrospectionMap[typeName];
        if (!typeIntrospection) {
          throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');
        }
        var typeDef = buildType(typeIntrospection);
        typeDefCache[typeName] = typeDef;
        return typeDef;
      }

      function getInputType(typeRef) {
        var type = getType(typeRef);
        !isInputType(type) ? invariant(0, 'Introspection must provide input type for arguments.') : void 0;
        return type;
      }

      function getOutputType(typeRef) {
        var type = getType(typeRef);
        !isOutputType(type) ? invariant(0, 'Introspection must provide output type for fields.') : void 0;
        return type;
      }

      function getObjectType(typeRef) {
        var type = getType(typeRef);
        return assertObjectType(type);
      }

      function getInterfaceType(typeRef) {
        var type = getType(typeRef);
        return assertInterfaceType(type);
      }

      // Given a type's introspection result, construct the correct
      // GraphQLType instance.
      function buildType(type) {
        if (type && type.name && type.kind) {
          switch (type.kind) {
            case TypeKind.SCALAR:
              return buildScalarDef(type);
            case TypeKind.OBJECT:
              return buildObjectDef(type);
            case TypeKind.INTERFACE:
              return buildInterfaceDef(type);
            case TypeKind.UNION:
              return buildUnionDef(type);
            case TypeKind.ENUM:
              return buildEnumDef(type);
            case TypeKind.INPUT_OBJECT:
              return buildInputObjectDef(type);
          }
        }
        throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + JSON.stringify(type));
      }

      function buildScalarDef(scalarIntrospection) {
        return new GraphQLScalarType({
          name: scalarIntrospection.name,
          description: scalarIntrospection.description,
          serialize: function serialize(value) {
            return value;
          }
        });
      }

      function buildObjectDef(objectIntrospection) {
        if (!objectIntrospection.interfaces) {
          throw new Error('Introspection result missing interfaces: ' + JSON.stringify(objectIntrospection));
        }
        return new GraphQLObjectType({
          name: objectIntrospection.name,
          description: objectIntrospection.description,
          interfaces: objectIntrospection.interfaces.map(getInterfaceType),
          fields: function fields() {
            return buildFieldDefMap(objectIntrospection);
          }
        });
      }

      function buildInterfaceDef(interfaceIntrospection) {
        return new GraphQLInterfaceType({
          name: interfaceIntrospection.name,
          description: interfaceIntrospection.description,
          fields: function fields() {
            return buildFieldDefMap(interfaceIntrospection);
          }
        });
      }

      function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
          throw new Error('Introspection result missing possibleTypes: ' + JSON.stringify(unionIntrospection));
        }
        return new GraphQLUnionType({
          name: unionIntrospection.name,
          description: unionIntrospection.description,
          types: unionIntrospection.possibleTypes.map(getObjectType)
        });
      }

      function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
          throw new Error('Introspection result missing enumValues: ' + JSON.stringify(enumIntrospection));
        }
        return new GraphQLEnumType({
          name: enumIntrospection.name,
          description: enumIntrospection.description,
          values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {
            return valueIntrospection.name;
          }, function (valueIntrospection) {
            return {
              description: valueIntrospection.description,
              deprecationReason: valueIntrospection.deprecationReason
            };
          })
        });
      }

      function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
          throw new Error('Introspection result missing inputFields: ' + JSON.stringify(inputObjectIntrospection));
        }
        return new GraphQLInputObjectType({
          name: inputObjectIntrospection.name,
          description: inputObjectIntrospection.description,
          fields: function fields() {
            return buildInputValueDefMap(inputObjectIntrospection.inputFields);
          }
        });
      }

      function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
          throw new Error('Introspection result missing fields: ' + JSON.stringify(typeIntrospection));
        }
        return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {
          return fieldIntrospection.name;
        }, function (fieldIntrospection) {
          if (!fieldIntrospection.args) {
            throw new Error('Introspection result missing field args: ' + JSON.stringify(fieldIntrospection));
          }
          return {
            description: fieldIntrospection.description,
            deprecationReason: fieldIntrospection.deprecationReason,
            type: getOutputType(fieldIntrospection.type),
            args: buildInputValueDefMap(fieldIntrospection.args)
          };
        });
      }

      function buildInputValueDefMap(inputValueIntrospections) {
        return keyValMap(inputValueIntrospections, function (inputValue) {
          return inputValue.name;
        }, buildInputValue);
      }

      function buildInputValue(inputValueIntrospection) {
        var type = getInputType(inputValueIntrospection.type);
        var defaultValue = inputValueIntrospection.defaultValue ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;
        return {
          name: inputValueIntrospection.name,
          description: inputValueIntrospection.description,
          type: type,
          defaultValue: defaultValue
        };
      }

      function buildDirective(directiveIntrospection) {
        // Support deprecated `on****` fields for building `locations`, as this
        // is used by GraphiQL which may need to support outdated servers.
        var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [DirectiveLocation.QUERY, DirectiveLocation.MUTATION, DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [DirectiveLocation.FRAGMENT_DEFINITION, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT]);
        if (!directiveIntrospection.args) {
          throw new Error('Introspection result missing directive args: ' + JSON.stringify(directiveIntrospection));
        }
        return new GraphQLDirective({
          name: directiveIntrospection.name,
          description: directiveIntrospection.description,
          locations: locations,
          args: buildInputValueDefMap(directiveIntrospection.args)
        });
      }

      // Iterate through all types, getting the type definition for each, ensuring
      // that any type not directly referenced by a field will get created.
      var types = schemaIntrospection.types.map(function (typeIntrospection) {
        return getNamedType$$1(typeIntrospection.name);
      });

      // Get the root Query, Mutation, and Subscription types.
      var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;

      var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;

      var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;

      // Get the directives supported by Introspection, assuming empty-set if
      // directives were not queried for.
      var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];

      // Then produce and return a Schema with these types.
      return new GraphQLSchema({
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: types,
        directives: directives,
        assumeValid: options && options.assumeValid,
        allowedLegacyNames: options && options.allowedLegacyNames
      });
    }

    function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


    function buildWrappedType(innerType, inputTypeNode) {
      if (inputTypeNode.kind === Kind.LIST_TYPE) {
        return GraphQLList(buildWrappedType(innerType, inputTypeNode.type));
      }
      if (inputTypeNode.kind === Kind.NON_NULL_TYPE) {
        var wrappedType = buildWrappedType(innerType, inputTypeNode.type);
        return GraphQLNonNull(assertNullableType(wrappedType));
      }
      return innerType;
    }

    function getNamedTypeNode(typeNode) {
      var namedType = typeNode;
      while (namedType.kind === Kind.LIST_TYPE || namedType.kind === Kind.NON_NULL_TYPE) {
        namedType = namedType.type;
      }
      return namedType;
    }

    /**
     * This takes the ast of a schema document produced by the parse function in
     * src/language/parser.js.
     *
     * If no schema definition is provided, then it will look for types named Query
     * and Mutation.
     *
     * Given that AST it constructs a GraphQLSchema. The resulting schema
     * has no resolve methods, so execution will use default resolvers.
     *
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */
    function buildASTSchema(ast, options) {
      if (!ast || ast.kind !== Kind.DOCUMENT) {
        throw new Error('Must provide a document ast.');
      }

      var schemaDef = void 0;

      var typeDefs = [];
      var nodeMap = Object.create(null);
      var directiveDefs = [];
      for (var i = 0; i < ast.definitions.length; i++) {
        var d = ast.definitions[i];
        switch (d.kind) {
          case Kind.SCHEMA_DEFINITION:
            if (schemaDef) {
              throw new Error('Must provide only one schema definition.');
            }
            schemaDef = d;
            break;
          case Kind.SCALAR_TYPE_DEFINITION:
          case Kind.OBJECT_TYPE_DEFINITION:
          case Kind.INTERFACE_TYPE_DEFINITION:
          case Kind.ENUM_TYPE_DEFINITION:
          case Kind.UNION_TYPE_DEFINITION:
          case Kind.INPUT_OBJECT_TYPE_DEFINITION:
            var typeName = d.name.value;
            if (nodeMap[typeName]) {
              throw new Error('Type "' + typeName + '" was defined more than once.');
            }
            typeDefs.push(d);
            nodeMap[typeName] = d;
            break;
          case Kind.DIRECTIVE_DEFINITION:
            directiveDefs.push(d);
            break;
        }
      }

      var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {
        query: nodeMap.Query,
        mutation: nodeMap.Mutation,
        subscription: nodeMap.Subscription
      };

      var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {
        throw new Error('Type "' + typeRef.name.value + '" not found in document.');
      });

      var types = definitionBuilder.buildTypes(typeDefs);
      var directives = directiveDefs.map(function (def) {
        return definitionBuilder.buildDirective(def);
      });

      // If specified directives were not explicitly declared, add them.
      if (!directives.some(function (directive) {
        return directive.name === 'skip';
      })) {
        directives.push(GraphQLSkipDirective);
      }

      if (!directives.some(function (directive) {
        return directive.name === 'include';
      })) {
        directives.push(GraphQLIncludeDirective);
      }

      if (!directives.some(function (directive) {
        return directive.name === 'deprecated';
      })) {
        directives.push(GraphQLDeprecatedDirective);
      }

      // Note: While this could make early assertions to get the correctly
      // typed values below, that would throw immediately while type system
      // validation with validateSchema() will produce more actionable results.
      return new GraphQLSchema({
        query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,
        mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,
        subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,
        types: types,
        directives: directives,
        astNode: schemaDef,
        assumeValid: options && options.assumeValid,
        allowedLegacyNames: options && options.allowedLegacyNames
      });

      function getOperationTypes(schema) {
        var opTypes = {};
        schema.operationTypes.forEach(function (operationType) {
          var typeName = operationType.type.name.value;
          var operation = operationType.operation;
          if (opTypes[operation]) {
            throw new Error('Must provide only one ' + operation + ' type in schema.');
          }
          if (!nodeMap[typeName]) {
            throw new Error('Specified ' + operation + ' type "' + typeName + '" not found in document.');
          }
          opTypes[operation] = operationType.type;
        });
        return opTypes;
      }
    }

    var ASTDefinitionBuilder = function () {
      function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {
        _classCallCheck$8(this, ASTDefinitionBuilder);

        this._typeDefinitionsMap = typeDefinitionsMap;
        this._options = options;
        this._resolveType = resolveType;
        // Initialize to the GraphQL built in scalars and introspection types.
        this._cache = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {
          return type.name;
        });
      }

      ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {
        var _this = this;

        return nodes.map(function (node) {
          return _this.buildType(node);
        });
      };

      ASTDefinitionBuilder.prototype.buildType = function buildType(node) {
        var typeName = node.name.value;
        if (!this._cache[typeName]) {
          if (node.kind === Kind.NAMED_TYPE) {
            var defNode = this._typeDefinitionsMap[typeName];
            this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);
          } else {
            this._cache[typeName] = this._makeSchemaDef(node);
          }
        }
        return this._cache[typeName];
      };

      ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {
        var typeDef = this.buildType(getNamedTypeNode(typeNode));
        return buildWrappedType(typeDef, typeNode);
      };

      ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {
        return new GraphQLDirective({
          name: directiveNode.name.value,
          description: getDescription(directiveNode, this._options),
          locations: directiveNode.locations.map(function (node) {
            return node.value;
          }),
          args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),
          astNode: directiveNode
        });
      };

      ASTDefinitionBuilder.prototype.buildField = function buildField(field) {
        return {
          // Note: While this could make assertions to get the correctly typed
          // value, that would throw immediately while type system validation
          // with validateSchema() will produce more actionable results.
          type: this._buildWrappedType(field.type),
          description: getDescription(field, this._options),
          args: field.arguments && this._makeInputValues(field.arguments),
          deprecationReason: getDeprecationReason(field),
          astNode: field
        };
      };

      ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {
        switch (def.kind) {
          case Kind.OBJECT_TYPE_DEFINITION:
            return this._makeTypeDef(def);
          case Kind.INTERFACE_TYPE_DEFINITION:
            return this._makeInterfaceDef(def);
          case Kind.ENUM_TYPE_DEFINITION:
            return this._makeEnumDef(def);
          case Kind.UNION_TYPE_DEFINITION:
            return this._makeUnionDef(def);
          case Kind.SCALAR_TYPE_DEFINITION:
            return this._makeScalarDef(def);
          case Kind.INPUT_OBJECT_TYPE_DEFINITION:
            return this._makeInputObjectDef(def);
          default:
            throw new Error('Type kind "' + def.kind + '" not supported.');
        }
      };

      ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {
        var _this2 = this;

        var typeName = def.name.value;
        var interfaces = def.interfaces;
        return new GraphQLObjectType({
          name: typeName,
          description: getDescription(def, this._options),
          fields: function fields() {
            return _this2._makeFieldDefMap(def);
          },
          // Note: While this could make early assertions to get the correctly
          // typed values, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          interfaces: interfaces ? function () {
            return _this2.buildTypes(interfaces);
          } : [],
          astNode: def
        });
      };

      ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {
        var _this3 = this;

        return def.fields ? keyValMap(def.fields, function (field) {
          return field.name.value;
        }, function (field) {
          return _this3.buildField(field);
        }) : {};
      };

      ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {
        var _this4 = this;

        return keyValMap(values, function (value) {
          return value.name.value;
        }, function (value) {
          // Note: While this could make assertions to get the correctly typed
          // value, that would throw immediately while type system validation
          var type = _this4._buildWrappedType(value.type);
          return {
            type: type,
            description: getDescription(value, _this4._options),
            defaultValue: valueFromAST(value.defaultValue, type),
            astNode: value
          };
        });
      };

      ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {
        var _this5 = this;

        return new GraphQLInterfaceType({
          name: def.name.value,
          description: getDescription(def, this._options),
          fields: function fields() {
            return _this5._makeFieldDefMap(def);
          },
          astNode: def
        });
      };

      ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {
        var _this6 = this;

        return new GraphQLEnumType({
          name: def.name.value,
          description: getDescription(def, this._options),
          values: def.values ? keyValMap(def.values, function (enumValue) {
            return enumValue.name.value;
          }, function (enumValue) {
            return {
              description: getDescription(enumValue, _this6._options),
              deprecationReason: getDeprecationReason(enumValue),
              astNode: enumValue
            };
          }) : {},
          astNode: def
        });
      };

      ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {
        return new GraphQLUnionType({
          name: def.name.value,
          description: getDescription(def, this._options),
          // Note: While this could make assertions to get the correctly typed
          // values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          types: def.types ? this.buildTypes(def.types) : [],
          astNode: def
        });
      };

      ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {
        return new GraphQLScalarType({
          name: def.name.value,
          description: getDescription(def, this._options),
          astNode: def,
          serialize: function serialize(value) {
            return value;
          }
        });
      };

      ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {
        var _this7 = this;

        return new GraphQLInputObjectType({
          name: def.name.value,
          description: getDescription(def, this._options),
          fields: function fields() {
            return def.fields ? _this7._makeInputValues(def.fields) : {};
          },
          astNode: def
        });
      };

      return ASTDefinitionBuilder;
    }();

    /**
     * Given a field or enum value node, returns the string value for the
     * deprecation reason.
     */
    function getDeprecationReason(node) {
      var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);
      return deprecated && deprecated.reason;
    }

    /**
     * Given an ast node, returns its string description.
     *
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */
    function getDescription(node, options) {
      if (node.description) {
        return node.description.value;
      }
      if (options && options.commentDescriptions) {
        var rawValue = getLeadingCommentBlock(node);
        if (rawValue !== undefined) {
          return blockStringValue('\n' + rawValue);
        }
      }
    }

    function getLeadingCommentBlock(node) {
      var loc = node.loc;
      if (!loc) {
        return;
      }
      var comments = [];
      var token = loc.startToken.prev;
      while (token && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
      }
      return comments.reverse().join('\n');
    }

    /**
     * A helper function to build a GraphQLSchema directly from a source
     * document.
     */
    function buildSchema(source, options) {
      return buildASTSchema(parse(source, options), options);
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Produces a new schema given an existing schema and a document which may
     * contain GraphQL type extensions and definitions. The original schema will
     * remain unaltered.
     *
     * Because a schema represents a graph of references, a schema cannot be
     * extended without effectively making an entire copy. We do not know until it's
     * too late if subgraphs remain unchanged.
     *
     * This algorithm copies the provided schema, applying extensions while
     * producing the copy. The original schema remains unaltered.
     *
     * Accepts options as a third argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */
    function extendSchema(schema, documentAST, options) {
      !isSchema(schema) ? invariant(0, 'Must provide valid GraphQLSchema') : void 0;

      !(documentAST && documentAST.kind === Kind.DOCUMENT) ? invariant(0, 'Must provide valid Document AST') : void 0;

      // Collect the type definitions and extensions found in the document.
      var typeDefinitionMap = Object.create(null);
      var typeExtensionsMap = Object.create(null);

      // New directives and types are separate because a directives and types can
      // have the same name. For example, a type named "skip".
      var directiveDefinitions = [];

      for (var i = 0; i < documentAST.definitions.length; i++) {
        var def = documentAST.definitions[i];
        switch (def.kind) {
          case Kind.OBJECT_TYPE_DEFINITION:
          case Kind.INTERFACE_TYPE_DEFINITION:
          case Kind.ENUM_TYPE_DEFINITION:
          case Kind.UNION_TYPE_DEFINITION:
          case Kind.SCALAR_TYPE_DEFINITION:
          case Kind.INPUT_OBJECT_TYPE_DEFINITION:
            // Sanity check that none of the defined types conflict with the
            // schema's existing types.
            var typeName = def.name.value;
            if (schema.getType(typeName)) {
              throw new GraphQLError('Type "' + typeName + '" already exists in the schema. It cannot also ' + 'be defined in this type definition.', [def]);
            }
            typeDefinitionMap[typeName] = def;
            break;
          case Kind.OBJECT_TYPE_EXTENSION:
          case Kind.INTERFACE_TYPE_EXTENSION:
            // Sanity check that this type extension exists within the
            // schema's existing types.
            var extendedTypeName = def.name.value;
            var existingType = schema.getType(extendedTypeName);
            if (!existingType) {
              throw new GraphQLError('Cannot extend type "' + extendedTypeName + '" because it does not ' + 'exist in the existing schema.', [def]);
            }
            checkExtensionNode(existingType, def);

            var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
            typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
            break;
          case Kind.DIRECTIVE_DEFINITION:
            var directiveName = def.name.value;
            var existingDirective = schema.getDirective(directiveName);
            if (existingDirective) {
              throw new GraphQLError('Directive "' + directiveName + '" already exists in the schema. It ' + 'cannot be redefined.', [def]);
            }
            directiveDefinitions.push(def);
            break;
          case Kind.SCALAR_TYPE_EXTENSION:
          case Kind.UNION_TYPE_EXTENSION:
          case Kind.ENUM_TYPE_EXTENSION:
          case Kind.INPUT_OBJECT_TYPE_EXTENSION:
            throw new Error('The ' + def.kind + ' kind is not yet supported by extendSchema().');
        }
      }

      // If this document contains no new types, extensions, or directives then
      // return the same unmodified GraphQLSchema instance.
      if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {
        return schema;
      }

      var astBuilder = new ASTDefinitionBuilder(typeDefinitionMap, options, function (typeRef) {
        var typeName = typeRef.name.value;
        var existingType = schema.getType(typeName);
        if (existingType) {
          return getExtendedType(existingType);
        }

        throw new GraphQLError('Unknown type: "' + typeName + '". Ensure that this type exists ' + 'either in the original schema, or is added in a type definition.', [typeRef]);
      });

      var extendTypeCache = Object.create(null);

      // Get the root Query, Mutation, and Subscription object types.
      var existingQueryType = schema.getQueryType();
      var queryType = existingQueryType ? getExtendedType(existingQueryType) : null;

      var existingMutationType = schema.getMutationType();
      var mutationType = existingMutationType ? getExtendedType(existingMutationType) : null;

      var existingSubscriptionType = schema.getSubscriptionType();
      var subscriptionType = existingSubscriptionType ? getExtendedType(existingSubscriptionType) : null;

      var types = [].concat(objectValues(schema.getTypeMap()).map(function (type) {
        return getExtendedType(type);
      }), astBuilder.buildTypes(objectValues(typeDefinitionMap)));

      // Support both original legacy names and extended legacy names.
      var schemaAllowedLegacyNames = schema.__allowedLegacyNames;
      var extendAllowedLegacyNames = options && options.allowedLegacyNames;
      var allowedLegacyNames = schemaAllowedLegacyNames && extendAllowedLegacyNames ? schemaAllowedLegacyNames.concat(extendAllowedLegacyNames) : schemaAllowedLegacyNames || extendAllowedLegacyNames;

      // Then produce and return a Schema with these types.
      return new GraphQLSchema({
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: types,
        directives: getMergedDirectives(),
        astNode: schema.astNode,
        allowedLegacyNames: allowedLegacyNames
      });

      // Below are functions used for producing this schema that have closed over
      // this scope and have access to the schema, cache, and newly defined types.

      function getMergedDirectives() {
        var existingDirectives = schema.getDirectives();
        !existingDirectives ? invariant(0, 'schema must have default directives') : void 0;

        return existingDirectives.concat(directiveDefinitions.map(function (node) {
          return astBuilder.buildDirective(node);
        }));
      }

      function getExtendedType(type) {
        if (!extendTypeCache[type.name]) {
          extendTypeCache[type.name] = extendType(type);
        }
        return extendTypeCache[type.name];
      }

      // To be called at most once per type. Only getExtendedType should call this.
      function extendType(type) {
        if (isIntrospectionType(type)) {
          // Introspection types are not extended.
          return type;
        }
        if (isObjectType(type)) {
          return extendObjectType(type);
        }
        if (isInterfaceType(type)) {
          return extendInterfaceType(type);
        }
        if (isUnionType(type)) {
          return extendUnionType(type);
        }
        // This type is not yet extendable.
        return type;
      }

      function extendObjectType(type) {
        var name = type.name;
        var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
        return new GraphQLObjectType({
          name: name,
          description: type.description,
          interfaces: function interfaces() {
            return extendImplementedInterfaces(type);
          },
          fields: function fields() {
            return extendFieldMap(type);
          },
          astNode: type.astNode,
          extensionASTNodes: extensionASTNodes,
          isTypeOf: type.isTypeOf
        });
      }

      function extendInterfaceType(type) {
        var name = type.name;
        var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
        return new GraphQLInterfaceType({
          name: type.name,
          description: type.description,
          fields: function fields() {
            return extendFieldMap(type);
          },
          astNode: type.astNode,
          extensionASTNodes: extensionASTNodes,
          resolveType: type.resolveType
        });
      }

      function extendUnionType(type) {
        return new GraphQLUnionType({
          name: type.name,
          description: type.description,
          types: type.getTypes().map(getExtendedType),
          astNode: type.astNode,
          resolveType: type.resolveType
        });
      }

      function extendImplementedInterfaces(type) {
        var interfaces = type.getInterfaces().map(getExtendedType);

        // If there are any extensions to the interfaces, apply those here.
        var extensions = typeExtensionsMap[type.name];
        if (extensions) {
          extensions.forEach(function (extension) {
            extension.interfaces.forEach(function (namedType) {
              // Note: While this could make early assertions to get the correctly
              // typed values, that would throw immediately while type system
              // validation with validateSchema() will produce more actionable results.
              interfaces.push(astBuilder.buildType(namedType));
            });
          });
        }

        return interfaces;
      }

      function extendFieldMap(type) {
        var newFieldMap = Object.create(null);
        var oldFieldMap = type.getFields();
        Object.keys(oldFieldMap).forEach(function (fieldName) {
          var field = oldFieldMap[fieldName];
          newFieldMap[fieldName] = {
            description: field.description,
            deprecationReason: field.deprecationReason,
            type: extendFieldType(field.type),
            args: keyMap(field.args, function (arg) {
              return arg.name;
            }),
            astNode: field.astNode,
            resolve: field.resolve
          };
        });

        // If there are any extensions to the fields, apply those here.
        var extensions = typeExtensionsMap[type.name];
        if (extensions) {
          extensions.forEach(function (extension) {
            extension.fields.forEach(function (field) {
              var fieldName = field.name.value;
              if (oldFieldMap[fieldName]) {
                throw new GraphQLError('Field "' + type.name + '.' + fieldName + '" already exists in the ' + 'schema. It cannot also be defined in this type extension.', [field]);
              }
              newFieldMap[fieldName] = astBuilder.buildField(field);
            });
          });
        }

        return newFieldMap;
      }

      function extendFieldType(typeDef) {
        if (isListType(typeDef)) {
          return GraphQLList(extendFieldType(typeDef.ofType));
        }
        if (isNonNullType(typeDef)) {
          return GraphQLNonNull(extendFieldType(typeDef.ofType));
        }
        return getExtendedType(typeDef);
      }
    }

    function checkExtensionNode(type, node) {
      switch (node.kind) {
        case Kind.OBJECT_TYPE_EXTENSION:
          if (!isObjectType(type)) {
            throw new GraphQLError('Cannot extend non-object type "' + type.name + '".', [node]);
          }
          break;
        case Kind.INTERFACE_TYPE_EXTENSION:
          if (!isInterfaceType(type)) {
            throw new GraphQLError('Cannot extend non-interface type "' + type.name + '".', [node]);
          }
          break;
      }
    }

    var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    /**
     * Sort GraphQLSchema.
     */
    function lexicographicSortSchema(schema) {
      var cache = Object.create(null);

      var sortMaybeType = function sortMaybeType(maybeType) {
        return maybeType && sortNamedType(maybeType);
      };
      return new GraphQLSchema({
        types: sortTypes(objectValues(schema.getTypeMap())),
        directives: sortByName(schema.getDirectives()).map(sortDirective),
        query: sortMaybeType(schema.getQueryType()),
        mutation: sortMaybeType(schema.getMutationType()),
        subscription: sortMaybeType(schema.getSubscriptionType()),
        astNode: schema.astNode
      });

      function sortDirective(directive) {
        return new GraphQLDirective({
          name: directive.name,
          description: directive.description,
          locations: sortBy(directive.locations, function (x) {
            return x;
          }),
          args: sortArgs(directive.args),
          astNode: directive.astNode
        });
      }

      function sortArgs(args) {
        return keyValMap(sortByName(args), function (arg) {
          return arg.name;
        }, function (arg) {
          return _extends$2({}, arg, {
            type: sortType(arg.type)
          });
        });
      }

      function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function (field) {
          return {
            type: sortType(field.type),
            args: sortArgs(field.args),
            resolve: field.resolve,
            subscribe: field.subscribe,
            deprecationReason: field.deprecationReason,
            description: field.description,
            astNode: field.astNode
          };
        });
      }

      function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function (field) {
          return {
            type: sortType(field.type),
            defaultValue: field.defaultValue,
            description: field.description,
            astNode: field.astNode
          };
        });
      }

      function sortType(type) {
        if (isListType(type)) {
          return new GraphQLList(sortType(type.ofType));
        } else if (isNonNullType(type)) {
          return new GraphQLNonNull(sortType(type.ofType));
        }
        return sortNamedType(type);
      }

      function sortTypes(arr) {
        return sortByName(arr).map(sortNamedType);
      }

      function sortNamedType(type) {
        if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {
          return type;
        }

        var sortedType = cache[type.name];
        if (!sortedType) {
          sortedType = sortNamedTypeImpl(type);
          cache[type.name] = sortedType;
        }
        return sortedType;
      }

      function sortNamedTypeImpl(type) {
        if (isScalarType(type)) {
          return type;
        } else if (isObjectType(type)) {
          return new GraphQLObjectType({
            name: type.name,
            interfaces: function interfaces() {
              return sortTypes(type.getInterfaces());
            },
            fields: function fields() {
              return sortFields(type.getFields());
            },
            isTypeOf: type.isTypeOf,
            description: type.description,
            astNode: type.astNode,
            extensionASTNodes: type.extensionASTNodes
          });
        } else if (isInterfaceType(type)) {
          return new GraphQLInterfaceType({
            name: type.name,
            fields: function fields() {
              return sortFields(type.getFields());
            },
            resolveType: type.resolveType,
            description: type.description,
            astNode: type.astNode,
            extensionASTNodes: type.extensionASTNodes
          });
        } else if (isUnionType(type)) {
          return new GraphQLUnionType({
            name: type.name,
            types: function types() {
              return sortTypes(type.getTypes());
            },
            resolveType: type.resolveType,
            description: type.description,
            astNode: type.astNode
          });
        } else if (isEnumType(type)) {
          return new GraphQLEnumType({
            name: type.name,
            values: keyValMap(sortByName(type.getValues()), function (val) {
              return val.name;
            }, function (val) {
              return {
                value: val.value,
                deprecationReason: val.deprecationReason,
                description: val.description,
                astNode: val.astNode
              };
            }),
            description: type.description,
            astNode: type.astNode
          });
        } else if (isInputObjectType(type)) {
          return new GraphQLInputObjectType({
            name: type.name,
            fields: function fields() {
              return sortInputFields(type.getFields());
            },
            description: type.description,
            astNode: type.astNode
          });
        }
        throw new Error('Unknown type: "' + type + '"');
      }
    }

    function sortObjMap(map, sortValueFn) {
      var sortedMap = Object.create(null);
      var sortedKeys = sortBy(Object.keys(map), function (x) {
        return x;
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          var value = map[key];
          sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return sortedMap;
    }

    function sortByName(array) {
      return sortBy(array, function (obj) {
        return obj.name;
      });
    }

    function sortBy(array, mapToKey) {
      return array.slice().sort(function (obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return key1.localeCompare(key2);
      });
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Accepts options as a second argument:
     *
     *    - commentDescriptions:
     *        Provide true to use preceding comments as the description.
     *
     */
    function printSchema(schema, options) {
      return printFilteredSchema(schema, function (n) {
        return !isSpecifiedDirective(n);
      }, isDefinedType, options);
    }

    function printIntrospectionSchema(schema, options) {
      return printFilteredSchema(schema, isSpecifiedDirective, isIntrospectionType, options);
    }

    function isDefinedType(type) {
      return !isSpecifiedScalarType(type) && !isIntrospectionType(type);
    }

    function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
      var directives = schema.getDirectives().filter(directiveFilter);
      var typeMap = schema.getTypeMap();
      var types = objectValues(typeMap).sort(function (type1, type2) {
        return type1.name.localeCompare(type2.name);
      }).filter(typeFilter);

      return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {
        return printDirective(directive, options);
      }), types.map(function (type) {
        return printType(type, options);
      })).filter(Boolean).join('\n\n') + '\n';
    }

    function printSchemaDefinition(schema) {
      if (isSchemaOfCommonNames(schema)) {
        return;
      }

      var operationTypes = [];

      var queryType = schema.getQueryType();
      if (queryType) {
        operationTypes.push('  query: ' + queryType.name);
      }

      var mutationType = schema.getMutationType();
      if (mutationType) {
        operationTypes.push('  mutation: ' + mutationType.name);
      }

      var subscriptionType = schema.getSubscriptionType();
      if (subscriptionType) {
        operationTypes.push('  subscription: ' + subscriptionType.name);
      }

      return 'schema {\n' + operationTypes.join('\n') + '\n}';
    }

    /**
     * GraphQL schema define root types for each type of operation. These types are
     * the same as any other type and can be named in any manner, however there is
     * a common naming convention:
     *
     *   schema {
     *     query: Query
     *     mutation: Mutation
     *   }
     *
     * When using this naming convention, the schema description can be omitted.
     */
    function isSchemaOfCommonNames(schema) {
      var queryType = schema.getQueryType();
      if (queryType && queryType.name !== 'Query') {
        return false;
      }

      var mutationType = schema.getMutationType();
      if (mutationType && mutationType.name !== 'Mutation') {
        return false;
      }

      var subscriptionType = schema.getSubscriptionType();
      if (subscriptionType && subscriptionType.name !== 'Subscription') {
        return false;
      }

      return true;
    }

    function printType(type, options) {
      if (isScalarType(type)) {
        return printScalar(type, options);
      } else if (isObjectType(type)) {
        return printObject(type, options);
      } else if (isInterfaceType(type)) {
        return printInterface(type, options);
      } else if (isUnionType(type)) {
        return printUnion(type, options);
      } else if (isEnumType(type)) {
        return printEnum(type, options);
      } else if (isInputObjectType(type)) {
        return printInputObject(type, options);
      }
      /* istanbul ignore next */
      throw new Error('Unknown type: ' + type + '.');
    }

    function printScalar(type, options) {
      return printDescription(options, type) + ('scalar ' + type.name);
    }

    function printObject(type, options) {
      var interfaces = type.getInterfaces();
      var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {
        return i.name;
      }).join(' & ') : '';
      return printDescription(options, type) + ('type ' + type.name + implementedInterfaces + ' {\n') + printFields(options, type) + '\n' + '}';
    }

    function printInterface(type, options) {
      return printDescription(options, type) + ('interface ' + type.name + ' {\n') + printFields(options, type) + '\n' + '}';
    }

    function printUnion(type, options) {
      return printDescription(options, type) + ('union ' + type.name + ' = ' + type.getTypes().join(' | '));
    }

    function printEnum(type, options) {
      return printDescription(options, type) + ('enum ' + type.name + ' {\n') + printEnumValues(type.getValues(), options) + '\n' + '}';
    }

    function printEnumValues(values, options) {
      return values.map(function (value, i) {
        return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);
      }).join('\n');
    }

    function printInputObject(type, options) {
      var fields = objectValues(type.getFields());
      return printDescription(options, type) + ('input ' + type.name + ' {\n') + fields.map(function (f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
      }).join('\n') + '\n' + '}';
    }

    function printFields(options, type) {
      var fields = objectValues(type.getFields());
      return fields.map(function (f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
      }).join('\n');
    }

    function printArgs(options, args) {
      var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      if (args.length === 0) {
        return '';
      }

      // If every arg does not have a description, print them on one line.
      if (args.every(function (arg) {
        return !arg.description;
      })) {
        return '(' + args.map(printInputValue).join(', ') + ')';
      }

      return '(\n' + args.map(function (arg, i) {
        return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
      }).join('\n') + '\n' + indentation + ')';
    }

    function printInputValue(arg) {
      var argDecl = arg.name + ': ' + String(arg.type);
      if (!isInvalid(arg.defaultValue)) {
        argDecl += ' = ' + print(astFromValue(arg.defaultValue, arg.type));
      }
      return argDecl;
    }

    function printDirective(directive, options) {
      return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + ' on ' + directive.locations.join(' | ');
    }

    function printDeprecated(fieldOrEnumVal) {
      if (!fieldOrEnumVal.isDeprecated) {
        return '';
      }
      var reason = fieldOrEnumVal.deprecationReason;
      if (isNullish(reason) || reason === '' || reason === DEFAULT_DEPRECATION_REASON) {
        return ' @deprecated';
      }
      return ' @deprecated(reason: ' + print(astFromValue(reason, GraphQLString)) + ')';
    }

    function printDescription(options, def) {
      var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      if (!def.description) {
        return '';
      }

      var lines = descriptionLines(def.description, 120 - indentation.length);
      if (options && options.commentDescriptions) {
        return printDescriptionWithComments(lines, indentation, firstInBlock);
      }

      var description = indentation && !firstInBlock ? '\n' + indentation + '"""' : indentation + '"""';

      // In some circumstances, a single line can be used for the description.
      if (lines.length === 1 && lines[0].length < 70 && lines[0][lines[0].length - 1] !== '"') {
        return description + escapeQuote(lines[0]) + '"""\n';
      }

      // Format a multi-line block quote to account for leading space.
      var hasLeadingSpace = lines[0][0] === ' ' || lines[0][0] === '\t';
      if (!hasLeadingSpace) {
        description += '\n';
      }
      for (var i = 0; i < lines.length; i++) {
        if (i !== 0 || !hasLeadingSpace) {
          description += indentation;
        }
        description += escapeQuote(lines[i]) + '\n';
      }
      description += indentation + '"""\n';
      return description;
    }

    function escapeQuote(line) {
      return line.replace(/"""/g, '\\"""');
    }

    function printDescriptionWithComments(lines, indentation, firstInBlock) {
      var description = indentation && !firstInBlock ? '\n' : '';
      for (var i = 0; i < lines.length; i++) {
        if (lines[i] === '') {
          description += indentation + '#\n';
        } else {
          description += indentation + '# ' + lines[i] + '\n';
        }
      }
      return description;
    }

    function descriptionLines(description, maxLen) {
      var lines = [];
      var rawLines = description.split('\n');
      for (var i = 0; i < rawLines.length; i++) {
        if (rawLines[i] === '') {
          lines.push(rawLines[i]);
        } else {
          // For > 120 character long lines, cut at space boundaries into sublines
          // of ~80 chars.
          var sublines = breakLine(rawLines[i], maxLen);
          for (var j = 0; j < sublines.length; j++) {
            lines.push(sublines[j]);
          }
        }
      }
      return lines;
    }

    function breakLine(line, maxLen) {
      if (line.length < maxLen + 5) {
        return [line];
      }
      var parts = line.split(new RegExp('((?: |^).{15,' + (maxLen - 40) + '}(?= |$))'));
      if (parts.length < 4) {
        return [line];
      }
      var sublines = [parts[0] + parts[1] + parts[2]];
      for (var i = 3; i < parts.length; i += 2) {
        sublines.push(parts[i].slice(1) + parts[i + 1]);
      }
      return sublines;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * Deprecated. Use coerceValue() directly for richer information.
     */
    function isValidJSValue(value, type) {
      var errors = coerceValue(value, type).errors;
      return errors ? errors.map(function (error) {
        return error.message;
      }) : [];
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * Utility which determines if a value literal node is valid for an input type.
     *
     * Deprecated. Rely on validation for documents containing literal values.
     */
    function isValidLiteralValue(type, valueNode) {
      var emptySchema = new GraphQLSchema({});
      var emptyDoc = { kind: Kind.DOCUMENT, definitions: [] };
      var typeInfo = new TypeInfo(emptySchema, undefined, type);
      var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);
      var visitor = ValuesOfCorrectType(context);
      visit(valueNode, visitWithTypeInfo(typeInfo, visitor));
      return context.getErrors();
    }

    /**
     * Provided a collection of ASTs, presumably each from different files,
     * concatenate the ASTs together into batched AST, useful for validating many
     * GraphQL source files which together represent one conceptual application.
     */
    function concatAST(asts) {
      var batchDefinitions = [];
      for (var i = 0; i < asts.length; i++) {
        var definitions = asts[i].definitions;
        for (var j = 0; j < definitions.length; j++) {
          batchDefinitions.push(definitions[j]);
        }
      }
      return {
        kind: 'Document',
        definitions: batchDefinitions
      };
    } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *  strict
       */

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */


    /**
     * separateOperations accepts a single AST document which may contain many
     * operations and fragments and returns a collection of AST documents each of
     * which contains a single operation as well the fragment definitions it
     * refers to.
     */
    function separateOperations(documentAST) {
      var operations = [];
      var fragments = Object.create(null);
      var positions = new Map();
      var depGraph = Object.create(null);
      var fromName = void 0;
      var idx = 0;

      // Populate metadata and build a dependency graph.
      visit(documentAST, {
        OperationDefinition: function OperationDefinition(node) {
          fromName = opName(node);
          operations.push(node);
          positions.set(node, idx++);
        },
        FragmentDefinition: function FragmentDefinition(node) {
          fromName = node.name.value;
          fragments[fromName] = node;
          positions.set(node, idx++);
        },
        FragmentSpread: function FragmentSpread(node) {
          var toName = node.name.value;
          (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;
        }
      });

      // For each operation, produce a new synthesized AST which includes only what
      // is necessary for completing that operation.
      var separatedDocumentASTs = Object.create(null);
      operations.forEach(function (operation) {
        var operationName = opName(operation);
        var dependencies = Object.create(null);
        collectTransitiveDependencies(dependencies, depGraph, operationName);

        // The list of definition nodes to be included for this operation, sorted
        // to retain the same order as the original document.
        var definitions = [operation];
        Object.keys(dependencies).forEach(function (name) {
          definitions.push(fragments[name]);
        });
        definitions.sort(function (n1, n2) {
          return (positions.get(n1) || 0) - (positions.get(n2) || 0);
        });

        separatedDocumentASTs[operationName] = {
          kind: 'Document',
          definitions: definitions
        };
      });

      return separatedDocumentASTs;
    }

    // Provides the empty string for anonymous operations.
    function opName(operation) {
      return operation.name ? operation.name.value : '';
    }

    // From a dependency graph, collects a list of transitive dependencies by
    // recursing through a dependency graph.
    function collectTransitiveDependencies(collected, depGraph, fromName) {
      var immediateDeps = depGraph[fromName];
      if (immediateDeps) {
        Object.keys(immediateDeps).forEach(function (toName) {
          if (!collected[toName]) {
            collected[toName] = true;
            collectTransitiveDependencies(collected, depGraph, toName);
          }
        });
      }
    }

    /**
     * Copyright (c) 2016-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    var BreakingChangeType = {
      FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
      FIELD_REMOVED: 'FIELD_REMOVED',
      TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
      TYPE_REMOVED: 'TYPE_REMOVED',
      TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
      VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
      ARG_REMOVED: 'ARG_REMOVED',
      ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
      NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',
      NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',
      INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',
      DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
      DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
      DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',
      NON_NULL_DIRECTIVE_ARG_ADDED: 'NON_NULL_DIRECTIVE_ARG_ADDED'
    };

    var DangerousChangeType = {
      ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',
      VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
      INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',
      TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
      NULLABLE_INPUT_FIELD_ADDED: 'NULLABLE_INPUT_FIELD_ADDED',
      NULLABLE_ARG_ADDED: 'NULLABLE_ARG_ADDED'
    };

    /**
     * Given two schemas, returns an Array containing descriptions of all the types
     * of breaking changes covered by the other functions down below.
     */
    function findBreakingChanges(oldSchema, newSchema) {
      return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));
    }

    /**
     * Given two schemas, returns an Array containing descriptions of all the types
     * of potentially dangerous changes covered by the other functions down below.
     */
    function findDangerousChanges(oldSchema, newSchema) {
      return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any breaking
     * changes in the newSchema related to removing an entire type.
     */
    function findRemovedTypes(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var breakingChanges = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        if (!newTypeMap[typeName]) {
          breakingChanges.push({
            type: BreakingChangeType.TYPE_REMOVED,
            description: typeName + ' was removed.'
          });
        }
      });
      return breakingChanges;
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any breaking
     * changes in the newSchema related to changing the type of a type.
     */
    function findTypesThatChangedKind(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var breakingChanges = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        if (!newTypeMap[typeName]) {
          return;
        }
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (oldType.constructor !== newType.constructor) {
          breakingChanges.push({
            type: BreakingChangeType.TYPE_CHANGED_KIND,
            description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')
          });
        }
      });
      return breakingChanges;
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any
     * breaking or dangerous changes in the newSchema related to arguments
     * (such as removal or change of type of an argument, or a change in an
     * argument's default value).
     */
    function findArgChanges(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var breakingChanges = [];
      var dangerousChanges = [];

      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!(isObjectType(oldType) || isInterfaceType(oldType)) || !(isObjectType(newType) || isInterfaceType(newType)) || newType.constructor !== oldType.constructor) {
          return;
        }

        var oldTypeFields = oldType.getFields();
        var newTypeFields = newType.getFields();

        Object.keys(oldTypeFields).forEach(function (fieldName) {
          if (!newTypeFields[fieldName]) {
            return;
          }

          oldTypeFields[fieldName].args.forEach(function (oldArgDef) {
            var newArgs = newTypeFields[fieldName].args;
            var newArgDef = newArgs.find(function (arg) {
              return arg.name === oldArgDef.name;
            });

            // Arg not present
            if (!newArgDef) {
              breakingChanges.push({
                type: BreakingChangeType.ARG_REMOVED,
                description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')
              });
            } else {
              var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);
              if (!isSafe) {
                breakingChanges.push({
                  type: BreakingChangeType.ARG_CHANGED_KIND,
                  description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())
                });
              } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {
                dangerousChanges.push({
                  type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                  description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')
                });
              }
            }
          });
          // Check if a non-null arg was added to the field
          newTypeFields[fieldName].args.forEach(function (newArgDef) {
            var oldArgs = oldTypeFields[fieldName].args;
            var oldArgDef = oldArgs.find(function (arg) {
              return arg.name === newArgDef.name;
            });
            if (!oldArgDef) {
              if (isNonNullType(newArgDef.type)) {
                breakingChanges.push({
                  type: BreakingChangeType.NON_NULL_ARG_ADDED,
                  description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')
                });
              } else {
                dangerousChanges.push({
                  type: DangerousChangeType.NULLABLE_ARG_ADDED,
                  description: 'A nullable arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')
                });
              }
            }
          });
        });
      });

      return {
        breakingChanges: breakingChanges,
        dangerousChanges: dangerousChanges
      };
    }

    function typeKindName(type) {
      if (isScalarType(type)) {
        return 'a Scalar type';
      }
      if (isObjectType(type)) {
        return 'an Object type';
      }
      if (isInterfaceType(type)) {
        return 'an Interface type';
      }
      if (isUnionType(type)) {
        return 'a Union type';
      }
      if (isEnumType(type)) {
        return 'an Enum type';
      }
      if (isInputObjectType(type)) {
        return 'an Input type';
      }
      throw new TypeError('Unknown type ' + type.constructor.name);
    }

    function findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var breakingChanges = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!(isObjectType(oldType) || isInterfaceType(oldType)) || !(isObjectType(newType) || isInterfaceType(newType)) || newType.constructor !== oldType.constructor) {
          return;
        }

        var oldTypeFieldsDef = oldType.getFields();
        var newTypeFieldsDef = newType.getFields();
        Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {
          // Check if the field is missing on the type in the new schema.
          if (!(fieldName in newTypeFieldsDef)) {
            breakingChanges.push({
              type: BreakingChangeType.FIELD_REMOVED,
              description: typeName + '.' + fieldName + ' was removed.'
            });
          } else {
            var oldFieldType = oldTypeFieldsDef[fieldName].type;
            var newFieldType = newTypeFieldsDef[fieldName].type;
            var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);
            if (!isSafe) {
              var oldFieldTypeString = isNamedType(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
              var newFieldTypeString = isNamedType(newFieldType) ? newFieldType.name : newFieldType.toString();
              breakingChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')
              });
            }
          }
        });
      });
      return breakingChanges;
    }

    function findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var breakingChanges = [];
      var dangerousChanges = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isInputObjectType(oldType) || !isInputObjectType(newType)) {
          return;
        }

        var oldTypeFieldsDef = oldType.getFields();
        var newTypeFieldsDef = newType.getFields();
        Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {
          // Check if the field is missing on the type in the new schema.
          if (!(fieldName in newTypeFieldsDef)) {
            breakingChanges.push({
              type: BreakingChangeType.FIELD_REMOVED,
              description: typeName + '.' + fieldName + ' was removed.'
            });
          } else {
            var oldFieldType = oldTypeFieldsDef[fieldName].type;
            var newFieldType = newTypeFieldsDef[fieldName].type;

            var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);
            if (!isSafe) {
              var oldFieldTypeString = isNamedType(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
              var newFieldTypeString = isNamedType(newFieldType) ? newFieldType.name : newFieldType.toString();
              breakingChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')
              });
            }
          }
        });
        // Check if a field was added to the input object type
        Object.keys(newTypeFieldsDef).forEach(function (fieldName) {
          if (!(fieldName in oldTypeFieldsDef)) {
            if (isNonNullType(newTypeFieldsDef[fieldName].type)) {
              breakingChanges.push({
                type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,
                description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')
              });
            } else {
              dangerousChanges.push({
                type: DangerousChangeType.NULLABLE_INPUT_FIELD_ADDED,
                description: 'A nullable field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')
              });
            }
          }
        });
      });
      return {
        breakingChanges: breakingChanges,
        dangerousChanges: dangerousChanges
      };
    }

    function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
      if (isNamedType(oldType)) {
        return (
          // if they're both named types, see if their names are equivalent
          isNamedType(newType) && oldType.name === newType.name ||
          // moving from nullable to non-null of the same underlying type is safe
          isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
        );
      } else if (isListType(oldType)) {
        return (
          // if they're both lists, make sure the underlying types are compatible
          isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||
          // moving from nullable to non-null of the same underlying type is safe
          isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
        );
      } else if (isNonNullType(oldType)) {
        // if they're both non-null, make sure the underlying types are compatible
        return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
      }
      return false;
    }

    function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
      if (isNamedType(oldType)) {
        // if they're both named types, see if their names are equivalent
        return isNamedType(newType) && oldType.name === newType.name;
      } else if (isListType(oldType)) {
        // if they're both lists, make sure the underlying types are compatible
        return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
      } else if (isNonNullType(oldType)) {
        return (
          // if they're both non-null, make sure the underlying types are
          // compatible
          isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||
          // moving from non-null to nullable of the same underlying type is safe
          !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
        );
      }
      return false;
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any breaking
     * changes in the newSchema related to removing types from a union type.
     */
    function findTypesRemovedFromUnions(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var typesRemovedFromUnion = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isUnionType(oldType) || !isUnionType(newType)) {
          return;
        }
        var typeNamesInNewUnion = Object.create(null);
        newType.getTypes().forEach(function (type) {
          typeNamesInNewUnion[type.name] = true;
        });
        oldType.getTypes().forEach(function (type) {
          if (!typeNamesInNewUnion[type.name]) {
            typesRemovedFromUnion.push({
              type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
              description: type.name + ' was removed from union type ' + typeName + '.'
            });
          }
        });
      });
      return typesRemovedFromUnion;
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any dangerous
     * changes in the newSchema related to adding types to a union type.
     */
    function findTypesAddedToUnions(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var typesAddedToUnion = [];
      Object.keys(newTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isUnionType(oldType) || !isUnionType(newType)) {
          return;
        }
        var typeNamesInOldUnion = Object.create(null);
        oldType.getTypes().forEach(function (type) {
          typeNamesInOldUnion[type.name] = true;
        });
        newType.getTypes().forEach(function (type) {
          if (!typeNamesInOldUnion[type.name]) {
            typesAddedToUnion.push({
              type: DangerousChangeType.TYPE_ADDED_TO_UNION,
              description: type.name + ' was added to union type ' + typeName + '.'
            });
          }
        });
      });
      return typesAddedToUnion;
    }
    /**
     * Given two schemas, returns an Array containing descriptions of any breaking
     * changes in the newSchema related to removing values from an enum type.
     */
    function findValuesRemovedFromEnums(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var valuesRemovedFromEnums = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isEnumType(oldType) || !isEnumType(newType)) {
          return;
        }
        var valuesInNewEnum = Object.create(null);
        newType.getValues().forEach(function (value) {
          valuesInNewEnum[value.name] = true;
        });
        oldType.getValues().forEach(function (value) {
          if (!valuesInNewEnum[value.name]) {
            valuesRemovedFromEnums.push({
              type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
              description: value.name + ' was removed from enum type ' + typeName + '.'
            });
          }
        });
      });
      return valuesRemovedFromEnums;
    }

    /**
     * Given two schemas, returns an Array containing descriptions of any dangerous
     * changes in the newSchema related to adding values to an enum type.
     */
    function findValuesAddedToEnums(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();

      var valuesAddedToEnums = [];
      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isEnumType(oldType) || !isEnumType(newType)) {
          return;
        }

        var valuesInOldEnum = Object.create(null);
        oldType.getValues().forEach(function (value) {
          valuesInOldEnum[value.name] = true;
        });
        newType.getValues().forEach(function (value) {
          if (!valuesInOldEnum[value.name]) {
            valuesAddedToEnums.push({
              type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
              description: value.name + ' was added to enum type ' + typeName + '.'
            });
          }
        });
      });
      return valuesAddedToEnums;
    }

    function findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();
      var breakingChanges = [];

      Object.keys(oldTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isObjectType(oldType) || !isObjectType(newType)) {
          return;
        }

        var oldInterfaces = oldType.getInterfaces();
        var newInterfaces = newType.getInterfaces();
        oldInterfaces.forEach(function (oldInterface) {
          if (!newInterfaces.some(function (int) {
            return int.name === oldInterface.name;
          })) {
            breakingChanges.push({
              type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,
              description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')
            });
          }
        });
      });
      return breakingChanges;
    }

    function findInterfacesAddedToObjectTypes(oldSchema, newSchema) {
      var oldTypeMap = oldSchema.getTypeMap();
      var newTypeMap = newSchema.getTypeMap();
      var interfacesAddedToObjectTypes = [];

      Object.keys(newTypeMap).forEach(function (typeName) {
        var oldType = oldTypeMap[typeName];
        var newType = newTypeMap[typeName];
        if (!isObjectType(oldType) || !isObjectType(newType)) {
          return;
        }

        var oldInterfaces = oldType.getInterfaces();
        var newInterfaces = newType.getInterfaces();
        newInterfaces.forEach(function (newInterface) {
          if (!oldInterfaces.some(function (int) {
            return int.name === newInterface.name;
          })) {
            interfacesAddedToObjectTypes.push({
              type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,
              description: newInterface.name + ' added to interfaces implemented ' + ('by ' + typeName + '.')
            });
          }
        });
      });
      return interfacesAddedToObjectTypes;
    }

    function findRemovedDirectives(oldSchema, newSchema) {
      var removedDirectives = [];

      var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);
      oldSchema.getDirectives().forEach(function (directive) {
        if (!newSchemaDirectiveMap[directive.name]) {
          removedDirectives.push({
            type: BreakingChangeType.DIRECTIVE_REMOVED,
            description: directive.name + ' was removed'
          });
        }
      });

      return removedDirectives;
    }

    function findRemovedArgsForDirective(oldDirective, newDirective) {
      var removedArgs = [];
      var newArgMap = getArgumentMapForDirective(newDirective);

      oldDirective.args.forEach(function (arg) {
        if (!newArgMap[arg.name]) {
          removedArgs.push(arg);
        }
      });

      return removedArgs;
    }

    function findRemovedDirectiveArgs(oldSchema, newSchema) {
      var removedDirectiveArgs = [];
      var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

      newSchema.getDirectives().forEach(function (newDirective) {
        var oldDirective = oldSchemaDirectiveMap[newDirective.name];
        if (!oldDirective) {
          return;
        }

        findRemovedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {
          removedDirectiveArgs.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: arg.name + ' was removed from ' + newDirective.name
          });
        });
      });

      return removedDirectiveArgs;
    }

    function findAddedArgsForDirective(oldDirective, newDirective) {
      var addedArgs = [];
      var oldArgMap = getArgumentMapForDirective(oldDirective);

      newDirective.args.forEach(function (arg) {
        if (!oldArgMap[arg.name]) {
          addedArgs.push(arg);
        }
      });

      return addedArgs;
    }

    function findAddedNonNullDirectiveArgs(oldSchema, newSchema) {
      var addedNonNullableArgs = [];
      var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

      newSchema.getDirectives().forEach(function (newDirective) {
        var oldDirective = oldSchemaDirectiveMap[newDirective.name];
        if (!oldDirective) {
          return;
        }

        findAddedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {
          if (!isNonNullType(arg.type)) {
            return;
          }

          addedNonNullableArgs.push({
            type: BreakingChangeType.NON_NULL_DIRECTIVE_ARG_ADDED,
            description: 'A non-null arg ' + arg.name + ' on directive ' + (newDirective.name + ' was added')
          });
        });
      });

      return addedNonNullableArgs;
    }

    function findRemovedLocationsForDirective(oldDirective, newDirective) {
      var removedLocations = [];
      var newLocationSet = new Set(newDirective.locations);

      oldDirective.locations.forEach(function (oldLocation) {
        if (!newLocationSet.has(oldLocation)) {
          removedLocations.push(oldLocation);
        }
      });

      return removedLocations;
    }

    function findRemovedDirectiveLocations(oldSchema, newSchema) {
      var removedLocations = [];
      var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

      newSchema.getDirectives().forEach(function (newDirective) {
        var oldDirective = oldSchemaDirectiveMap[newDirective.name];
        if (!oldDirective) {
          return;
        }

        findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function (location) {
          removedLocations.push({
            type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
            description: location + ' was removed from ' + newDirective.name
          });
        });
      });

      return removedLocations;
    }

    function getDirectiveMapForSchema(schema) {
      return keyMap(schema.getDirectives(), function (dir) {
        return dir.name;
      });
    }

    function getArgumentMapForDirective(directive) {
      return keyMap(directive.args, function (arg) {
        return arg.name;
      });
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

    /**
     * A validation rule which reports deprecated usages.
     *
     * Returns a list of GraphQLError instances describing each deprecated use.
     */
    function findDeprecatedUsages(schema, ast) {
      var errors = [];
      var typeInfo = new TypeInfo(schema);

      visit(ast, visitWithTypeInfo(typeInfo, {
        Field: function Field(node) {
          var fieldDef = typeInfo.getFieldDef();
          if (fieldDef && fieldDef.isDeprecated) {
            var parentType = typeInfo.getParentType();
            if (parentType) {
              var reason = fieldDef.deprecationReason;
              errors.push(new GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));
            }
          }
        },
        EnumValue: function EnumValue(node) {
          var enumVal = typeInfo.getEnumValue();
          if (enumVal && enumVal.isDeprecated) {
            var type = getNamedType(typeInfo.getInputType());
            if (type) {
              var reason = enumVal.deprecationReason;
              errors.push(new GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));
            }
          }
        }
      }));

      return errors;
    }

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */



    var _graphql = /*#__PURE__*/Object.freeze({
        graphql: graphql,
        graphqlSync: graphqlSync,
        GraphQLSchema: GraphQLSchema,
        GraphQLScalarType: GraphQLScalarType,
        GraphQLObjectType: GraphQLObjectType,
        GraphQLInterfaceType: GraphQLInterfaceType,
        GraphQLUnionType: GraphQLUnionType,
        GraphQLEnumType: GraphQLEnumType,
        GraphQLInputObjectType: GraphQLInputObjectType,
        GraphQLList: GraphQLList,
        GraphQLNonNull: GraphQLNonNull,
        GraphQLDirective: GraphQLDirective,
        TypeKind: TypeKind,
        specifiedScalarTypes: specifiedScalarTypes,
        GraphQLInt: GraphQLInt,
        GraphQLFloat: GraphQLFloat,
        GraphQLString: GraphQLString,
        GraphQLBoolean: GraphQLBoolean,
        GraphQLID: GraphQLID,
        specifiedDirectives: specifiedDirectives,
        GraphQLIncludeDirective: GraphQLIncludeDirective,
        GraphQLSkipDirective: GraphQLSkipDirective,
        GraphQLDeprecatedDirective: GraphQLDeprecatedDirective,
        DEFAULT_DEPRECATION_REASON: DEFAULT_DEPRECATION_REASON,
        SchemaMetaFieldDef: SchemaMetaFieldDef,
        TypeMetaFieldDef: TypeMetaFieldDef,
        TypeNameMetaFieldDef: TypeNameMetaFieldDef,
        introspectionTypes: introspectionTypes,
        __Schema: __Schema,
        __Directive: __Directive,
        __DirectiveLocation: __DirectiveLocation,
        __Type: __Type,
        __Field: __Field,
        __InputValue: __InputValue,
        __EnumValue: __EnumValue,
        __TypeKind: __TypeKind,
        isSchema: isSchema,
        isDirective: isDirective,
        isType: isType,
        isScalarType: isScalarType,
        isObjectType: isObjectType,
        isInterfaceType: isInterfaceType,
        isUnionType: isUnionType,
        isEnumType: isEnumType,
        isInputObjectType: isInputObjectType,
        isListType: isListType,
        isNonNullType: isNonNullType,
        isInputType: isInputType,
        isOutputType: isOutputType,
        isLeafType: isLeafType,
        isCompositeType: isCompositeType,
        isAbstractType: isAbstractType,
        isWrappingType: isWrappingType,
        isNullableType: isNullableType,
        isNamedType: isNamedType,
        isSpecifiedScalarType: isSpecifiedScalarType,
        isIntrospectionType: isIntrospectionType,
        isSpecifiedDirective: isSpecifiedDirective,
        assertType: assertType,
        assertScalarType: assertScalarType,
        assertObjectType: assertObjectType,
        assertInterfaceType: assertInterfaceType,
        assertUnionType: assertUnionType,
        assertEnumType: assertEnumType,
        assertInputObjectType: assertInputObjectType,
        assertListType: assertListType,
        assertNonNullType: assertNonNullType,
        assertInputType: assertInputType,
        assertOutputType: assertOutputType,
        assertLeafType: assertLeafType,
        assertCompositeType: assertCompositeType,
        assertAbstractType: assertAbstractType,
        assertWrappingType: assertWrappingType,
        assertNullableType: assertNullableType,
        assertNamedType: assertNamedType,
        getNullableType: getNullableType,
        getNamedType: getNamedType,
        validateSchema: validateSchema,
        assertValidSchema: assertValidSchema,
        Source: Source,
        getLocation: getLocation,
        parse: parse,
        parseValue: parseValue,
        parseType: parseType,
        print: print,
        visit: visit,
        visitInParallel: visitInParallel,
        visitWithTypeInfo: visitWithTypeInfo,
        getVisitFn: getVisitFn,
        Kind: Kind,
        TokenKind: TokenKind,
        DirectiveLocation: DirectiveLocation,
        BREAK: BREAK,
        execute: execute,
        defaultFieldResolver: defaultFieldResolver,
        responsePathAsArray: responsePathAsArray,
        getDirectiveValues: getDirectiveValues,
        subscribe: subscribe,
        createSourceEventStream: createSourceEventStream,
        validate: validate,
        ValidationContext: ValidationContext,
        specifiedRules: specifiedRules,
        FieldsOnCorrectTypeRule: FieldsOnCorrectType,
        FragmentsOnCompositeTypesRule: FragmentsOnCompositeTypes,
        KnownArgumentNamesRule: KnownArgumentNames,
        KnownDirectivesRule: KnownDirectives,
        KnownFragmentNamesRule: KnownFragmentNames,
        KnownTypeNamesRule: KnownTypeNames,
        LoneAnonymousOperationRule: LoneAnonymousOperation,
        NoFragmentCyclesRule: NoFragmentCycles,
        NoUndefinedVariablesRule: NoUndefinedVariables,
        NoUnusedFragmentsRule: NoUnusedFragments,
        NoUnusedVariablesRule: NoUnusedVariables,
        OverlappingFieldsCanBeMergedRule: OverlappingFieldsCanBeMerged,
        PossibleFragmentSpreadsRule: PossibleFragmentSpreads,
        ProvidedNonNullArgumentsRule: ProvidedNonNullArguments,
        ScalarLeafsRule: ScalarLeafs,
        SingleFieldSubscriptionsRule: SingleFieldSubscriptions,
        UniqueArgumentNamesRule: UniqueArgumentNames,
        UniqueDirectivesPerLocationRule: UniqueDirectivesPerLocation,
        UniqueFragmentNamesRule: UniqueFragmentNames,
        UniqueInputFieldNamesRule: UniqueInputFieldNames,
        UniqueOperationNamesRule: UniqueOperationNames,
        UniqueVariableNamesRule: UniqueVariableNames,
        ValuesOfCorrectTypeRule: ValuesOfCorrectType,
        VariablesAreInputTypesRule: VariablesAreInputTypes,
        VariablesDefaultValueAllowedRule: VariablesDefaultValueAllowed,
        VariablesInAllowedPositionRule: VariablesInAllowedPosition,
        GraphQLError: GraphQLError,
        formatError: formatError,
        printError: printError,
        getIntrospectionQuery: getIntrospectionQuery,
        introspectionQuery: introspectionQuery,
        getOperationAST: getOperationAST,
        introspectionFromSchema: introspectionFromSchema,
        buildClientSchema: buildClientSchema,
        buildASTSchema: buildASTSchema,
        buildSchema: buildSchema,
        getDescription: getDescription,
        extendSchema: extendSchema,
        lexicographicSortSchema: lexicographicSortSchema,
        printSchema: printSchema,
        printIntrospectionSchema: printIntrospectionSchema,
        printType: printType,
        typeFromAST: typeFromAST,
        valueFromAST: valueFromAST,
        valueFromASTUntyped: valueFromASTUntyped,
        astFromValue: astFromValue,
        TypeInfo: TypeInfo,
        coerceValue: coerceValue,
        isValidJSValue: isValidJSValue,
        isValidLiteralValue: isValidLiteralValue,
        concatAST: concatAST,
        separateOperations: separateOperations,
        isEqualType: isEqualType,
        isTypeSubTypeOf: isTypeSubTypeOf,
        doTypesOverlap: doTypesOverlap,
        assertValidName: assertValidName,
        isValidNameError: isValidNameError,
        findBreakingChanges: findBreakingChanges,
        findDangerousChanges: findDangerousChanges,
        BreakingChangeType: BreakingChangeType,
        DangerousChangeType: DangerousChangeType,
        findDeprecatedUsages: findDeprecatedUsages
    });

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var lodash = createCommonjsModule(function (module, exports) {
    (function() {

      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined;

      /** Used as the semantic version number. */
      var VERSION = '4.17.10';

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;

      /** Error message constants. */
      var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function';

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /** Used as the maximum memoize cache size. */
      var MAX_MEMOIZE_SIZE = 500;

      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

      /** Used to compose bitmasks for function metadata. */
      var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;

      /** Used as default options for `_.truncate`. */
      var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...';

      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;

      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3;

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e+308,
          NAN = 0 / 0;

      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

      /** Used to associate wrap methods with their bit flags. */
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG]
      ];

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g;

      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);

      /** Used to match leading and trailing whitespace. */
      var reTrim = /^\s+|\s+$/g,
          reTrimStart = /^\s+/,
          reTrimEnd = /\s+$/;

      /** Used to match wrap detail comments. */
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;

      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;

      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;

      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i;

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;

      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i;

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;

      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;

      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d';

      /** Used to compose unicode regexes. */
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, 'g');

      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, 'g');

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join('|'), 'g');

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
      ];

      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
      typedArrayTags[errorTag] = typedArrayTags[funcTag] =
      typedArrayTags[mapTag] = typedArrayTags[numberTag] =
      typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
      typedArrayTags[setTag] = typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] = false;

      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
      cloneableTags[boolTag] = cloneableTags[dateTag] =
      cloneableTags[float32Tag] = cloneableTags[float64Tag] =
      cloneableTags[int8Tag] = cloneableTags[int16Tag] =
      cloneableTags[int32Tag] = cloneableTags[mapTag] =
      cloneableTags[numberTag] = cloneableTags[objectTag] =
      cloneableTags[regexpTag] = cloneableTags[setTag] =
      cloneableTags[stringTag] = cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
      cloneableTags[weakMapTag] = false;

      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
      };

      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };

      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
      };

      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      /** Built-in method references without a dependency on `root`. */
      var freeParseFloat = parseFloat,
          freeParseInt = parseInt;

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();

      /** Detect free variable `exports`. */
      var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

      /** Detect free variable `module`. */
      var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports;

      /** Detect free variable `true` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.true;

      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function() {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require('util').types;

          if (types) {
            return types;
          }

          // Legacy `true.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
      }());

      /* Node.js helper references. */
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

      /*--------------------------------------------------------------------------*/

      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0: return func.call(thisArg);
          case 1: return func.call(thisArg, args[0]);
          case 2: return func.call(thisArg, args[0], args[1]);
          case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }

      /**
       * A specialized version of `baseAggregator` for arrays.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;

        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.every` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }

      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }

      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }

      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }

      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;

        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the last element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }

      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length');

      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }

      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }

      /**
       * The base implementation of methods like `_.findKey` and `_.findLastKey`,
       * without support for iteratee shorthands, which iterates over `collection`
       * using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = key;
            return false;
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }

      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }

      /**
       * The base implementation of `_.mean` and `_.meanBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the mean.
       */
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? (baseSum(array, iteratee) / length) : NAN;
      }

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined : object[key];
        };
      }

      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined : object[key];
        };
      }

      /**
       * The base implementation of `_.reduce` and `_.reduceRight`, without support
       * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initAccum Specify using the first or last element of
       *  `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initAccum
            ? (initAccum = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define the
       * sort order of `array` and replaces criteria objects with their corresponding
       * values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;

        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }

      /**
       * The base implementation of `_.sum` and `_.sumBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(array, iteratee) {
        var result,
            index = -1,
            length = array.length;

        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined) {
            result = result === undefined ? current : (result + current);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }

      /**
       * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
       * of key-value pairs for `object` corresponding to the property names of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the key-value pairs.
       */
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }

      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }

      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      /**
       * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the first unmatched string symbol.
       */
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
            length = strSymbols.length;

        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the last unmatched string symbol.
       */
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;

        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Gets the number of `placeholder` occurrences in `array`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} placeholder The placeholder to search for.
       * @returns {number} Returns the placeholder count.
       */
      function countHolders(array, placeholder) {
        var length = array.length,
            result = 0;

        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }

      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters);

      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      var escapeHtmlChar = basePropertyOf(htmlEscapes);

      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }

      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }

      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];

        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }

      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }

      /**
       * Gets the value at `key`, unless `key` is "__proto__".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        return key == '__proto__'
          ? undefined
          : object[key];
      }

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }

      /**
       * Converts `set` to its value-value pairs.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the value-value pairs.
       */
      function setToPairs(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }

      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      /**
       * A specialized version of `_.lastIndexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }

      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string)
          ? unicodeSize(string)
          : asciiSize(string);
      }

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }

      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }

      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Create a new pristine `lodash` function using the `context` object.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Util
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // Create a suped-up `defer` in Node.js.
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      var runInContext = (function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

        /** Built-in constructor references. */
        var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError;

        /** Used for built-in method references. */
        var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;

        /** Used to detect overreaching core-js shims. */
        var coreJsData = context['__core-js_shared__'];

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to generate unique IDs. */
        var idCounter = 0;

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);

        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /** Built-in value references. */
        var Buffer = moduleExports ? context.Buffer : undefined,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
            symIterator = Symbol ? Symbol.iterator : undefined,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        var defineProperty = (function() {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }());

        /** Mocked built-ins. */
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse;

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;

        /** Used to lookup unminified function names. */
        var realNames = {};

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined;
            return result;
          };
        }());

        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }

        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
         * following template settings to use alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type {Object}
         */
        lodash.templateSettings = {

          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'escape': reEscape,

          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'evaluate': reEvaluate,

          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'interpolate': reInterpolate,

          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          'variable': '',

          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          'imports': {

            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            '_': lodash
          }
        };

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }

        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = copyArray(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = copyArray(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = copyArray(this.__views__);
          return result;
        }

        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }

        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : (start - 1),
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__);

          if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result = [];

          outer:
          while (length-- && resIndex < takeCount) {
            index += dir;

            var iterIndex = -1,
                value = array[index];

            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);

              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result[resIndex++] = value;
          }
          return result;
        }

        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
        }

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
          return this;
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          return index < 0 ? undefined : data[index][1];
        }

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
              size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
              length = values == null ? 0 : values.length;

          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
              result = data['delete'](key);

          this.size = data.size;
          return result;
        }

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (
                   // Safari 9 has enumerable `arguments.length` in strict mode.
                   key == 'length' ||
                   // Node.js 0.10 has enumerable non-index properties on buffers.
                   (isBuff && (key == 'offset' || key == 'parent')) ||
                   // PhantomJS 2 has enumerable non-index properties on typed arrays.
                   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                   // Skip index properties.
                   isIndex(key, length)
                ))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.sample` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @returns {*} Returns the random element.
         */
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined;
        }

        /**
         * A specialized version of `_.sampleSize` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }

        /**
         * A specialized version of `_.shuffle` for arrays.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }

        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined && !eq(object[key], value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        /**
         * Aggregates elements of `collection` on `accumulator` with keys transformed
         * by `iteratee` and values set by `setter`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseAggregator(collection, setter, iteratee, accumulator) {
          baseEach(collection, function(value, key, collection) {
            setter(accumulator, value, iteratee(value), collection);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }

        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null;

          while (++index < length) {
            result[index] = skip ? undefined : get(object, paths[index]);
          }
          return result;
        }

        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });

            return result;
          }

          if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });

            return result;
          }

          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);

          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        /**
         * The base implementation of `_.conforms` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         */
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }

        /**
         * The base implementation of `_.conformsTo` which accepts `props` to check.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         */
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (length--) {
            var key = props[length],
                predicate = source[key],
                value = object[key];

            if ((value === undefined && !(key in object)) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined, args); }, wait);
        }

        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length;

          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee == null ? value : iteratee(value);

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        /**
         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);

        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }

        /**
         * The base implementation of methods like `_.max` and `_.min` which accepts a
         * `comparator` to determine the extremum value.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The iteratee invoked per iteration.
         * @param {Function} comparator The comparator used to compare values.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(array, iteratee, comparator) {
          var index = -1,
              length = array.length;

          while (++index < length) {
            var value = array[index],
                current = iteratee(value);

            if (current != null && (computed === undefined
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
              var computed = current,
                  result = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;

          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }

        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
              length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
              length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined;
        }

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }

        /**
         * The base implementation of `_.gt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         */
        function baseGt(value, other) {
          return value > other;
        }

        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }

        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        /**
         * The base implementation of `_.inRange` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to check.
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         */
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }

        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = [];

          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined;
          }
          array = arrays[0];

          var index = -1,
              seen = caches[0];

          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function(value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined : apply(func, object, args);
        }

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        /**
         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         */
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }

        /**
         * The base implementation of `_.isDate` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         */
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
              length = index,
              noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        /**
         * The base implementation of `_.isRegExp` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         */
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
              result = [];

          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.lt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         */
        function baseLt(value, other) {
          return value < other;
        }

        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }

        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            if (isObject(srcValue)) {
              stack || (stack = new Stack);
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined;

              if (newValue === undefined) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }

        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue);

          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined;

          var isCommon = newValue === undefined;

          if (isCommon) {
            var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }

        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined;
        }

        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          var index = -1;
          iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });

          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }

        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
              length = paths.length,
              result = {};

          while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }

        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array;

          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value;

            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
              lastIndex = length - 1;

          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.random` without support for returning
         * floating-point numbers.
         *
         * @private
         * @param {number} lower The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the random number.
         */
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }

        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
          var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length);

          while (length--) {
            result[fromRight ? length : ++index] = start;
            start += step;
          }
          return result;
        }

        /**
         * The base implementation of `_.repeat` which doesn't coerce arguments.
         *
         * @private
         * @param {string} string The string to repeat.
         * @param {number} n The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         */
        function baseRepeat(string, n) {
          var result = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);

          return result;
        }

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }

        /**
         * The base implementation of `_.sample`.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         */
        function baseSample(collection) {
          return arraySample(values(collection));
        }

        /**
         * The base implementation of `_.sampleSize` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }

        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object;

          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
                newValue = value;

            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;
              if (newValue === undefined) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }

        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };

        /**
         * The base implementation of `_.shuffle`.
         *
         * @private
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
              length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        /**
         * The base implementation of `_.some` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;

          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }

        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
              high = array == null ? low : array.length;

          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                  computed = array[mid];

              if (computed !== null && !isSymbol(computed) &&
                  (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }

        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          value = iteratee(value);

          var low = 0,
              high = array == null ? 0 : array.length,
              valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined;

          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed);

            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }

        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.toNumber` which doesn't ensure correct
         * conversions of binary, hexadecimal, or octal string values.
         *
         * @private
         * @param {*} value The value to true.
         * @returns {number} Returns the number.
         */
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to true.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;

          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }

        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }

        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
              index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) {}

          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }

        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to perform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          return arrayReduce(actions, function(result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
          }, result);
        }

        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
              result = Array(length);

          while (++index < length) {
            var array = arrays[index],
                othIndex = -1;

            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }

        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {};

          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined;
            assignFunc(result, props[index], value);
          }
          return result;
        }

        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }

        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        /**
         * A `baseRest` alias which can be replaced with `identity` by module
         * replacement plugins.
         *
         * @private
         * @type {Function}
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        var castRest = baseRest;

        /**
         * Casts `array` to a slice if it's needed.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {number} start The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the cast slice.
         */
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined ? length : end;
          return (!start && end >= length) ? array : baseSlice(array, start, end);
        }

        /**
         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
         *
         * @private
         * @param {number|Object} id The timer id or timeout object of the timer to clear.
         */
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);

            var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);

            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }

        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;

          while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == 'desc' ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried;

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried;

          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
              length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
              length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;

            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        /**
         * Creates a function like `_.groupBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} [initializer] The accumulator object initializer.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {};

            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
          };
        }

        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined;

            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length--, customizer)
              : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);

            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.lowerFirst`.
         *
         * @private
         * @param {string} methodName The name of the `String` case method to use.
         * @returns {Function} Returns the new case function.
         */
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);

            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined;

            var chr = strSymbols
              ? strSymbols[0]
              : string.charAt(0);

            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);

            return chr[methodName]() + trailing;
          };
        }

        /**
         * Creates a function like `_.camelCase`.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
          };
        }

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper);

            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);

            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined,
                args, holders, undefined, undefined, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
              var iteratee = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) { return iteratee(iterable[key], key, iterable); };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
          };
        }

        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru;

            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];

              var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined;

              if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func))
                  ? wrapper[funcName]()
                  : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                  value = args[0];

              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                  result = length ? funcs[index].apply(this, args) : value;

              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }

        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined : createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length;

            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func;

            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function(object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }

        /**
         * Creates a function that performs a mathematical operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @param {number} [defaultValue] The value used for `undefined` arguments.
         * @returns {Function} Returns the new mathematical operation function.
         */
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result;
            if (value === undefined && other === undefined) {
              return defaultValue;
            }
            if (value !== undefined) {
              result = value;
            }
            if (other !== undefined) {
              if (result === undefined) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result = operator(value, other);
            }
            return result;
          };
        }

        /**
         * Creates a function like `_.over`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over iteratees.
         * @returns {Function} Returns the new over function.
         */
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee) {
                return apply(iteratee, thisArg, args);
              });
            });
          });
        }

        /**
         * Creates the padding for `string` based on `length`. The `chars` string
         * is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {number} length The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padding for `string`.
         */
        function createPadding(length, chars) {
          chars = chars === undefined ? ' ' : baseToString(chars);

          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars)
            ? castSlice(stringToArray(result), 0, length).join('')
            : result.slice(0, length);
        }

        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
              end = step = undefined;
            }
            // Ensure the sign of `-0` is preserved.
            start = toFinite(start);
            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }

        /**
         * Creates a function that performs a relational operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @returns {Function} Returns the new relational operation function.
         */
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }

        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined,
              newHoldersRight = isCurry ? undefined : holders,
              newPartials = isCurry ? partials : undefined,
              newPartialsRight = isCurry ? undefined : partials;

          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];

          var result = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }

        /**
         * Creates a function like `_.round`.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision) {
              // Shift with exponential notation to avoid floating-point issues.
              // See [MDN](https://mdn.io/round#Examples) for more details.
              var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision));

              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }

        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
          return new Set(values);
        };

        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;

          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
                holdersRight = holders;

            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);

          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];

          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);

          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }

        /**
         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
         * of source objects to the destination object for all destination properties
         * that resolve to `undefined`.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to assign.
         * @param {Object} object The parent object of `objValue`.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            return srcValue;
          }
          return objValue;
        }

        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }

        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(array);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index = -1,
              result = true,
              seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function(othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                result = false;
                break;
              }
            } else if (!(
                  arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                  (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + '');
        }

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0;

          while (length--) {
            var data = array[length],
                otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
          return object.placeholder;
        }

        /**
         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
         * this function returns the custom method, otherwise it returns `baseIteratee`.
         * If arguments are provided, the chosen function is invoked with them and
         * its result is returned.
         *
         * @private
         * @param {*} [value] The value to convert to an iteratee.
         * @param {number} [arity] The arity of the created iteratee.
         * @returns {Function} Returns the chosen function or its result.
         */
        function getIteratee() {
          var result = lodash.iteratee || iteratee;
          result = result === iteratee ? baseIteratee : result;
          return arguments.length ? result(arguments[0], arguments[1]) : result;
        }

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
              length = result.length;

          while (length--) {
            var key = result[length],
                value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }

        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
              length = transforms.length;

          while (++index < length) {
            var data = transforms[index],
                size = data.size;

            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }

        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
              result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor;

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor;

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
            return eq(object[index], value);
          }
          return false;
        }

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
              value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
              other = lodash[funcName];

          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }

        /**
         * Checks if `func` is capable of being masked.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
         */
        var isMaskable = coreJsData ? isFunction : stubFalse;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

          return value === proto;
        }

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined || (key in Object(object)));
          };
        }

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
          return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);

        /**
         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
              lastCalled = 0;

          return function() {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }

        /**
         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @param {number} [size=array.length] The size of `array`.
         * @returns {Array} Returns `array`.
         */
        function shuffleSelf(array, size) {
          var index = -1,
              length = array.length,
              lastIndex = length - 1;

          size = size === undefined ? length : size;
          while (++index < size) {
            var rand = baseRandom(index, lastIndex),
                value = array[rand];

            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size;
          return array;
        }

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return (func + '');
            } catch (e) {}
          }
          return '';
        }

        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__  = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to true.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size));

          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }

        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
              array = arguments[0],
              index = length;

          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }

        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function(array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function(array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
            : [];
        });

        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }

        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }

        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }

        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }

        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }

        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};

          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }

        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined;
        }

        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }

        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }

        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function(arrays) {
          var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          if (iteratee === last(mapped)) {
            iteratee = undefined;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          comparator = typeof comparator == 'function' ? comparator : undefined;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined, comparator)
            : [];
        });

        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }

        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }

        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }

        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
        }

        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);

        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, getIteratee(iteratee, 2))
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined, comparator)
            : array;
        }

        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes);

          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));

          return result;
        });

        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
              indexes = [],
              length = array.length;

          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }

        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }

        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }

        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }

        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }

        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }

        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }

        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }

        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, getIteratee(iteratee, 2))
            : [];
        }

        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }

        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }

        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });

        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });

        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
        }

        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to true.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }

        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to true.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function(group) {
            return apply(iteratee, undefined, group);
          });
        }

        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });

        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });

        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });

        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to true.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);

        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }

        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }

        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to true.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined;

          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
          return unzipWith(arrays, iteratee);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
         * chain sequences enabled. The result of such sequences must be unwrapped
         * with `_#value`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Seq
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _
         *   .chain(users)
         *   .sortBy('age')
         *   .map(function(o) {
         *     return o.user + ' is ' + o.age;
         *   })
         *   .head()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }

        /**
         * This method invokes `interceptor` and returns `value`. The interceptor
         * is invoked with one argument; (value). The purpose of this method is to
         * "tap into" a method chain sequence in order to modify intermediate results.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
         *    // Mutate input array.
         *    array.pop();
         *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }

        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         * The purpose of this method is to "pass thru" values replacing intermediate
         * results in a method chain sequence.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
         *    return [value];
         *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor) {
          return interceptor(value);
        }

        /**
         * This method is the wrapper version of `_.at`.
         *
         * @name at
         * @memberOf _
         * @since 1.0.0
         * @category Seq
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _(object).at(['a[0].b.c', 'a[1]']).value();
         * // => [3, 4]
         */
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function(object) { return baseAt(object, paths); };

          if (length > 1 || this.__actions__.length ||
              !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined);
            }
            return array;
          });
        });

        /**
         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
         *
         * @name chain
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // A sequence without explicit chaining.
         * _(users).head();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // A sequence with explicit chaining.
         * _(users)
         *   .chain()
         *   .head()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }

        /**
         * Executes the chain sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }

        /**
         * Gets the next value on a wrapped object following the
         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
         *
         * @name next
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the next iterator value.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 1 }
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 2 }
         *
         * wrapped.next();
         * // => { 'done': true, 'value': undefined }
         */
        function wrapperNext() {
          if (this.__values__ === undefined) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
              value = done ? undefined : this.__values__[this.__index__++];

          return { 'done': done, 'value': value };
        }

        /**
         * Enables the wrapper to be iterable.
         *
         * @name Symbol.iterator
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the wrapper object.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped[Symbol.iterator]() === wrapped;
         * // => true
         *
         * Array.from(wrapped);
         * // => [1, 2]
         */
        function wrapperToIterator() {
          return this;
        }

        /**
         * Creates a clone of the chain sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @param {*} value The value to plant.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2]).map(square);
         * var other = wrapped.plant([3, 4]);
         *
         * other.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
              parent = this;

          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            clone.__index__ = 0;
            clone.__values__ = undefined;
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }

        /**
         * This method is the wrapper version of `_.reverse`.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              'func': thru,
              'args': [reverse],
              'thisArg': undefined
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }

        /**
         * Executes the chain sequence to resolve the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @since 0.1.0
         * @alias toJSON, valueOf
         * @category Seq
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the number of times the key was returned by `iteratee`. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': 1, '6': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            ++result[key];
          } else {
            baseAssignValue(result, key, 1);
          }
        });

        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * **Note:** Unlike `_.remove`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.reject
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, { 'age': 36, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.filter(users, 'active');
         * // => objects for ['barney']
         */
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);

        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=collection.length-1] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
         *   return n % 2 == 1;
         * });
         * // => 3
         */
        var findLast = createFind(findLastIndex);

        /**
         * Creates a flattened array of values by running each element in `collection`
         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
         * with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [n, n];
         * }
         *
         * _.flatMap([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMap(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), 1);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDeep([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMapDeep(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), INFINITY);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDepth([1, 2], duplicate, 2);
         * // => [[1, 1], [2, 2]]
         */
        function flatMapDepth(collection, iteratee, depth) {
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee), depth);
        }

        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @alias eachRight
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEach
         * @example
         *
         * _.forEachRight([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `2` then `1`.
         */
        function forEachRight(collection, iteratee) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The order of grouped values
         * is determined by the order they occur in `collection`. The corresponding
         * value of each key is an array of elements responsible for generating the
         * key. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': [4.2], '6': [6.1, 6.3] }
         *
         * // The `_.property` iteratee shorthand.
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            baseAssignValue(result, key, [value]);
          }
        });

        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
        }

        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `path` is a function, it's invoked
         * for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke each method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invokeMap([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value) {
            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result;
        });

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the last element responsible for generating the key. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var array = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.keyBy(array, function(o) {
         *   return String.fromCharCode(o.code);
         * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.keyBy(array, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         */
        var keyBy = createAggregator(function(result, value, key) {
          baseAssignValue(result, key, value);
        });

        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.sortBy` except that it allows specifying the sort
         * orders of the iteratees to sort by. If `orders` is unspecified, all values
         * are sorted in ascending order. Otherwise, specify an order of "desc" for
         * descending or "asc" for ascending sort order of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @param {string[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // Sort by `user` in ascending order and by `age` in descending order.
         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         */
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }

        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, the second of which
         * contains elements `predicate` returns falsey for. The predicate is
         * invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * _.partition(users, function(o) { return o.active; });
         * // => objects for [['fred'], ['barney', 'pebbles']]
         *
         * // The `_.matches` iteratee shorthand.
         * _.partition(users, { 'age': 1, 'active': false });
         * // => objects for [['pebbles'], ['barney', 'fred']]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.partition(users, ['active', false]);
         * // => objects for [['barney', 'pebbles'], ['fred']]
         *
         * // The `_.property` iteratee shorthand.
         * _.partition(users, 'active');
         * // => objects for [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });

        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` thru `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not given, the first element of `collection` is used as the initial
         * value. The iteratee is invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
         * and `sortBy`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduceRight
         * @example
         *
         * _.reduce([1, 2], function(sum, n) {
         *   return sum + n;
         * }, 0);
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         *   return result;
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
         */
        function reduce(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }

        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduce
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
         *   return flattened.concat(other);
         * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        function reduceRight(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }

        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }

        /**
         * Gets a random element from `collection`.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         */
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }

        /**
         * Gets `n` random elements at unique keys from `collection` up to the
         * size of `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @param {number} [n=1] The number of elements to sample.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the random elements.
         * @example
         *
         * _.sampleSize([1, 2, 3], 2);
         * // => [3, 1]
         *
         * _.sampleSize([1, 2, 3], 4);
         * // => [2, 3, 1]
         */
        function sampleSize(collection, n, guard) {
          if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }

        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }

        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable string keyed properties for objects.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the collection size.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }

        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * Iteration is stopped once `predicate` returns truthy. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.some(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
         */
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = ctxNow || function() {
          return root.Date.now();
        };

        /*------------------------------------------------------------------------*/

        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it's called `n` or more times.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
         *   console.log('done saving!');
         * });
         *
         * _.forEach(saves, function(type) {
         *   asyncSave({ 'type': type, 'complete': done });
         * });
         * // => Logs 'done saving!' after the two async saves have completed.
         */
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }

        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }

        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result;
          };
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });

        /**
         * Creates a function that invokes the method at `object[key]` with `partials`
         * prepended to the arguments it receives.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist. See
         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Function
         * @param {Object} object The object to invoke the method on.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
         *   'user': 'fred',
         *   'greet': function(greeting, punctuation) {
         *     return greeting + ' ' + this.user + punctuation;
         *   }
         * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
         *   return greeting + 'ya ' + this.user + punctuation;
         * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });

        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curry.placeholder;
          return result;
        }

        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        function curryRight(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curryRight.placeholder;
          return result;
        }

        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;

            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }

          function leadingEdge(time) {
            // Reset any `maxWait` timer.
            lastInvokeTime = time;
            // Start the timer for the trailing edge.
            timerId = setTimeout(timerExpired, wait);
            // Invoke the leading edge.
            return leading ? invokeFunc(time) : result;
          }

          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall;

            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }

          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;

            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
              (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
          }

          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            // Restart the timer.
            timerId = setTimeout(timerExpired, remainingWait(time));
          }

          function trailingEdge(time) {
            timerId = undefined;

            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined;
            return result;
          }

          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }

          function flush() {
            return timerId === undefined ? result : trailingEdge(now());
          }

          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);

            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;

            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                // Handle invocations in a tight loop.
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }

        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
         *   console.log(text);
         * }, 'deferred');
         * // => Logs 'deferred' after one millisecond.
         */
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });

        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });

        /**
         * Creates a function that invokes `func` with arguments reversed.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to flip arguments for.
         * @returns {Function} Returns the new flipped function.
         * @example
         *
         * var flipped = _.flip(function() {
         *   return _.toArray(arguments);
         * });
         *
         * flipped('a', 'b', 'c', 'd');
         * // => ['d', 'c', 'b', 'a']
         */
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }

        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
          return before(2, func);
        }

        /**
         * Creates a function that invokes `func` with its arguments transformed.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms=[_.identity]]
         *  The argument transforms.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
         *   return n * 2;
         * }
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var func = _.overArgs(function(x, y) {
         *   return [x, y];
         * }, [square, doubled]);
         *
         * func(9, 3);
         * // => [81, 6]
         *
         * func(10, 5);
         * // => [100, 10]
         */
        var overArgs = castRest(function(func, transforms) {
          transforms = (transforms.length == 1 && isArray(transforms[0]))
            ? arrayMap(transforms[0], baseUnary(getIteratee()))
            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1,
                length = nativeMin(args.length, funcsLength);

            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });

        /**
         * Creates a function that invokes `func` with `partials` prepended to the
         * arguments it receives. This method is like `_.bind` except it does **not**
         * alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 0.2.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // Partially applied with placeholders.
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });

        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to the arguments it receives.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // Partially applied with placeholders.
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });

        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as
         * an array.
         *
         * **Note:** This method is based on the
         * [rest parameter](https://mdn.io/rest_parameters).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.rest(function(what, names) {
         *   return what + ' ' + _.initial(names).join(', ') +
         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
         * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined ? start : toInteger(start);
          return baseRest(func, start);
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * create function and an array of arguments much like
         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
         *
         * **Note:** This method is based on the
         * [spread operator](https://mdn.io/spread_operator).
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @param {number} [start=0] The start position of the spread.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
         *   return who + ' says ' + what;
         * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
         *   return x + y;
         * }));
         * // => a Promise of 76
         */
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start],
                otherArgs = castSlice(args, 0, start);

            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }

        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }

        /**
         * Creates a function that accepts up to one argument, ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.unary(parseInt));
         * // => [6, 8, 10]
         */
        function unary(func) {
          return ary(func, 1);
        }

        /**
         * Creates a function that provides `value` to `wrapper` as its first
         * argument. Any additional arguments provided to the function are appended
         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
         * binding of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} [wrapper=identity] The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
         *   return '<p>' + func(text) + '</p>';
         * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Casts `value` as an array if it's not one.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Lang
         * @param {*} value The value to inspect.
         * @returns {Array} Returns the cast array.
         * @example
         *
         * _.castArray(1);
         * // => [1]
         *
         * _.castArray({ 'a': 1 });
         * // => [{ 'a': 1 }]
         *
         * _.castArray('abc');
         * // => ['abc']
         *
         * _.castArray(null);
         * // => [null]
         *
         * _.castArray(undefined);
         * // => [undefined]
         *
         * _.castArray();
         * // => []
         *
         * var array = [1, 2, 3];
         * console.log(_.castArray(array) === array);
         * // => true
         */
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }

        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.clone` except that it accepts `customizer` which
         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
         * cloning is handled by the method instead. The `customizer` is invoked with
         * up to four arguments; (value [, index|key, object, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeepWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(false);
         *   }
         * }
         *
         * var el = _.cloneWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 0
         */
        function cloneWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.cloneWith` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the deep cloned value.
         * @see _.cloneWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(true);
         *   }
         * }
         *
         * var el = _.cloneDeepWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 20
         */
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * Checks if `object` conforms to `source` by invoking the predicate
         * properties of `source` with the corresponding property values of `object`.
         *
         * **Note:** This method is equivalent to `_.conforms` when `source` is
         * partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
         * // => true
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
         * // => false
         */
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         * @see _.lt
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        var gt = createRelationalOperation(baseGt);

        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to
         *  `other`, else `false`.
         * @see _.lte
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        /**
         * Checks if `value` is classified as an `ArrayBuffer` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         * @example
         *
         * _.isArrayBuffer(new ArrayBuffer(2));
         * // => true
         *
         * _.isArrayBuffer(new Array(2));
         * // => false
         */
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }

        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag);
        }

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

        /**
         * Checks if `value` is likely a DOM element.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }

        /**
         * Checks if `value` is an empty object, collection, map, or set.
         *
         * Objects are considered empty if they have no own enumerable string keyed
         * properties.
         *
         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
         * jQuery-like collections are considered empty if they have a `length` of `0`.
         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }

        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }

        /**
         * This method is like `_.isEqual` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with up to
         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, othValue) {
         *   if (isGreeting(objValue) && isGreeting(othValue)) {
         *     return true;
         *   }
         * }
         *
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqualWith(array, other, customizer);
         * // => true
         */
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          var result = customizer ? customizer(value, other) : undefined;
          return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }

        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }

        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        /**
         * Checks if `value` is an integer.
         *
         * **Note:** This method is based on
         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
         * @example
         *
         * _.isInteger(3);
         * // => true
         *
         * _.isInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isInteger(Infinity);
         * // => false
         *
         * _.isInteger('3');
         * // => false
         */
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        /**
         * Performs a partial deep comparison between `object` and `source` to
         * determine if `object` contains equivalent property values.
         *
         * **Note:** This method is equivalent to `_.matches` when `source` is
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.isMatch(object, { 'b': 2 });
         * // => true
         *
         * _.isMatch(object, { 'b': 1 });
         * // => false
         */
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }

        /**
         * This method is like `_.isMatch` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with five
         * arguments: (objValue, srcValue, index|key, object, source).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, srcValue) {
         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
         *     return true;
         *   }
         * }
         *
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatchWith(object, source, customizer);
         * // => true
         */
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }

        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is based on
         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
         * `undefined` and other non-number values.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return isNumber(value) && value != +value;
        }

        /**
         * Checks if `value` is a pristine native function.
         *
         * **Note:** This method can't reliably detect native functions in the presence
         * of the core-js package because core-js circumvents this kind of detection.
         * Despite multiple requests, the core-js maintainer has made it clear: any
         * attempt to fix the detection will be obstructed. As a result, we're left
         * with little choice but to throw an error. Unfortunately, this also affects
         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
         * which rely on core-js.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }

        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }

        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }

        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
         * classified as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
         * @example
         *
         * _.isNumber(3);
         * // => true
         *
         * _.isNumber(Number.MIN_VALUE);
         * // => true
         *
         * _.isNumber(Infinity);
         * // => true
         *
         * _.isNumber('3');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag);
        }

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }

        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

        /**
         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
         * double precision number which isn't the result of a rounded unsafe integer.
         *
         * **Note:** This method is based on
         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
         * @example
         *
         * _.isSafeInteger(3);
         * // => true
         *
         * _.isSafeInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isSafeInteger(Infinity);
         * // => false
         *
         * _.isSafeInteger('3');
         * // => false
         */
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
        }

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined;
        }

        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }

        /**
         * Checks if `value` is classified as a `WeakSet` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
         * @example
         *
         * _.isWeakSet(new WeakSet);
         * // => true
         *
         * _.isWeakSet(new Set);
         * // => false
         */
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }

        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         * @see _.gt
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        var lt = createRelationalOperation(baseLt);

        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to
         *  `other`, else `false`.
         * @see _.gte
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });

        /**
         * Converts `value` to an array.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * _.toArray({ 'a': 1, 'b': 2 });
         * // => [1, 2]
         *
         * _.toArray('abc');
         * // => ['a', 'b', 'c']
         *
         * _.toArray(1);
         * // => []
         *
         * _.toArray(null);
         * // => []
         */
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
              func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

          return func(value);
        }

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
              remainder = result % 1;

          return result === result ? (remainder ? result - remainder : result) : 0;
        }

        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to true.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, '');
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }

        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }

        /**
         * Converts `value` to a safe integer. A safe integer can be compared and
         * represented correctly.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toSafeInteger(3.2);
         * // => 3
         *
         * _.toSafeInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toSafeInteger(Infinity);
         * // => 9007199254740991
         *
         * _.toSafeInteger('3.2');
         * // => 3
         */
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : (value === 0 ? value : 0);
        }

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });

        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });

        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });

        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });

        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);

        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }

        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function(object, sources) {
          object = Object(object);

          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }

          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;

            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];

              if (value === undefined ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }

          return object;
        });

        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined, customDefaultsMerge);
          return apply(mergeWith, undefined, args);
        });

        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }

        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }

        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }

        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }

        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }

        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          result[value] = key;
        }, constant(identity));

        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, getIteratee);

        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }

        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }

        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }

        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });

        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });

        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }

        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });

        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }

        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);

          var index = -1,
              length = path.length;

          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined;
          }
          while (++index < length) {
            var value = object == null ? undefined : object[toKey(path[index])];
            if (value === undefined) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }

        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }

        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseSet(object, path, value, customizer);
        }

        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);

        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);

        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object);

          iteratee = getIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }

        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }

        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }

        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }

        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Clamps `number` within the inclusive `lower` and `upper` bounds.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Number
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         * @example
         *
         * _.clamp(-10, -5, 5);
         * // => -5
         *
         * _.clamp(10, -5, 5);
         * // => 5
         */
        function clamp(number, lower, upper) {
          if (upper === undefined) {
            upper = lower;
            lower = undefined;
          }
          if (upper !== undefined) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }

        /**
         * Checks if `n` is between `start` and up to, but not including, `end`. If
         * `end` is not specified, it's set to `start` with `start` then set to `0`.
         * If `start` is greater than `end` the params are swapped to support
         * negative ranges.
         *
         * @static
         * @memberOf _
         * @since 3.3.0
         * @category Number
         * @param {number} number The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         * @see _.range, _.rangeRight
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         *
         * _.inRange(-3, -2, -6);
         * // => true
         */
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }

        /**
         * Produces a random number between the inclusive `lower` and `upper` bounds.
         * If only one argument is provided a number between `0` and the given number
         * is returned. If `floating` is `true`, or either `lower` or `upper` are
         * floats, a floating-point number is returned instead of an integer.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Number
         * @param {number} [lower=0] The lower bound.
         * @param {number} [upper=1] The upper bound.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(lower, upper, floating) {
          if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined;
          }
          if (floating === undefined) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined;
            }
            else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined;
            }
          }
          if (lower === undefined && upper === undefined) {
            lower = 0;
            upper = 1;
          }
          else {
            lower = toFinite(lower);
            if (upper === undefined) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
          }
          return baseRandom(lower, upper);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar--');
         * // => 'fooBar'
         *
         * _.camelCase('__FOO_BAR__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? capitalize(word) : word);
        });

        /**
         * Converts the first character of `string` to upper case and the remaining
         * to lower case.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('FRED');
         * // => 'Fred'
         */
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }

        /**
         * Deburrs `string` by converting
         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
         * letters to basic Latin letters and removing
         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }

        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search up to.
         * @returns {boolean} Returns `true` if `string` ends with `target`,
         *  else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);

          var length = string.length;
          position = position === undefined
            ? length
            : baseClamp(toInteger(position), 0, length);

          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }

        /**
         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
         * corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional
         * characters use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value. See
         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * When working with HTML you should always
         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
         * XSS vectors.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          string = toString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }

        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return (string && reHasRegExpChar.test(string))
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }

        /**
         * Converts `string` to
         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__FOO_BAR__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });

        /**
         * Converts `string`, as space separated words, to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.lowerCase('--Foo-Bar--');
         * // => 'foo bar'
         *
         * _.lowerCase('fooBar');
         * // => 'foo bar'
         *
         * _.lowerCase('__FOO_BAR__');
         * // => 'foo bar'
         */
        var lowerCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toLowerCase();
        });

        /**
         * Converts the first character of `string` to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.lowerFirst('Fred');
         * // => 'fred'
         *
         * _.lowerFirst('FRED');
         * // => 'fRED'
         */
        var lowerFirst = createCaseFirst('toLowerCase');

        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }

        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padEnd('abc', 6);
         * // => 'abc   '
         *
         * _.padEnd('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padEnd('abc', 3);
         * // => 'abc'
         */
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (string + createPadding(length - strLength, chars))
            : string;
        }

        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padStart('abc', 6);
         * // => '   abc'
         *
         * _.padStart('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padStart('abc', 3);
         * // => 'abc'
         */
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (createPadding(length - strLength, chars) + string)
            : string;
        }

        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
         * hexadecimal, in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the
         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix=10] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }

        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=1] The number of times to repeat the string.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n, guard) {
          if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }

        /**
         * Replaces matches for `pattern` in `string` with `replacement`.
         *
         * **Note:** This method is based on
         * [`String#replace`](https://mdn.io/String/replace).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to modify.
         * @param {RegExp|string} pattern The pattern to replace.
         * @param {Function|string} replacement The match replacement.
         * @returns {string} Returns the modified string.
         * @example
         *
         * _.replace('Hi Fred', 'Fred', 'Barney');
         * // => 'Hi Barney'
         */
        function replace() {
          var args = arguments,
              string = toString(args[0]);

          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }

        /**
         * Converts `string` to
         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--FOO-BAR--');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });

        /**
         * Splits `string` by `separator`.
         *
         * **Note:** This method is based on
         * [`String#split`](https://mdn.io/String/split).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to split.
         * @param {RegExp|string} separator The separator pattern to split by.
         * @param {number} [limit] The length to truncate results to.
         * @returns {Array} Returns the string segments.
         * @example
         *
         * _.split('a-b-c', '-', 2);
         * // => ['a', 'b']
         */
        function split(string, separator, limit) {
          if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined;
          }
          limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }

        /**
         * Converts `string` to
         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @since 3.1.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar--');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__FOO_BAR__');
         * // => 'FOO BAR'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + upperFirst(word);
        });

        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`,
         *  else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null
            ? 0
            : baseClamp(toInteger(position), 0, string.length);

          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }

        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is given, it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options={}] The options object.
         * @param {RegExp} [options.escape=_.templateSettings.escape]
         *  The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
         *  The "evaluate" delimiter.
         * @param {Object} [options.imports=_.templateSettings.imports]
         *  An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
         *  The "interpolate" delimiter.
         * @param {string} [options.sourceURL='lodash.templateSources[n]']
         *  The sourceURL of the compiled template.
         * @param {string} [options.variable='obj']
         *  The data object variable name.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // Use the "interpolate" delimiter to create a compiled template.
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // Use the HTML "escape" delimiter to escape data property values.
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the internal `print` function in "evaluate" delimiters.
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // Use the ES template literal delimiter as an "interpolate" delimiter.
         * // Disable support by replacing the "interpolate" delimiter.
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // Use backslashes to treat delimiters as plain text.
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // Use the `imports` option to import `jQuery` as `jq`.
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
         *
         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
         * //   var __t, __p = '';
         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
         * //   return __p;
         * // }
         *
         * // Use custom template delimiters.
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // Use the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and stack traces.
         * fs.writeFileSync(path.join(true.cwd(), 'jst.js'), '\
         *   var JST = {\
         *     "main": ' + _.template(mainText).source + '\
         *   };\
         * ');
         */
        function template(string, options, guard) {
          // Based on John Resig's `tmpl` implementation
          // (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;

          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);

          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys);

          var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '";

          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
          , 'g');

          // Use a sourceURL for easier debugging.
          var sourceURL = '//# sourceURL=' +
            ('sourceURL' in options
              ? options.sourceURL
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';

          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);

            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;

            // The JS engine embedded in Adobe products needs `match` returned in
            // order to produce the correct `offset` value.
            return match;
          });

          source += "';\n";

          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          var variable = options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');

          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
              ? ''
              : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
               ? ', __e = _.escape'
               : ''
            ) +
            (isEvaluating
              ? ', __j = Array.prototype.join;\n' +
                "function print() { __p += __j.call(arguments, '') }\n"
              : ';\n'
            ) +
            source +
            'return __p\n}';

          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined, importsValues);
          });

          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }

        /**
         * Converts `string`, as a whole, to lower case just like
         * [String#toLowerCase](https://mdn.io/toLowerCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.toLower('--Foo-Bar--');
         * // => '--foo-bar--'
         *
         * _.toLower('fooBar');
         * // => 'foobar'
         *
         * _.toLower('__FOO_BAR__');
         * // => '__foo_bar__'
         */
        function toLower(value) {
          return toString(value).toLowerCase();
        }

        /**
         * Converts `string`, as a whole, to upper case just like
         * [String#toUpperCase](https://mdn.io/toUpperCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.toUpper('--foo-bar--');
         * // => '--FOO-BAR--'
         *
         * _.toUpper('fooBar');
         * // => 'FOOBAR'
         *
         * _.toUpper('__foo_bar__');
         * // => '__FOO_BAR__'
         */
        function toUpper(value) {
          return toString(value).toUpperCase();
        }

        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrim, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1;

          return castSlice(strSymbols, start, end).join('');
        }

        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimEnd('  abc  ');
         * // => '  abc'
         *
         * _.trimEnd('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimEnd, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

          return castSlice(strSymbols, 0, end).join('');
        }

        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimStart('  abc  ');
         * // => 'abc  '
         *
         * _.trimStart('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars));

          return castSlice(strSymbols, start).join('');
        }

        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object} [options={}] The options object.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.truncate('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': ' '
         * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': /,? +/
         * });
         * // => 'hi-diddly-ho there...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'omission': ' [...]'
         * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION;

          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);

          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);

          if (separator === undefined) {
            return result + omission;
          }
          if (strSymbols) {
            end += (result.length - end);
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                  substring = result;

              if (!separator.global) {
                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result = result.slice(0, newEnd === undefined ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }

        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
         * their corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional
         * HTML entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @since 0.6.0
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = toString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }

        /**
         * Converts `string`, as space separated words, to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.upperCase('--foo-bar');
         * // => 'FOO BAR'
         *
         * _.upperCase('fooBar');
         * // => 'FOO BAR'
         *
         * _.upperCase('__foo_bar__');
         * // => 'FOO BAR'
         */
        var upperCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toUpperCase();
        });

        /**
         * Converts the first character of `string` to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.upperFirst('fred');
         * // => 'Fred'
         *
         * _.upperFirst('FRED');
         * // => 'FRED'
         */
        var upperFirst = createCaseFirst('toUpperCase');

        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined : pattern;

          if (pattern === undefined) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }

        /*------------------------------------------------------------------------*/

        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Function} func The function to attempt.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // Avoid throwing errors for invalid selectors.
         * var elements = _.attempt(function(selector) {
         *   return document.querySelectorAll(selector);
         * }, '>_>');
         *
         * if (_.isError(elements)) {
         *   elements = [];
         * }
         */
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });

        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method.
         *
         * **Note:** This method doesn't set the "length" property of bound functions.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} methodNames The object method names to bind.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
         *   'label': 'docs',
         *   'click': function() {
         *     console.log('clicked ' + this.label);
         *   }
         * };
         *
         * _.bindAll(view, ['click']);
         * jQuery(element).on('click', view.click);
         * // => Logs 'clicked docs' when clicked.
         */
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });

        /**
         * Creates a function that iterates over `pairs` and invokes the corresponding
         * function of the first predicate to return truthy. The predicate-function
         * pairs are invoked with the `this` binding and arguments of the created
         * function.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Array} pairs The predicate-function pairs.
         * @returns {Function} Returns the new composite function.
         * @example
         *
         * var func = _.cond([
         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
         *   [_.stubTrue,                      _.constant('no match')]
         * ]);
         *
         * func({ 'a': 1, 'b': 2 });
         * // => 'matches A'
         *
         * func({ 'a': 0, 'b': 1 });
         * // => 'matches B'
         *
         * func({ 'a': '1', 'b': '2' });
         * // => 'no match'
         */
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee();

          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });

          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }

        /**
         * Creates a function that invokes the predicate properties of `source` with
         * the corresponding property values of a given object, returning `true` if
         * all predicates return truthy, else `false`.
         *
         * **Note:** The created function is equivalent to `_.conformsTo` with
         * `source` partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 2, 'b': 1 },
         *   { 'a': 1, 'b': 2 }
         * ];
         *
         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
         * // => [{ 'a': 1, 'b': 2 }]
         */
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }

        /**
         * Checks `value` to determine whether a default value should be returned in
         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
         * or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Util
         * @param {*} value The value to check.
         * @param {*} defaultValue The default value.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * _.defaultTo(1, 10);
         * // => 1
         *
         * _.defaultTo(undefined, 10);
         * // => 10
         */
        function defaultTo(value, defaultValue) {
          return (value == null || value !== value) ? defaultValue : value;
        }

        /**
         * Creates a function that returns the result of invoking the given functions
         * with the `this` binding of the created function, where each successive
         * invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flowRight
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flow([_.add, square]);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();

        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);

        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between a given
         * object and `source`, returning `true` if the given object has equivalent
         * property values, else `false`.
         *
         * **Note:** The created function is equivalent to `_.isMatch` with `source`
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between the
         * value at `path` of a given object to `srcValue`, returning `true` if the
         * object value is equivalent, else `false`.
         *
         * **Note:** Partial comparisons will match empty array and empty object
         * `srcValue` values against any array or object value, respectively. See
         * `_.isEqual` for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.find(objects, _.matchesProperty('a', 4));
         * // => { 'a': 4, 'b': 5, 'c': 6 }
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that invokes the method at `path` of a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': _.constant(2) } },
         *   { 'a': { 'b': _.constant(1) } }
         * ];
         *
         * _.map(objects, _.method('a.b'));
         * // => [2, 1]
         *
         * _.map(objects, _.method(['a', 'b']));
         * // => [2, 1]
         */
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path of `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * Adds all own enumerable string keyed function properties of a source
         * object to the destination object. If `object` is a function, then methods
         * are added to its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
         *   return _.filter(string, function(v) {
         *     return /[aeiou]/i.test(v);
         *   });
         * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          var props = keys(source),
              methodNames = baseFunctions(source, props);

          if (options == null &&
              !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object);

          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = copyArray(this.__actions__);

                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });

          return object;
        }

        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }

        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }

        /**
         * Creates a function that gets the argument at index `n`. If `n` is negative,
         * the nth argument from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [n=0] The index of the argument to return.
         * @returns {Function} Returns the new pass-thru function.
         * @example
         *
         * var func = _.nthArg(1);
         * func('a', 'b', 'c', 'd');
         * // => 'b'
         *
         * var func = _.nthArg(-2);
         * func('a', 'b', 'c', 'd');
         * // => 'c'
         */
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }

        /**
         * Creates a function that invokes `iteratees` with the arguments it receives
         * and returns their results.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.over([Math.max, Math.min]);
         *
         * func(1, 2, 3, 4);
         * // => [4, 1]
         */
        var over = createOver(arrayMap);

        /**
         * Creates a function that checks if **all** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overEvery([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => false
         *
         * func(NaN);
         * // => false
         */
        var overEvery = createOver(arrayEvery);

        /**
         * Creates a function that checks if **any** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overSome([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => true
         *
         * func(NaN);
         * // => false
         */
        var overSome = createOver(arraySome);

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the value at a given path of `object`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined : baseGet(object, path);
          };
        }

        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();

        /**
         * This method is like `_.range` except that it populates values in
         * descending order.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.range
         * @example
         *
         * _.rangeRight(4);
         * // => [3, 2, 1, 0]
         *
         * _.rangeRight(-4);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 5);
         * // => [4, 3, 2, 1]
         *
         * _.rangeRight(0, 20, 5);
         * // => [15, 10, 5, 0]
         *
         * _.rangeRight(0, -4, -1);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.rangeRight(0);
         * // => []
         */
        var rangeRight = createRange(true);

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        /**
         * This method returns a new empty object.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Object} Returns the new empty object.
         * @example
         *
         * var objects = _.times(2, _.stubObject);
         *
         * console.log(objects);
         * // => [{}, {}]
         *
         * console.log(objects[0] === objects[1]);
         * // => false
         */
        function stubObject() {
          return {};
        }

        /**
         * This method returns an empty string.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {string} Returns the empty string.
         * @example
         *
         * _.times(2, _.stubString);
         * // => ['', '']
         */
        function stubString() {
          return '';
        }

        /**
         * This method returns `true`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `true`.
         * @example
         *
         * _.times(2, _.stubTrue);
         * // => [true, true]
         */
        function stubTrue() {
          return true;
        }

        /**
         * Invokes the iteratee `n` times, returning an array of the results of
         * each invocation. The iteratee is invoked with one argument; (index).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.times(3, String);
         * // => ['0', '1', '2']
         *
         *  _.times(4, _.constant(0));
         * // => [0, 0, 0, 0]
         */
        function times(n, iteratee) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH);

          iteratee = getIteratee(iteratee);
          n -= MAX_ARRAY_LENGTH;

          var result = baseTimes(length, iteratee);
          while (++index < n) {
            iteratee(index);
          }
          return result;
        }

        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }

        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {number} augend The first number in an addition.
         * @param {number} addend The second number in an addition.
         * @returns {number} Returns the total.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);

        /**
         * Computes `number` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');

        /**
         * Divide two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} dividend The first number in a division.
         * @param {number} divisor The second number in a division.
         * @returns {number} Returns the quotient.
         * @example
         *
         * _.divide(6, 4);
         * // => 1.5
         */
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);

        /**
         * Computes `number` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');

        /**
         * Computes the maximum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => undefined
         */
        function max(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseGt)
            : undefined;
        }

        /**
         * This method is like `_.max` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.maxBy(objects, function(o) { return o.n; });
         * // => { 'n': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.maxBy(objects, 'n');
         * // => { 'n': 2 }
         */
        function maxBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
            : undefined;
        }

        /**
         * Computes the mean of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the mean.
         * @example
         *
         * _.mean([4, 2, 8, 6]);
         * // => 5
         */
        function mean(array) {
          return baseMean(array, identity);
        }

        /**
         * This method is like `_.mean` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be averaged.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the mean.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.meanBy(objects, function(o) { return o.n; });
         * // => 5
         *
         * // The `_.property` iteratee shorthand.
         * _.meanBy(objects, 'n');
         * // => 5
         */
        function meanBy(array, iteratee) {
          return baseMean(array, getIteratee(iteratee, 2));
        }

        /**
         * Computes the minimum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => undefined
         */
        function min(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseLt)
            : undefined;
        }

        /**
         * This method is like `_.min` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.minBy(objects, function(o) { return o.n; });
         * // => { 'n': 1 }
         *
         * // The `_.property` iteratee shorthand.
         * _.minBy(objects, 'n');
         * // => { 'n': 1 }
         */
        function minBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
            : undefined;
        }

        /**
         * Multiply two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} multiplier The first number in a multiplication.
         * @param {number} multiplicand The second number in a multiplication.
         * @returns {number} Returns the product.
         * @example
         *
         * _.multiply(6, 4);
         * // => 24
         */
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);

        /**
         * Computes `number` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');

        /**
         * Subtract two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {number} minuend The first number in a subtraction.
         * @param {number} subtrahend The second number in a subtraction.
         * @returns {number} Returns the difference.
         * @example
         *
         * _.subtract(6, 4);
         * // => 2
         */
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);

        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
          return (array && array.length)
            ? baseSum(array, identity)
            : 0;
        }

        /**
         * This method is like `_.sum` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be summed.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the sum.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.sumBy(objects, function(o) { return o.n; });
         * // => 20
         *
         * // The `_.property` iteratee shorthand.
         * _.sumBy(objects, 'n');
         * // => 20
         */
        function sumBy(array, iteratee) {
          return (array && array.length)
            ? baseSum(array, getIteratee(iteratee, 2))
            : 0;
        }

        /*------------------------------------------------------------------------*/

        // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;

        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;

        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);

        /*------------------------------------------------------------------------*/

        // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;

        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;

        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }()), { 'chain': false });

        /*------------------------------------------------------------------------*/

        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type {string}
         */
        lodash.VERSION = VERSION;

        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });

        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

            var result = (this.__filtered__ && !index)
              ? new LazyWrapper(this)
              : this.clone();

            if (result.__filtered__) {
              result.__takeCount__ = nativeMin(n, result.__takeCount__);
            } else {
              result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
              });
            }
            return result;
          };

          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });

        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

          LazyWrapper.prototype[methodName] = function(iteratee) {
            var result = this.clone();
            result.__iteratees__.push({
              'iteratee': getIteratee(iteratee, 3),
              'type': type
            });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });

        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach(['head', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');

          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });

        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach(['initial', 'tail'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');

          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });

        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };

        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };

        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };

        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });

        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };

        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);

          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined) {
            end = toInteger(end);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };

        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };

        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };

        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName);

          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value);

            var interceptor = function(value) {
              var result = lodashFunc.apply(lodash, arrayPush([value], args));
              return (isTaker && chainAll) ? result[0] : result;
            };

            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid;

            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
              return new LodashWrapper(result, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result = this.thru(interceptor);
            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
          };
        });

        // Add `Array` methods to `lodash.prototype`.
        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
          var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);

          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value) {
              return func.apply(isArray(value) ? value : [], args);
            });
          };
        });

        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = (lodashFunc.name + ''),
                names = realNames[key] || (realNames[key] = []);

            names.push({ 'name': methodName, 'func': lodashFunc });
          }
        });

        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
          'name': 'wrapper',
          'func': undefined
        }];

        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;

        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;

        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });

      /*--------------------------------------------------------------------------*/

      // Export lodash.
      var _ = runInContext();

      // Some AMD build optimizers, like r.js, check for condition patterns like:
      if (typeof undefined == 'function' && typeof undefined.amd == 'object' && undefined.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;

        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        undefined(function() {
          return _;
        });
      }
      // Check for `exports` after `define` in case a build optimizer adds it.
      else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      }
      else {
        // Export to the global object.
        root._ = _;
      }
    }.call(commonjsGlobal));
    });
    var lodash_1 = lodash.pick;
    var lodash_2 = lodash.isDate;
    var lodash_3 = lodash.startsWith;
    var lodash_4 = lodash.includes;
    var lodash_5 = lodash.omitBy;
    var lodash_6 = lodash.omit;
    var lodash_7 = lodash.set;
    var lodash_8 = lodash.has;
    var lodash_9 = lodash.isString;
    var lodash_10 = lodash.isEqual;
    var lodash_11 = lodash.findIndex;
    var lodash_12 = lodash.concat;
    var lodash_13 = lodash.forOwn;
    var lodash_14 = lodash.keyBy;
    var lodash_15 = lodash.assign;
    var lodash_16 = lodash.each;
    var lodash_17 = lodash.get;
    var lodash_18 = lodash.merge;
    var lodash_19 = lodash.pickBy;
    var lodash_20 = lodash.endsWith;
    var lodash_21 = lodash.isEmpty;
    var lodash_22 = lodash.isArray;
    var lodash_23 = lodash.isObject;
    var lodash_24 = lodash.map;
    var lodash_25 = lodash.keys;
    var lodash_26 = lodash.mapKeys;
    var lodash_27 = lodash.mapValues;

    class SchemaInfoBuilder {
        constructor(schema) {
            this.schema = schema;
        }
        getSchemaInfo() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.schemaInfo) {
                    this.schemaInfo = yield this.buildSchemaInfo(this.schema);
                }
                return this.schemaInfo;
            });
        }
        addDirectiveFromAST(astDirective, schemaInfo, path) {
            const name = astDirective.name.value;
            const args = [];
            lodash_16(astDirective.arguments, arg => {
                args.push(Object.assign({ name: arg.name.value }, lodash_6(arg.value, ['loc'])));
            });
            const directives = lodash_17(schemaInfo, path) ? lodash_17(schemaInfo, path) : [];
            directives.push({ name: name, args: args });
            lodash_7(schemaInfo, path, directives);
        }
        buildSchemaInfo(schema) {
            return __awaiter(this, void 0, void 0, function* () {
                let originalSchemaInfo = yield graphql(schema, getIntrospectionQuery({ descriptions: true }));
                originalSchemaInfo = originalSchemaInfo.data;
                let schemaInfo = originalSchemaInfo;
                schemaInfo = lodash_5(schemaInfo.__schema.types, (value) => {
                    return lodash_3(value.name, '__') || lodash_4(['Boolean', 'String', 'ID', 'Int', 'Float'], value.name);
                });
                schemaInfo = lodash_26(schemaInfo, (type) => type.name);
                lodash_16(lodash_25(schemaInfo), (typeName) => {
                    const type = schemaInfo[typeName];
                    // directives on type
                    lodash_16(lodash_17(schema.getType(typeName), 'astNode.directives'), (astDirective) => {
                        this.addDirectiveFromAST(astDirective, schemaInfo, `${typeName}.directives`);
                    });
                    // directives on fields
                    lodash_16(lodash_17(schema.getType(typeName), 'astNode.fields'), (field) => {
                        const fieldName = field.name.value;
                        lodash_16(lodash_17(field, 'directives'), (astDirective) => {
                            const fieldIndex = lodash_11(lodash_17(schemaInfo, `${typeName}.fields`), { 'name': fieldName });
                            this.addDirectiveFromAST(astDirective, schemaInfo, `${typeName}.fields[${fieldIndex}].directives`);
                        });
                    });
                    // metadata on type
                    lodash_7(schemaInfo, `${typeName}.metadata`, lodash_6(lodash_17(schema, `_typeMap.${typeName}`), ['astNode', 'name', 'description', 'extensionASTNodes', 'isTypeOf', '_fields', '_interfaces', '_typeConfig', 'getFields', 'getInterfaces', 'toString', 'inspect', 'toJSON', '_enumConfig', 'getValue', 'getValues', 'parseLiteral', 'parseValue', 'getValue', 'serialize', '_getNameLookup', '_getValueLookup', '_values', 'resolveType', 'getTypes', '_types']));
                    // metadata of fields
                    lodash_16(lodash_17(schema, `_typeMap.${typeName}._fields`), (field) => {
                        const fieldIndex = lodash_11(lodash_17(schemaInfo, `${typeName}.fields`), { 'name': field.name });
                        lodash_7(schemaInfo, `${typeName}.fields[${fieldIndex}].metadata`, lodash_6(field, ['type', 'description', 'args', 'deprecationReason', 'astNode', 'isDeprecated', 'name']));
                    });
                    // add unions to types
                    if (type.kind === 'UNION') {
                        lodash_16(type.possibleTypes, possibleType => {
                            schemaInfo[possibleType.name].unions = schemaInfo[possibleType.name].unions ? schemaInfo[possibleType.name].unions : [];
                            schemaInfo[possibleType.name].unions = lodash_12(schemaInfo[possibleType.name].unions, [{ kind: type.kind, name: type.name, ofType: type.ofType }]);
                        });
                    }
                });
                return schemaInfo;
            });
        }
    }

    var eventLite = createCommonjsModule(function (module) {
    /**
     * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
     *
     * @copyright Yusuke Kawasaki
     * @license MIT
     * @constructor
     * @see https://github.com/kawanet/event-lite
     * @see http://kawanet.github.io/event-lite/EventLite.html
     * @example
     * var EventLite = require("event-lite");
     *
     * function MyClass() {...}             // your class
     *
     * EventLite.mixin(MyClass.prototype);  // import event methods
     *
     * var obj = new MyClass();
     * obj.on("foo", function() {...});     // add event listener
     * obj.once("bar", function() {...});   // add one-time event listener
     * obj.emit("foo");                     // dispatch event
     * obj.emit("bar");                     // dispatch another event
     * obj.off("foo");                      // remove event listener
     */

    function EventLite() {
      if (!(this instanceof EventLite)) return new EventLite();
    }

    (function(EventLite) {
      // export the class for node.js
      module.exports = EventLite;

      // property name to hold listeners
      var LISTENERS = "listeners";

      // methods to export
      var methods = {
        on: on,
        once: once,
        off: off,
        emit: emit
      };

      // mixin to self
      mixin(EventLite.prototype);

      // export mixin function
      EventLite.mixin = mixin;

      /**
       * Import on(), once(), off() and emit() methods into target object.
       *
       * @function EventLite.mixin
       * @param target {Prototype}
       */

      function mixin(target) {
        for (var key in methods) {
          target[key] = methods[key];
        }
        return target;
      }

      /**
       * Add an event listener.
       *
       * @function EventLite.prototype.on
       * @param type {string}
       * @param func {Function}
       * @returns {EventLite} Self for method chaining
       */

      function on(type, func) {
        getListeners(this, type).push(func);
        return this;
      }

      /**
       * Add one-time event listener.
       *
       * @function EventLite.prototype.once
       * @param type {string}
       * @param func {Function}
       * @returns {EventLite} Self for method chaining
       */

      function once(type, func) {
        var that = this;
        wrap.originalListener = func;
        getListeners(that, type).push(wrap);
        return that;

        function wrap() {
          off.call(that, type, wrap);
          func.apply(this, arguments);
        }
      }

      /**
       * Remove an event listener.
       *
       * @function EventLite.prototype.off
       * @param [type] {string}
       * @param [func] {Function}
       * @returns {EventLite} Self for method chaining
       */

      function off(type, func) {
        var that = this;
        var listners;
        if (!arguments.length) {
          delete that[LISTENERS];
        } else if (!func) {
          listners = that[LISTENERS];
          if (listners) {
            delete listners[type];
            if (!Object.keys(listners).length) return off.call(that);
          }
        } else {
          listners = getListeners(that, type, true);
          if (listners) {
            listners = listners.filter(ne);
            if (!listners.length) return off.call(that, type);
            that[LISTENERS][type] = listners;
          }
        }
        return that;

        function ne(test) {
          return test !== func && test.originalListener !== func;
        }
      }

      /**
       * Dispatch (trigger) an event.
       *
       * @function EventLite.prototype.emit
       * @param type {string}
       * @param [value] {*}
       * @returns {boolean} True when a listener received the event
       */

      function emit(type, value) {
        var that = this;
        var listeners = getListeners(that, type, true);
        if (!listeners) return false;
        var arglen = arguments.length;
        if (arglen === 1) {
          listeners.forEach(zeroarg);
        } else if (arglen === 2) {
          listeners.forEach(onearg);
        } else {
          var args = Array.prototype.slice.call(arguments, 1);
          listeners.forEach(moreargs);
        }
        return !!listeners.length;

        function zeroarg(func) {
          func.call(that);
        }

        function onearg(func) {
          func.call(that, value);
        }

        function moreargs(func) {
          func.apply(that, args);
        }
      }

      /**
       * @ignore
       */

      function getListeners(that, type, readonly) {
        if (readonly && !that[LISTENERS]) return;
        var listeners = that[LISTENERS] || (that[LISTENERS] = {});
        return listeners[type] || (listeners[type] = []);
      }

    })(EventLite);
    });

    /**
     * Pull primitive values from an array.
     *
     * @param {*[]} array
     * @param {*|*[]} values
     * @return {*[]}
     */
    var pull = function pull (array, values) {
      var hash = {}, clone = [], value;
      var i, j;

      if (Array.isArray(values))
        for (i = 0, j = values.length; i < j; i++)
          hash[values[i]] = true;
      else hash[values] = true;

      // Need to iterate backwards.
      for (i = array.length; i--;) {
        value = array[i];
        if (!hash.hasOwnProperty(value)) clone.push(value);
      }

      return clone
    };

    /**
     * Given a record and an update object, apply the update on the record. Note
     * that the `operate` object is unapplied here.
     *
     * @param {Object} record
     * @param {Object} update
     */
    var apply_update = function applyUpdate (record, update) {
      var field;

      for (field in update.replace)
        record[field] = update.replace[field];

      for (field in update.push)
        record[field] = record[field] ?
          record[field].concat(update.push[field]) :
          [].concat(update.push[field]);

      for (field in update.pull)
        record[field] = record[field] ?
          pull(record[field], update.pull[field]) : [];
    };

    /**
     * A more performant `Array.prototype.map`.
     *
     * @param {*[]} array
     * @param {Function} fn
     * @return {Boolean}
     */
    var map = function map (array, fn) {
      var i, j, k = [], l = 0;

      for (i = 0, j = array.length; i < j; i++)
        k[l++] = fn(array[i], i, array);

      return k
    };

    // This object exists as a container for the Promise implementation. By
    // default, it's the native one.
    var Promise_1 = Promise;

    var promise = {
    	Promise: Promise_1
    };

    var global$1 = typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {}

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read$$1 (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read$$1(arr, i + j) !== read$$1(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write$$1 (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    /**
     * A fast recursive equality check, which covers limited use cases.
     *
     * @param {Object}
     * @param {Object}
     * @return {Boolean}
     */
    function deepEqual (a, b) {
      var key, value, compare, aLength = 0, bLength = 0;

      // If they are the same object, don't need to go further.
      if (a === b) return true

      // Both objects must be defined.
      if (!a || !b) return false

      // Objects must be of the same type.
      if (a.prototype !== b.prototype) return false

      for (key in a) {
        aLength++;
        value = a[key];
        compare = b[key];

        if (typeof value === 'object') {
          if (typeof compare !== 'object' || !deepEqual(value, compare))
            return false
          continue
        }

        if (isBuffer(value)) {
          if (!isBuffer(compare) || !value.equals(compare))
            return false
          continue
        }

        if (value && typeof value.getTime === 'function') {
          if (!compare || typeof compare.getTime !== 'function' ||
            value.getTime() !== compare.getTime())
            return false
          continue
        }

        if (value !== compare) return false
      }

      for (key in b) bLength++;

      // Keys must be of same length.
      return aLength === bLength
    }


    var deep_equal = deepEqual;

    var message_1 = message;


    /**
     * Message function for i18n.
     *
     * @param {String} id
     * @param {String} language
     * @param {Object} [data]
     * @return {String}
     */
    function message (id, language, data) {
      var genericMessage = 'GenericError';
      var str, key, subtag;

      if (!message.hasOwnProperty(language)) {
        subtag = language && language.match(/.+?(?=-)/);
        if (subtag) subtag = subtag[0];
        if (message.hasOwnProperty(subtag)) language = subtag;
        else language = message.defaultLanguage;
      }

      if (!message[language].hasOwnProperty(id))
        return message[language][genericMessage] || message.en[genericMessage]

      str = message[language][id];

      for (key in data) str = str.replace('{' + key + '}', data[key]);

      return str
    }

    // Assign fallback language to "en".
    Object.defineProperty(message, 'defaultLanguage', {
      value: 'en', writable: true
    });

    // Copy function, useful for not writing over the main function.
    Object.defineProperty(message, 'copy', {
      value: function () {
        /* eslint-disable no-new-func */
        var fn = new Function('return ' + message.toString())();
        /* eslint-enable no-new-func */
        var lang;

        Object.defineProperty(fn, 'defaultLanguage', {
          value: 'en', writable: true
        });

        for (lang in message)
          fn[lang] = message[lang];

        return fn
      }
    });

    // Default language messages.
    /* eslint-disable max-len */
    message.en = {
      'GenericError': 'An internal error occurred.',

      // Various errors.
      'MalformedRequest': 'The request was malformed.',
      'InvalidBody': 'The request body is invalid.',
      'SerializerNotFound': 'The serializer for "{id}" does not exist.',
      'InputOnly': 'Input only.',
      'InvalidID': 'An ID is invalid.',
      'DateISO8601': 'Date string must be an ISO 8601 formatted string.',
      'DateInvalid': 'Date value is invalid.',
      'BufferEncoding': 'Buffer value must be a {bufferEncoding}-encoded string.',
      'JSONParse': 'Could not parse value as JSON.',
      'MissingPayload': 'Payload is missing.',
      'SpecifiedIDs': 'IDs should not be specified.',
      'InvalidURL': 'Invalid URL.',
      'RelatedRecordNotFound': 'A related record for the field "{field}" was not found.',
      'CreateRecordsInvalid': 'There are no valid records to be created.',
      'CreateRecordsFail': 'Records could not be created.',
      'CreateRecordMissingID': 'An ID on a created record is missing.',
      'DeleteRecordsMissingID': 'IDs are required for deleting records.',
      'DeleteRecordsInvalid': 'A record to be deleted could not be found.',
      'DeleteRecordsFail': 'Not all records specified could be deleted.',
      'UnspecifiedType': 'The type is unspecified.',
      'InvalidType': 'The requested type "{type}" is not a valid type.',
      'InvalidLink': 'The field "{field}" does not define a link.',
      'InvalidMethod': 'The method "{method}" is unrecognized.',
      'CollisionToOne': 'Multiple records can not have the same to-one link value on the field "{field}".',
      'CollisionDuplicate': 'Duplicate ID "{id}" in the field "{field}".',
      'UpdateRecordMissing': 'A record to be updated could not be found.',
      'UpdateRecordsInvalid': 'There are no valid updates.',
      'UpdateRecordMissingID': 'An ID on an update is missing.',
      'EnforceArrayType': 'The value of "{key}" is invalid, it must be an array with values of type "{type}".',
      'EnforceArray': 'The value of "{key}" is invalid, it must be an array.',
      'EnforceSameID': 'An ID of "{key}" is invalid, it cannot be the same ID of the record.',
      'EnforceSingular': 'The value of "{key}" can not be an array, it must be a singular value.',
      'EnforceValue': 'The value of "{key}" is invalid, it must be a "{type}".',
      'EnforceValueArray': 'A value in the array of "{key}" is invalid, it must be a "{type}".',
      'FieldsFormat': 'Fields format is invalid. It may either be inclusive or exclusive, but not both.',
      'RecordExists': 'A record with ID "{id}" already exists.'
    };

    /**
     * A more performant `Array.prototype.find`.
     *
     * @param {*[]} array
     * @param {Function} fn
     * @return {*}
     */
    var find$1 = function find (array, fn) {
      var i, j, value, result;

      for (i = 0, j = array.length; i < j; i++) {
        value = array[i];
        result = fn(value);
        if (result) return value
      }

      return void 0
    };

    // Modified base64 with "+" as "-" and "/" as "_".
    var charset =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
      'abcdefghijklmnopqrstuvwxyz' +
      '0123456789-_';

    var charsetLength = charset.length;

    // Should be a multiple of 3 to avoid padding characters.
    var keyLength = 3 * 5;

    var generate_id = function generateId () {
      var i, array = [];

      for (i = 0; i < keyLength; i++)
        array.push(charset.charAt(Math.floor(Math.random() * charsetLength)));

      return array.join('')
    };

    var hasCaptureStackTrace = 'captureStackTrace' in Error;

    var errorClass_1 = errorClass;


    function errorClass (name) {
      var ErrorClass;

      if (!name || typeof name !== 'string')
        throw new TypeError('Argument "name" must be a non-empty string.')

      // This is basically `eval`, there's no other way to dynamically define a
      // function name.
      ErrorClass = new Function('setupError',
        'return function ' + name + ' () { ' +
        'if (!(this instanceof ' + name + ')) ' +
        'return new (' + name + '.bind.apply(' + name +
          ', Array.prototype.concat.apply([ null ], arguments))); ' +
        'setupError.apply(this, arguments); ' +
        '}')(setupError);

      ErrorClass.prototype = Object.create(Error.prototype, {
        constructor: nonEnumerableProperty(ErrorClass),
        name: nonEnumerableProperty(name)
      });

      return ErrorClass
    }


    // Internal function to set up an error.
    function setupError (message) {
      if (hasCaptureStackTrace)
        // V8 specific method.
        Error.captureStackTrace(this, this.constructor);
      else
        // Generic way to set the error stack trace.
        Object.defineProperty(this, 'stack',
          nonEnumerableProperty(Error(message).stack));

      // Use the `+` operator with an empty string to implicitly type cast the
      // `message` argument into a string.
      Object.defineProperty(this, 'message',
        nonEnumerableProperty(message !== void 0 ? '' + message : ''));
    }


    function nonEnumerableProperty (value) {
      // The field `enumerable` is `false` by default.
      return {
        value: value,
        writable: true,
        configurable: true
      }
    }

    /**
     * Like `Object.assign`, but faster and more restricted in what it does.
     *
     * @param {Object} target
     * @return {Object}
     */
    var assign = function assign (target) {
      var i, j, key, source;

      for (i = 1, j = arguments.length; i < j; i++) {
        source = arguments[i];

        if (source == null) continue

        for (key in source)
          target[key] = source[key];
      }

      return target
    };

    // Successes.
    var OK = successClass('OK');
    var Created = successClass('Created');
    var Empty = successClass('Empty');


    // Errors.
    var BadRequestError = errorClass_1('BadRequestError');
    var UnauthorizedError = errorClass_1('UnauthorizedError');
    var ForbiddenError = errorClass_1('ForbiddenError');
    var NotFoundError = errorClass_1('NotFoundError');
    var MethodError = errorClass_1('MethodError');
    var NotAcceptableError = errorClass_1('NotAcceptableError');
    var ConflictError = errorClass_1('ConflictError');
    var UnsupportedError = errorClass_1('UnsupportedError');
    var UnprocessableError = errorClass_1('UnprocessableError');


    // White-list native error types. The list is gathered from here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/
    // Reference/Global_Objects/Error
    var nativeErrors = [
      Error, TypeError, ReferenceError, RangeError,
      SyntaxError, EvalError, URIError
    ];


    function successClass (name) {
      return Function('assign', // eslint-disable-line
        'return function ' + name + ' (x) { ' +
        'assign(this, x) }')(assign)
    }

    var response_classes = {
    	OK: OK,
    	Created: Created,
    	Empty: Empty,
    	BadRequestError: BadRequestError,
    	UnauthorizedError: UnauthorizedError,
    	ForbiddenError: ForbiddenError,
    	NotFoundError: NotFoundError,
    	MethodError: MethodError,
    	NotAcceptableError: NotAcceptableError,
    	ConflictError: ConflictError,
    	UnsupportedError: UnsupportedError,
    	UnprocessableError: UnprocessableError,
    	nativeErrors: nativeErrors
    };

    var BadRequestError$1 = response_classes.BadRequestError;
    var UnauthorizedError$1 = response_classes.UnauthorizedError;
    var ForbiddenError$1 = response_classes.ForbiddenError;
    var NotFoundError$1 = response_classes.NotFoundError;
    var MethodError$1 = response_classes.MethodError;
    var NotAcceptableError$1 = response_classes.NotAcceptableError;
    var ConflictError$1 = response_classes.ConflictError;
    var UnsupportedError$1 = response_classes.UnsupportedError;
    var UnprocessableError$1 = response_classes.UnprocessableError;
    var nativeErrors$1 = response_classes.nativeErrors;

    var errors = {
    	BadRequestError: BadRequestError$1,
    	UnauthorizedError: UnauthorizedError$1,
    	ForbiddenError: ForbiddenError$1,
    	NotFoundError: NotFoundError$1,
    	MethodError: MethodError$1,
    	NotAcceptableError: NotAcceptableError$1,
    	ConflictError: ConflictError$1,
    	UnsupportedError: UnsupportedError$1,
    	UnprocessableError: UnprocessableError$1,
    	nativeErrors: nativeErrors$1
    };

    var constants = createCommonjsModule(function (module, exports) {

    var hasSymbol = typeof Symbol === 'function';
    var i, j, key;
    var privateKeys = [
      // This is set on the field definition object internally if it is an
      // automatically generated denormalized field.
      'denormalizedInverse',

      // Used to map update objects to records.
      'updateRecord',

      // Used to map update objects to a hash of linked records.
      'linkedHash'
    ];

    // The primary key that must exist per record, can not be user defined.
    exports.primary = 'id';

    // The names of certain reserved keys per field definition.
    exports.type = 'type';
    exports.link = 'link';
    exports.inverse = 'inverse';
    exports.isArray = 'isArray';

    // Should be reserved for private use.
    for (i = 0, j = privateKeys.length; i < j; i++) {
      key = privateKeys[i];
      exports[key] = hasSymbol ? Symbol(key) : '__' + key + '__';
    }

    // Events.
    exports.change = 'change';
    exports.sync = 'sync';
    exports.connect = 'connect';
    exports.disconnect = 'disconnect';
    exports.failure = 'failure';

    // Methods.
    exports.find = 'find';
    exports.create = 'create';
    exports.update = 'update';
    exports.delete = 'delete';
    });
    var constants_1 = constants.primary;
    var constants_2 = constants.type;
    var constants_3 = constants.link;
    var constants_4 = constants.inverse;
    var constants_5 = constants.isArray;
    var constants_6 = constants.change;
    var constants_7 = constants.sync;
    var constants_8 = constants.connect;
    var constants_9 = constants.disconnect;
    var constants_10 = constants.failure;
    var constants_11 = constants.find;
    var constants_12 = constants.create;
    var constants_13 = constants.update;

    var primary = constants.primary;
    var type = constants.type;
    var link = constants.link;
    var isArray$1 = constants.isArray;
    var inverse = constants.inverse;
    var denormalizedInverse = constants.denormalizedInverse;

    var keys = {
    	primary: primary,
    	type: type,
    	link: link,
    	isArray: isArray$1,
    	inverse: inverse,
    	denormalizedInverse: denormalizedInverse
    };

    var BadRequestError$2 = errors.BadRequestError;


    var primaryKey = keys.primary;
    var typeKey = keys.type;
    var isArrayKey = keys.isArray;

    // For complex types.
    var matchCheck = [
      [ Date, function (a, b) { return a.getTime() === b.getTime() } ],
      [ Buffer, function (a, b) { return a.equals(b) } ],
      [ Object, function (a, b) { return deep_equal(a, b) } ]
    ];

    // For comparing sort order.
    var comparisons = [
      [ Number, function (a, b) { return a - b } ],
      [ String, function (a, b) { return a === b ? 0 : a > b ? 1 : -1 } ],
      [ Boolean, function (a, b) { return a === b ? 0 : a ? 1 : -1 } ],
      [ Date, function (a, b) { return a.getTime() - b.getTime() } ],
      [ Buffer, Buffer.compare ],

      // There is no comparison here that makes sense, so this should simply be a
      // no-op by default.
      [ Object, function () { return 0 } ]
    ];


    // Browser-safe ID generation.
    var generateId_1 = generate_id;


    var applyOptions = function (fields, records, options, meta) {
      var count, record, field, isInclude, isExclude, language, memoizedRecords;
      var i, j;

      if (!options) options = {};
      if (!meta) meta = {};

      language = meta.language;

      // Apply filters.
      if (options) {
        memoizedRecords = records;
        records = [];
        for (i = 0, j = memoizedRecords.length; i < j; i++) {
          record = memoizedRecords[i];
          if (match(fields, options, record))
            records.push(record);
        }
      }

      count = records.length;

      if ('fields' in options) {
        isInclude = !find$1(Object.keys(options.fields),
          function (field) { return !options.fields[field] });
        isExclude = !find$1(Object.keys(options.fields),
          function (field) { return options.fields[field] });

        if (!isInclude && !isExclude)
          throw new BadRequestError$2(message_1('FieldsFormat', language))

        for (i = 0, j = records.length; i < j; i++) {
          record = records[i];
          for (field in record) {
            if (field === primaryKey) continue
            if ((isInclude && !(options.fields.hasOwnProperty(field))) ||
              (isExclude && options.fields.hasOwnProperty(field)))
              delete record[field];
          }
        }
      }

      if ('sort' in options)
        records = records.sort(compare(fields, options.sort));

      if ('limit' in options || 'offset' in options)
        records = records.slice(options.offset, options.limit ?
          (options.offset || 0) + options.limit : records.length);

      records.count = count;

      return records
    };


    function check (type, a, b) {
      var matcher;

      if (b === null) return a === null
      if (!type) return a === b
      if (type.compare) return type.compare(a, b) === 0

      matcher = find$1(matchCheck, function (pair) {
        return pair[0] === type.prototype.constructor
      });
      if (matcher) return matcher[1](a, b)

      return a === b
    }


    function checkValue (fieldDefinition, a) {
      return function (b) {
        return fieldDefinition[isArrayKey] ?
          find$1(a, function (a) {
            return check(fieldDefinition[typeKey], b, a)
          }) : check(fieldDefinition[typeKey], b, a)
      }
    }

    function match (fields, options, record) {
      var key;

      for (key in options)
        switch (key) {
        case 'and':
          if (!matchByLogicalAnd(fields, options[key], record)) return false
          break
        case 'or':
          if (!matchByLogicalOr(fields, options[key], record)) return false
          break
        case 'not':
          if (match(fields, options[key], record)) return false
          break
        case 'range':
          if (!matchByRange(fields, options[key], record)) return false
          break
        case 'match':
          if (!matchByField(fields, options[key], record)) return false
          break
        case 'exists':
          if (!matchByExistence(fields, options[key], record)) return false
          break
        default:
        }

      return true
    }

    function matchByLogicalAnd (fields, clauses, record) {
      var i;

      for (i = 0; i < clauses.length; i++)
        if (!match(fields, clauses[i], record)) return false

      return true
    }

    function matchByLogicalOr (fields, clauses, record) {
      var i;

      for (i = 0; i < clauses.length; i++)
        if (match(fields, clauses[i], record)) return true

      return false
    }

    function matchByField (fields, match, record) {
      var field, matches;

      for (field in match) {
        matches = match[field];
        if (!Array.isArray(matches)) matches = [ matches ];
        if (find$1(matches, checkValue(fields[field], record[field])) === void 0)
          return false
      }

      return true
    }


    function matchByExistence (fields, exists, record) {
      var field, value, isArray;

      for (field in exists) {
        value = record[field];
        isArray = fields[field][isArrayKey];
        if (exists[field]) {
          if (!value) return false
          if (isArray && !value.length) return false
        }
        else {
          if (value && !isArray) return false
          if (isArray && value.length) return false
        }
      }

      return true
    }


    function matchByRange (fields, ranges, record) {
      var compare = {};
      var field, fieldDefinition, fieldType, fieldIsArray, range, value;

      for (field in ranges) {
        fieldDefinition = fields[field];
        fieldType = fieldDefinition[typeKey];
        fieldIsArray = fieldDefinition[isArrayKey];

        // Skip for singular link fields.
        if (!fieldType && !fieldIsArray) continue

        range = ranges[field];
        value = record[field];

        if (value == null) return false
        if (fieldIsArray) value = value ? value.length : 0;

        if (!compare[field])
          compare[field] = !fieldIsArray ? fieldType.compare ||
            find$1(comparisons, findByType(fieldType))[1] :
            find$1(comparisons, findByType(Number))[1];

        if (range[0] !== null && compare[field](value, range[0]) < 0)
          return false

        if (range[1] !== null && compare[field](range[1], value) < 0)
          return false
      }

      return true
    }


    function findByType (type) {
      return function (pair) {
        return pair[0] === type.prototype.constructor
      }
    }


    function compare (fields, sort) {
      var field, compare, a, b, isAscending,
        fieldDefinition, fieldIsArray, fieldType, result;

      return function (x, y) {
        for (field in sort) {
          a = x[field];
          b = y[field];
          isAscending = sort[field];
          fieldDefinition = fields[field];
          fieldIsArray = fieldDefinition[isArrayKey];
          fieldType = fieldDefinition[typeKey];

          if (a === null) return 1
          if (b === null) return -1

          result = 0;

          if (fieldIsArray) result = a.length - b.length;
          else if (fieldType) {
            compare = fieldType.compare ||
              find$1(comparisons, findByType(fieldType))[1];
            if (!compare) throw new Error('Missing "compare" function.')
            result = compare(a, b);
          }

          if (result === 0) continue

          return isAscending ? result : -result
        }

        return 0
      }
    }

    var common = {
    	generateId: generateId_1,
    	applyOptions: applyOptions
    };

    var generateId = common.generateId;


    var inputRecord = function (type, record) {
      var recordTypes = this.recordTypes;
      var primaryKey = this.keys.primary;
      var isArrayKey = this.keys.isArray;
      var fields = recordTypes[type];
      var fieldsArray = Object.getOwnPropertyNames(fields);
      var result = {};
      var i, j, field;

      // Ensure that ID exists on the record.
      result[primaryKey] = primaryKey in record ?
        record[primaryKey] : generateId();

      for (i = 0, j = fieldsArray.length; i < j; i++) {
        field = fieldsArray[i];
        if (!record.hasOwnProperty(field)) {
          result[field] = fields[field][isArrayKey] ? [] : null;
          continue
        }

        result[field] = record[field];
      }

      return result
    };


    var outputRecord = function (type, record) {
      var recordTypes = this.recordTypes;
      var primaryKey = this.keys.primary;
      var isArrayKey = this.keys.isArray;
      var denormalizedInverseKey = this.keys.denormalizedInverse;
      var fields = recordTypes[type];
      var fieldsArray = Object.getOwnPropertyNames(fields);
      var result = {};
      var i, j, field, hasField, value;

      // Ensure that ID exists on the record.
      result[primaryKey] = record[primaryKey];

      for (i = 0, j = fieldsArray.length; i < j; i++) {
        field = fieldsArray[i];
        hasField = record.hasOwnProperty(field);
        value = hasField ? record[field] :
          fields[field][isArrayKey] ? [] : null;

        // Do not enumerate denormalized fields.
        if (fields[field][denormalizedInverseKey]) {
          Object.defineProperty(result, field, {
            configurable: true, writable: true, value: value
          });
          continue
        }

        if (hasField) result[field] = value;
      }

      return result
    };

    var helpers = {
    	inputRecord: inputRecord,
    	outputRecord: outputRecord
    };

    var applyOptions$1 = common.applyOptions;


    var inputRecord$1 = helpers.inputRecord;
    var outputRecord$1 = helpers.outputRecord;


    /**
     * Memory adapter.
     */
    var memory = function (Adapter) {
      function MemoryAdapter (properties) {
        Adapter.call(this, properties);
        if (!this.options) this.options = {};
        if (!('recordsPerType' in this.options))
          this.options.recordsPerType = 1000;
      }

      MemoryAdapter.prototype = new Adapter();

      MemoryAdapter.prototype.connect = function () {
        var Promise = promise.Promise;
        var recordTypes = this.recordTypes;
        var type;

        this.db = {};

        for (type in recordTypes)
          this.db[type] = {};

        return Promise.resolve()
      };


      MemoryAdapter.prototype.disconnect = function () {
        var Promise = promise.Promise;

        delete this.db;
        return Promise.resolve()
      };


      MemoryAdapter.prototype.find = function (type, ids, options, meta) {
        var Promise = promise.Promise;
        var self = this;
        var recordTypes = self.recordTypes;
        var fields = recordTypes[type];
        var collection = self.db[type];
        var records = [];
        var i, j, id, record;

        if (ids && !ids.length) return Adapter.prototype.find.call(self)

        if (ids) for (i = 0, j = ids.length; i < j; i++) {
          id = ids[i];
          if (collection.hasOwnProperty(id)) {
            record = collection[id];

            // LRU update.
            delete collection[id];
            collection[id] = record;

            records.push(outputRecord$1.call(self, type, record));
          }
        }

        else for (id in collection)
          records.push(outputRecord$1.call(self, type, collection[id]));

        return Promise.resolve(applyOptions$1(fields, records, options, meta))
      };


      MemoryAdapter.prototype.create = function (type, records, meta) {
        var Promise = promise.Promise;
        var self = this;
        var message = self.message;
        var recordsPerType = self.options.recordsPerType;
        var primaryKey = self.keys.primary;
        var ConflictError = self.errors.ConflictError;
        var collection = self.db[type];
        var i, j, record, id, ids, language;

        if (!meta) meta = {};
        language = meta.language;

        records = map(records, function (record) {
          return inputRecord$1.call(self, type, record)
        });

        // First check for collisions.
        for (i = 0, j = records.length; i < j; i++) {
          record = records[i];
          id = record[primaryKey];

          if (collection.hasOwnProperty(id))
            return Promise.reject(new ConflictError(
              message('RecordExists', language, { id: id })))
        }

        // Then save it to memory.
        for (i = 0, j = records.length; i < j; i++) {
          record = records[i];
          collection[record[primaryKey]] = record;
        }

        // Clear least recently used records.
        if (recordsPerType) {
          ids = Object.keys(collection);

          if (ids.length > recordsPerType) {
            ids = ids.slice(0, ids.length - recordsPerType);

            for (i = 0, j = ids.length; i < j; i++)
              delete collection[ids[i]];
          }
        }

        return Promise.resolve(map(records, function (record) {
          return outputRecord$1.call(self, type, record)
        }))
      };


      MemoryAdapter.prototype.update = function (type, updates) {
        var Promise = promise.Promise;
        var self = this;
        var primaryKey = self.keys.primary;
        var collection = self.db[type];
        var count = 0;
        var i, j, update, id, record;

        if (!updates.length) return Adapter.prototype.update.call(self)

        for (i = 0, j = updates.length; i < j; i++) {
          update = updates[i];
          id = update[primaryKey];
          record = collection[id];

          if (!record) continue

          count++;
          record = outputRecord$1.call(self, type, record);

          apply_update(record, update);

          // LRU update.
          delete collection[id];

          collection[id] = inputRecord$1.call(self, type, record);
        }

        return Promise.resolve(count)
      };


      MemoryAdapter.prototype.delete = function (type, ids) {
        var Promise = promise.Promise;
        var collection = this.db[type];
        var count = 0;
        var i, j, id;

        if (ids && !ids.length) return Adapter.prototype.delete.call(this)

        if (ids) for (i = 0, j = ids.length; i < j; i++) {
          id = ids[i];
          if (collection[id]) {
            delete collection[id];
            count++;
          }
        }

        else for (id in collection) {
          delete collection[id];
          count++;
        }

        return Promise.resolve(count)
      };

      // Expose utility functions.
      MemoryAdapter.common = common;

      // Expose features for introspection.
      MemoryAdapter.features = {
        logicalOperators: true
      };

      return MemoryAdapter
    };

    /**
     * Adapter is an abstract base class containing methods to be implemented. All
     * records returned by the adapter must have the primary key `id`. The primary
     * key **MUST** be a string or a number.
     *
     * It has one static property, `defaultAdapter` which is a reference to the
     * memory adapter.
     */
    function Adapter (properties) {
      assign(this, properties);
    }


    /**
     * The Adapter should not be instantiated directly, since the constructor
     * function accepts dependencies. The keys which are injected are:
     *
     * - `recordTypes`: an object which enumerates record types and their
     * definitions.
     * - `options`: the options passed to the adapter.
     * - `common`: an object containing all internal utilities.
     * - `errors`: same as static property on Fortune class.
     * - `keys`: an object which enumerates reserved constants for record type
     * - `message`: a function with the signature (`id`, `language`, `data`).
     *
     * These keys are accessible on the instance (`this`).
     *
     * An adapter may expose a `features` static property, which is an object
     * that can contain boolean flags. These are used mainly for checking which
     * additional features may be tested.
     *
     * - `logicalOperators`: whether or not `and` and `or` queries are supported.
     */
    Adapter.prototype.constructor = function () {
      // This exists here only for documentation purposes.
    };

    delete Adapter.prototype.constructor;


    /**
     * The responsibility of this method is to ensure that the record types
     * defined are consistent with the backing data store. If there is any
     * mismatch it should either try to reconcile differences or fail.
     * This method **SHOULD NOT** be called manually, and it should not accept
     * any parameters. This is the time to do setup tasks like create tables,
     * ensure indexes, etc. On successful completion, it should resolve to no
     * value.
     *
     * @return {Promise}
     */
    Adapter.prototype.connect = function () {
      var Promise = promise.Promise;
      return Promise.resolve()
    };


    /**
     * Close the database connection.
     *
     * @return {Promise}
     */
    Adapter.prototype.disconnect = function () {
      var Promise = promise.Promise;
      return Promise.resolve()
    };


    /**
     * Create records. A successful response resolves to the newly created
     * records.
     *
     * **IMPORTANT**: the record must have initial values for each field defined
     * in the record type. For non-array fields, it should be `null`, and for
     * array fields it should be `[]` (empty array). Note that not all fields in
     * the record type may be enumerable, such as denormalized inverse fields, so
     * it may be necessary to iterate over fields using
     * `Object.getOwnPropertyNames`.
     *
     * @param {String} type
     * @param {Object[]} records
     * @param {Object} [meta]
     * @return {Promise}
     */
    Adapter.prototype.create = function () {
      var Promise = promise.Promise;
      return Promise.resolve([])
    };


    /**
     * Find records by IDs and options. If IDs is undefined, it should try to
     * return all records. However, if IDs is an empty array, it should be a
     * no-op. The format of the options may be as follows:
     *
     * ```js
     * {
     *   sort: { ... },
     *   fields: { ... },
     *   exists: { ... },
     *   match: { ... },
     *   range: { ... },
     *
     *   // Limit results to this number. Zero means no limit.
     *   limit: 0,
     *
     *   // Offset results by this much from the beginning.
     *   offset: 0,
     *
     *   // The logical operator "and", may be nested. Optional feature.
     *   and: { ... },
     *
     *   // The logical operator "or", may be nested. Optional feature.
     *   or: { ... },
     *
     *   // Reserved field for custom querying.
     *   query: null
     * }
     * ```
     *
     * For the fields `exists`, `match`, and `range`, the logical operator should
     * be "and". The `query` field may be used on a per adapter basis to provide
     * custom querying functionality.
     *
     * The syntax of the `sort` object is as follows:
     *
     * ```js
     * {
     *   age: false, // descending
     *   name: true // ascending
     * }
     * ```
     *
     * Fields can be specified to be either included or omitted, but not both.
     * Use the values `true` to include, or `false` to omit. The syntax of the
     * `fields` object is as follows:
     *
     * ```js
     * {
     *   name: true, // include this field
     *   age: true // also include this field
     * }
     * ```
     *
     * The `exists` object specifies if a field should exist or not (`true` or
     * `false`). For array fields, it should check for non-zero length.
     *
     * ```js
     * {
     *   name: true, // check if this fields exists
     *   age: false // check if this field doesn't exist
     * }
     * ```
     *
     * The syntax of the `match` object is straightforward:
     *
     * ```js
     * {
     *   name: 'value', // exact match or containment if array
     *   friends: [ 'joe', 'bob' ] // match any one of these values
     * }
     * ```
     *
     * The `range` object is used to filter between lower and upper bounds. It
     * should take precedence over `match`. For array fields, it should apply on
     * the length of the array. For singular link fields, it should not apply.
     *
     * ```js
     * {
     *   range: { // Ranges should be inclusive.
     *     age: [ 18, null ], // From 18 and above.
     *     name: [ 'a', 'd' ], // Starting with letters A through C.
     *     createdAt: [ null, new Date(2016, 0) ] // Dates until 2016.
     *   }
     * }
     * ```
     *
     * The return value of the promise should be an array, and the array **MUST**
     * have a `count` property that is the total number of records without limit
     * and offset.
     *
     * @param {String} type
     * @param {String[]|Number[]} [ids]
     * @param {Object} [options]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Adapter.prototype.find = function () {
      var Promise = promise.Promise;
      var results = [];
      results.count = 0;
      return Promise.resolve(results)
    };


    /**
     * Update records by IDs. Success should resolve to the number of records
     * updated. The `updates` parameter should be an array of objects that
     * correspond to updates by IDs. Each update object must be as follows:
     *
     * ```js
     * {
     *   // ID to update. Required.
     *   id: 1,
     *
     *   // Replace a value of a field. Use a `null` value to unset a field.
     *   replace: { name: 'Bob' },
     *
     *   // Append values to an array field. If the value is an array, all of
     *   // the values should be pushed.
     *   push: { pets: 1 },
     *
     *   // Remove values from an array field. If the value is an array, all of
     *   // the values should be removed.
     *   pull: { friends: [ 2, 3 ] },
     *
     *   // The `operate` field is specific to the adapter. This should take
     *   // precedence over all of the above. Warning: using this may bypass
     *   // field definitions and referential integrity. Use at your own risk.
     *   operate: null
     * }
     * ```
     *
     * Things to consider:
     *
     * - `push` and `pull` can not be applied to non-arrays.
     * - The same value in the same field should not exist in both `push` and
     * `pull`.
     *
     * @param {String} type
     * @param {Object[]} updates
     * @param {Object} [meta]
     * @return {Promise}
     */
    Adapter.prototype.update = function () {
      var Promise = promise.Promise;
      return Promise.resolve(0)
    };


    /**
     * Delete records by IDs, or delete the entire collection if IDs are
     * undefined or empty. Success should resolve to the number of records
     * deleted.
     *
     * @param {String} type
     * @param {String[]|Number[]} [ids]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Adapter.prototype.delete = function () {
      var Promise = promise.Promise;
      return Promise.resolve(0)
    };


    /**
     * Begin a transaction to write to the data store. This method is optional
     * to implement, but useful for ACID. It should resolve to an object
     * containing all of the adapter methods.
     *
     * @return {Promise}
     */
    Adapter.prototype.beginTransaction = function () {
      var Promise = promise.Promise;
      return Promise.resolve(this)
    };


    /**
     * End a transaction. This method is optional to implement.
     * It should return a Promise with no value if the transaction is
     * completed successfully, or reject the promise if it failed.
     *
     * @param {Error} [error] - If an error is passed, roll back the transaction.
     * @return {Promise}
     */
    Adapter.prototype.endTransaction = function () {
      var Promise = promise.Promise;
      return Promise.resolve()
    };


    /**
     * Apply operators on a record, then return the record. If you make use of
     * update operators, you should implement this method so that the internal
     * implementation of update requests get records in the correct state. This
     * method is optional to implement.
     *
     * @param {Object} record
     * @param {Object} operators - The `operate` field on an `update` object.
     * @return {Object}
     */
    Adapter.prototype.applyOperators = function (record) {
      return record
    };


    // Expose the default adapter.
    Adapter.DefaultAdapter = memory(Adapter);

    // Expose features object.
    Adapter.features = {};

    var adapter = Adapter;

    var change = constants.change;
    var sync = constants.sync;
    var connect = constants.connect;
    var disconnect = constants.disconnect;
    var failure = constants.failure;

    var events = {
    	change: change,
    	sync: sync,
    	connect: connect,
    	disconnect: disconnect,
    	failure: failure
    };

    var find$2 = constants.find;
    var create = constants.create;
    var update = constants.update;
    var delete_1 = constants.delete;

    var methods = {
    	find: find$2,
    	create: create,
    	update: update,
    	delete: delete_1
    };

    var cast_to_number = function castToNumber (id) {
      // Stolen from jQuery source code:
      // https://api.jquery.com/jQuery.isNumeric/
      var float = Number.parseFloat(id);
      return id - float + 1 >= 0 ? float : id
    };

    var BadRequestError$3 = errors.BadRequestError;
    var buffer = Buffer.from || function (input, encoding) {
      return new Buffer(input, encoding)
    };


    var castByType = [
      [ Number, function (x) { return parseFloat(x) } ],

      [ Date, function (x, options) {
        if (typeof x === 'string') {
          x = Date.parse(x);
          if (Number.isNaN(x)) throw new BadRequestError$3(
            message_1('DateISO8601', options.language))
        }

        x = new Date(x);
        if (Number.isNaN(x.getTime())) throw new BadRequestError$3(
          message_1('DateInvalid', options.language))

        return x
      } ],

      [ Buffer, function (x, options) {
        var bufferEncoding = options && options.bufferEncoding ?
          options.bufferEncoding : 'base64';

        if (typeof x !== 'string') throw new BadRequestError$3(
          message_1('BufferEncoding', options.language, {
            bufferEncoding: bufferEncoding
          }))

        return buffer(x, bufferEncoding)
      } ],

      [ Boolean, function (x) {
        if (typeof x === 'string')
          return (/^(?:true|1|yes|t|y)$/i).test(x)
        return Boolean(x)
      } ],

      [ Object, function (x, options) {
        if (typeof x === 'string') return JSON.parse(x)
        if (typeof x === 'object') return x
        throw new BadRequestError$3(message_1('JSONParse', options.language))
      } ],

      [ String, function (x) { return '' + x } ]
    ];


    /**
     * Cast a value to the given type. Skip if type is missing or value is null.
     *
     * @param {*} value
     * @param {Function} type - Constructor function.
     * @param {Object} [options]
     * @return {*}
     */
    var cast_value = function castValue (value, type, options) {
      var i, j, pair, cast;

      // Special case for empty string: it should be null.
      if (value === '') return null

      if (type)
        for (i = 0, j = castByType.length; i < j; i++) {
          pair = castByType[i];
          if (pair[0] === type) {
            cast = pair[1];
            break
          }
        }
      else return cast_to_number(value)

      return cast && value !== null ? cast(value, options) : value
    };

    /**
     * A fast deep clone function, which covers mostly serializable objects.
     *
     * @param {*}
     * @return {*}
     */
    var clone = function clone (input) {
      var output, key, value, isArray;

      if (Array.isArray(input)) isArray = true;
      else if (input == null || Object.getPrototypeOf(input) !== Object.prototype)
        return input

      output = isArray ? [] : {};

      for (key in input) {
        value = input[key];
        output[key] = value !== null && value !== undefined &&
          Object.getPrototypeOf(value) === Object.prototype ||
          Array.isArray(value) ? clone(value) : value;
      }

      return output
    };

    var OK$1 = response_classes.OK;
    var Created$1 = response_classes.Created;
    var Empty$1 = response_classes.Empty;

    var success = {
    	OK: OK$1,
    	Created: Created$1,
    	Empty: Empty$1
    };

    /**
     * A more performant `Array.prototype.filter`.
     *
     * @param {*[]} array
     * @param {Function} fn
     * @return {Boolean}
     */
    var filter = function filter (array, fn) {
      var i, j, k = [], l = 0;

      for (i = 0, j = array.length; i < j; i++)
        if (fn(array[i], i, array))
          k[l++] = array[i];

      return k
    };

    /**
     * A more performant `Array.prototype.includes`.
     *
     * @param {*[]} array
     * @param {*} value
     * @return {Boolean}
     */
    var includes = function includes (array, value) {
      var i, j;

      for (i = 0, j = array.length; i < j; i++)
        if (array[i] === value) return true

      return false
    };

    /**
     * A more performant `Array.prototype.reduce`.
     *
     * @param {*[]} array
     * @param {Function} fn
     * @param {*} [initialValue]
     * @return {Boolean}
     */
    var reduce = function reduce (array, fn, initialValue) {
      var i, j, k = initialValue;

      for (i = 0, j = array.length; i < j; i++)
        k = fn(k, array[i], i, array);

      return k
    };

    /**
     * Return an array with unique values. Values must be primitive, and the array
     * may not be sparse.
     *
     * @param {Array}
     * @return {Array}
     */
    var unique = function unique (a) {
      var seen = {};
      var result = [];
      var i, j, k;

      for (i = 0, j = a.length; i < j; i++) {
        k = a[i];
        if (seen.hasOwnProperty(k)) continue
        result.push(k);
        seen[k] = true;
      }

      return result
    };

    var common$1 = {
      // Keys
      constants: constants,
      keys: keys,
      events: events,
      methods: methods,

      // Utility functions
      assign: assign,
      castToNumber: cast_to_number,
      castValue: cast_value,
      clone: clone,
      deepEqual: deep_equal,
      generateId: generate_id,

      // i18n
      message: message_1,

      // Typed responses
      responses: response_classes,
      errors: errors,
      successes: success,

      // Arrays
      filter: filter,
      find: find$1,
      includes: includes,
      map: map,
      pull: pull,
      reduce: reduce,
      unique: unique
    };

    /**
     * A singleton for the adapter. For internal use.
     */
    function AdapterSingleton (properties) {
      var CustomAdapter, input;

      input = Array.isArray(properties.adapter) ?
        properties.adapter : [ properties.adapter ];

      if (typeof input[0] !== 'function')
        throw new TypeError('The adapter must be a function.')

      CustomAdapter = adapter.prototype
        .isPrototypeOf(input[0].prototype) ? input[0] : input[0](adapter);

      if (!adapter.prototype.isPrototypeOf(CustomAdapter.prototype))
        throw new TypeError('The adapter must inherit the Adapter class.')

      return new CustomAdapter({
        options: input[1] || {},
        recordTypes: properties.recordTypes,
        features: CustomAdapter.features,
        common: common$1,
        errors: errors,
        keys: keys,
        message: properties.message,
        Promise: promise.Promise
      })
    }


    var singleton = AdapterSingleton;

    var primaryKey$1 = keys.primary;
    var typeKey$1 = keys.type;
    var linkKey = keys.link;
    var inverseKey = keys.inverse;
    var isArrayKey$1 = keys.isArray;

    var plainObject = {};
    var nativeTypes = [ String, Number, Boolean, Date, Object, Buffer ];
    var stringifiedTypes = map(nativeTypes, function (nativeType) {
      return nativeType.name.toLowerCase()
    });


    /**
     * Given a hash of field definitions, validate that the definitions are in the
     * correct format.
     *
     * @param {Object} fields
     * @return {Object}
     */
    var validate$1 = function validate (fields) {
      var key;

      if (typeof fields !== 'object')
        throw new TypeError('Type definition must be an object.')

      for (key in fields) validateField(fields, key);

      return fields
    };


    /**
     * Parse a field definition.
     *
     * @param {Object} fields
     * @param {String} key
     */
    function validateField (fields, key) {
      var value = fields[key] = castShorthand(fields[key]);

      if (typeof value !== 'object' || value.constructor !== Object)
        throw new TypeError('The definition of "' + key + '" must be an object.')

      if (key === primaryKey$1)
        throw new Error('Can not define primary key "' + primaryKey$1 + '".')

      if (key in plainObject)
        throw new Error('Can not define field name "' + key +
          '" which is in Object.prototype.')

      if (!value[typeKey$1] && !value[linkKey])
        throw new Error('The definition of "' + key + '" must contain either ' +
          'the "' + typeKey$1 + '" or "' + linkKey + '" property.')

      if (value[typeKey$1] && value[linkKey])
        throw new Error('Can not define both "' + typeKey$1 + '" and "' + linkKey +
          '" on "' + key + '".')

      if (value[typeKey$1]) {
        if (typeof value[typeKey$1] === 'string')
          value[typeKey$1] = nativeTypes[
            stringifiedTypes.indexOf(value[typeKey$1].toLowerCase())];

        if (typeof value[typeKey$1] !== 'function')
          throw new Error('The "' + typeKey$1 + '" on "' + key +
            '" must be a function.')

        if (!find$1(nativeTypes, function (type) {
          return type === value[typeKey$1].prototype.constructor
        }))
          throw new Error('The "' + typeKey$1 + '" on "' + key + '" must inherit ' +
            'from a valid native type.')

        if (value[inverseKey])
          throw new Error('The field "' + inverseKey + '" may not be defined ' +
            'on "' + key + '".')
      }

      if (value[linkKey]) {
        if (typeof value[linkKey] !== 'string')
          throw new TypeError('The "' + linkKey + '" on "' + key +
            '" must be a string.')

        if (value[inverseKey] && typeof value[inverseKey] !== 'string')
          throw new TypeError('The "' + inverseKey + '" on "' + key + '" ' +
            'must be a string.')
      }

      if (value[isArrayKey$1] && typeof value[isArrayKey$1] !== 'boolean')
        throw new TypeError('The key "' + isArrayKey$1 + '" on "' + key + '" ' +
            'must be a boolean.')
    }


    /**
     * Cast shorthand definition to standard definition.
     *
     * @param {*} value
     * @return {Object}
     */
    function castShorthand (value) {
      var obj;

      if (typeof value === 'string') obj = { link: value };
      else if (typeof value === 'function') obj = { type: value };
      else if (Array.isArray(value)) {
        obj = {};

        if (value[1]) obj.inverse = value[1];
        else obj.isArray = true;

        // Extract type or link.
        if (Array.isArray(value[0])) {
          obj.isArray = true;
          value = value[0][0];
        }
        else value = value[0];

        if (typeof value === 'string') obj.link = value;
        else if (typeof value === 'function') obj.type = value;
      }
      else return value

      return obj
    }

    var linkKey$1 = keys.link;
    var inverseKey$1 = keys.inverse;
    var isArrayKey$2 = keys.isArray;
    var denormalizedInverseKey = keys.denormalizedInverse;


    // Generate denormalized inverse field name.
    var denormalizedPrefix = '__';
    var denormalizedDelimiter = '_';
    var denormalizedPostfix = '_inverse';


    /**
     * Analyze the `types` object to see if `link` and `inverse` values are
     * valid. Also assign denormalized inverse fields.
     *
     * @param {Object} types
     * @return {Object}
     */
    var ensure_types = function ensureTypes (types) {
      var denormalizedFields = {};
      var type, field, definition, linkedFields,
        denormalizedField, denormalizedDefinition;

      for (type in types)
        for (field in types[type]) {
          definition = types[type][field];

          if (!(linkKey$1 in definition)) continue

          if (!types.hasOwnProperty(definition[linkKey$1]))
            throw new Error('The value for "' + linkKey$1 + '" on "' + field +
              '" in type "' + type +
              '" is invalid, the record type does not exist.')

          linkedFields = types[definition[linkKey$1]];

          if (inverseKey$1 in definition) {
            if (!linkedFields.hasOwnProperty(definition[inverseKey$1]))
              throw new Error('The value for "' + inverseKey$1 + '" on "' + field +
                '" in type "' + type + '" is invalid, the field does not exist.')

            if (linkedFields[definition[inverseKey$1]][inverseKey$1] !== field)
              throw new Error('The value for "' + inverseKey$1 + '" on "' + field +
                '" in type "' + type +
                '" is invalid, the inversely related field must define its ' +
                'inverse as "' + field + '".')

            if (linkedFields[definition[inverseKey$1]][linkKey$1] !== type)
              throw new Error('The value for "' + linkKey$1 + '" on "' + field +
                '" in type "' + type +
                '" is invalid, the inversely related field must define its link ' +
                'as "' + type + '".')

            continue
          }

          // Need to assign denormalized inverse. The denormalized inverse field
          // is basically an automatically assigned inverse field that should
          // not be visible to the client, but exists in the data store.
          denormalizedField = denormalizedPrefix + type +
            denormalizedDelimiter + field + denormalizedPostfix;

          denormalizedFields[denormalizedField] = true;

          Object.defineProperty(definition, inverseKey$1, {
            value: denormalizedField
          });

          denormalizedDefinition = {};
          denormalizedDefinition[linkKey$1] = type;
          denormalizedDefinition[inverseKey$1] = field;
          denormalizedDefinition[isArrayKey$2] = true;
          denormalizedDefinition[denormalizedInverseKey] = true;

          Object.defineProperty(linkedFields, denormalizedField, {
            value: denormalizedDefinition
          });
        }

      return denormalizedFields
    };

    var ConflictError$2 = errors.ConflictError;


    var linkKey$2 = keys.link;
    var isArrayKey$3 = keys.isArray;
    var inverseKey$2 = keys.inverse;

    /**
     * Do some validation on records to be created or updated to determine
     * if there are any records which have overlapping to-one relationships,
     * or non-unique array relationships.
     *
     * @param {Object[]} records
     * @param {Object} fields
     * @param {Object} links
     * @param {Object} meta
     */
    var validate_records = function validateRecords (records, fields, links, meta) {
      var recordTypes = this.recordTypes;
      var language = meta.language;
      var toOneMap = {};
      var i, j, k, l, m, n, value, field, record, id, ids, seen,
        fieldLink, fieldInverse, fieldIsArray, inverseIsArray;

      for (i = 0, j = links.length; i < j; i++) {
        field = links[i];
        fieldLink = fields[field][linkKey$2];
        fieldInverse = fields[field][inverseKey$2];
        fieldIsArray = fields[field][isArrayKey$3];
        inverseIsArray = recordTypes[fieldLink][fieldInverse][isArrayKey$3];

        if (fieldIsArray)
          for (k = 0, l = records.length; k < l; k++) {
            record = records[k];
            if (!Array.isArray(record[field])) continue
            ids = record[field];
            seen = {};

            for (m = 0, n = ids.length; m < n; m++) {
              id = ids[m];
              if (seen.hasOwnProperty(id)) throw new ConflictError$2(
                message_1('CollisionDuplicate', language, { id: id, field: field }))
              else seen[id] = true;
            }
          }

        if (!inverseIsArray) {
          toOneMap[field] = {};

          for (k = 0, l = records.length; k < l; k++) {
            record = records[k];
            value = record[field];
            ids = Array.isArray(value) ? value : value ? [ value ] : [];

            for (m = 0, n = ids.length; m < n; m++) {
              id = ids[m];
              if (!toOneMap[field].hasOwnProperty(id)) toOneMap[field][id] = true;
              else throw new ConflictError$2(
                message_1('CollisionToOne', language, { field: field }))
            }
          }
        }
      }
    };

    var BadRequestError$4 = errors.BadRequestError;


    var primaryKey$2 = keys.primary;
    var linkKey$3 = keys.link;
    var isArrayKey$4 = keys.isArray;
    var inverseKey$3 = keys.inverse;

    var check_links = checkLinks;


    /**
     * Ensure referential integrity by checking if related records exist.
     *
     * @param {Object} transaction
     * @param {Object} record
     * @param {Object} fields
     * @param {String[]} links - An array of strings indicating which fields are
     * links. Need to pass this so that it doesn't get computed each time.
     * @param {Object} [meta]
     * @return {Promise}
     */
    function checkLinks (transaction, record, fields, links, meta) {
      var Promise = promise.Promise;
      var enforceLinks = this.options.settings.enforceLinks;

      return Promise.all(map(links, function (field) {
        var ids = Array.isArray(record[field]) ? record[field] :
          !record.hasOwnProperty(field) || record[field] === null ?
            [] : [ record[field] ];
        var fieldLink = fields[field][linkKey$3];
        var fieldInverse = fields[field][inverseKey$3];
        var findOptions = { fields: {} };

        // Don't need the entire records.
        findOptions.fields[fieldInverse] = true;

        return new Promise(function (resolve, reject) {
          if (!ids.length) return resolve()

          return transaction.find(fieldLink, ids, findOptions, meta)

            .then(function (records) {
              var recordIds, i, j;

              if (enforceLinks) {
                recordIds = unique(map(records, function (record) {
                  return record[primaryKey$2]
                }));

                for (i = 0, j = ids.length; i < j; i++)
                  if (!includes(recordIds, ids[i]))
                    return reject(new BadRequestError$4(
                      message_1('RelatedRecordNotFound', meta.language,
                        { field: field })
                    ))
              }

              return resolve(records)
            })
        })
      }))

        .then(function (partialRecords) {
          var object = {}, records, i, j;

          for (i = 0, j = partialRecords.length; i < j; i++) {
            records = partialRecords[i];

            if (records) object[links[i]] =
            fields[links[i]][isArrayKey$4] ? records : records[0];
          }

          return object
        })
    }

    var BadRequestError$5 = errors.BadRequestError;


    var primaryKey$3 = keys.primary;
    var typeKey$2 = keys.type;
    var linkKey$4 = keys.link;
    var isArrayKey$5 = keys.isArray;


    // Check input values.
    var checkInput = [
      [ String, function (value) {
        return typeof value === 'string'
      } ],
      [ Number, function (value) {
        return typeof value === 'number'
      } ],
      [ Boolean, function (value) {
        return typeof value === 'boolean'
      } ],
      [ Date, function (value) {
        return value && typeof value.getTime === 'function' &&
          !Number.isNaN(value.getTime())
      } ],
      [ Object, function (value) {
        return value !== null && typeof value === 'object'
      } ],
      [ Buffer, function (value) {
        return isBuffer(value)
      } ]
    ];


    /**
     * Throw errors for mismatched types on a record.
     *
     * @param {String} type
     * @param {Object} record
     * @param {Object} fields
     * @param {Object} meta
     * @return {Object}
     */
    var enforce = function enforce (type, record, fields, meta) {
      var i, j, key, value, fieldDefinition, language;

      if (!meta) meta = {};
      language = meta.language;

      for (key in record) {
        fieldDefinition = fields[key];

        if (!fieldDefinition) {
          if (key !== primaryKey$3) delete record[key];
          continue
        }

        value = record[key];

        if (fieldDefinition[typeKey$2]) {
          if (fieldDefinition[isArrayKey$5]) {
            // If the field is defined as an array but the value is not,
            // then throw an error.
            if (!Array.isArray(value))
              throw new BadRequestError$5(message_1('EnforceArrayType', language, {
                key: key, type: fieldDefinition[typeKey$2].name
              }))

            for (i = 0, j = value.length; i < j; i++)
              checkValue$1(fieldDefinition, key, value[i], meta);
          }
          else checkValue$1(fieldDefinition, key, value, meta);

          continue
        }

        if (fieldDefinition[linkKey$4]) {
          if (fieldDefinition[isArrayKey$5]) {
            if (!Array.isArray(value))
              throw new BadRequestError$5(
                message_1('EnforceArray', language, { key: key }))

            if (type === fieldDefinition[linkKey$4] &&
              find$1(value, matchId(record[primaryKey$3])))
              throw new BadRequestError$5(
                message_1('EnforceSameID', language, { key: key }))

            continue
          }

          if (Array.isArray(value))
            throw new BadRequestError$5(
              message_1('EnforceSingular', language, { key: key }))

          if (type === fieldDefinition[linkKey$4] && record[primaryKey$3] === value)
            throw new BadRequestError$5(
              message_1('EnforceSameID', language, { key: key }))

          continue
        }
      }

      return record
    };


    function checkValue$1 (field, key, value, meta) {
      var language = meta.language;
      var check;
      var type = field[typeKey$2];

      // Skip `null` case.
      if (value === null) return

      check = find$1(checkInput, function (pair) {
        return pair[0] === type
      });
      if (check) check = check[1];
      else check = type;

      // Fields may be nullable, but if they're defined, then they must be defined
      // properly.
      if (!check(value)) throw new BadRequestError$5(
        message_1(field[isArrayKey$5] ? 'EnforceValueArray' : 'EnforceValue',
          language, { key: key, type: type.displayName || type.name }))
    }


    function matchId (a) {
      return function (b) {
        return a === b
      }
    }

    var primaryKey$4 = keys.primary;


    // Get a related update object by ID, or return a new one if not found.
    var getUpdate = function (type, id, updates, cache) {
      var update;

      if (cache[type] && cache[type][id])
        return find$1(updates[type],
          function (update) {
            return update[primaryKey$4] === id
          })

      update = { id: id };
      if (!updates[type]) updates[type] = [];
      updates[type].push(update);
      cache[type] = {};
      cache[type][id] = true;
      return update
    };


    // Add an ID to an update object.
    var addId = function (id, update, field, isArray) {
      if (isArray) {
        if (!update.push) update.push = {};
        if (!update.push[field]) update.push[field] = [];
        update.push[field].push(id);
        return
      }

      if (!update.replace) update.replace = {};
      update.replace[field] = id;
    };


    // Remove an ID from an update object.
    var removeId = function (id, update, field, isArray) {
      if (isArray) {
        if (!update.pull) update.pull = {};
        if (!update.pull[field]) update.pull[field] = [];
        update.pull[field].push(id);
        return
      }

      if (!update.replace) update.replace = {};
      update.replace[field] = null;
    };


    // Remove denormalized fields from appearing in updates on change events.
    var scrubDenormalizedUpdates = function (updates, denormalizedFields) {
      var i, update, operation, field;

      // Iterate in reverse, so we can easily remove indices in the array.
      for (i = updates.length; i--;) {
        update = updates[i];

        for (operation in update) {
          if (operation === primaryKey$4) continue

          for (field in update[operation])
            if (field in denormalizedFields)
              delete update[operation][field];

          if (!Object.keys(update[operation]).length)
            delete update[operation];
        }

        // If only the primary key is present, then remove the entire update.
        if (Object.keys(update).length === 1) updates.splice(i, 1);
      }
    };

    var update_helpers = {
    	getUpdate: getUpdate,
    	addId: addId,
    	removeId: removeId,
    	scrubDenormalizedUpdates: scrubDenormalizedUpdates
    };

    var BadRequestError$6 = errors.BadRequestError;


    var scrubDenormalizedUpdates$1 = update_helpers.scrubDenormalizedUpdates;
    var getUpdate$1 = update_helpers.getUpdate;
    var addId$1 = update_helpers.addId;


    var changeEvent = constants.change;
    var createMethod = constants.create;
    var updateMethod = constants.update;
    var primaryKey$5 = constants.primary;
    var linkKey$5 = constants.link;
    var inverseKey$4 = constants.inverse;
    var isArrayKey$6 = constants.isArray;
    var denormalizedInverseKey$1 = constants.denormalizedInverse;


    /**
     * Extend context so that it includes the parsed records and create them.
     * This mutates the response object.
     *
     * @return {Promise}
     */
    var create$1 = function (context) {
      var Promise = promise.Promise;
      var self = this;
      var denormalizedFields = self.denormalizedFields;
      var recordTypes = self.recordTypes;
      var hooks = self.hooks;
      var updates = {};
      var links = [];
      var transaction, records, type, meta, hook, fields, language;

      // Start a promise chain.
      return Promise.resolve(context.request.payload)

        .then(function (payload) {
          var i, j, field;

          records = payload;

          if (!records || !records.length)
            throw new BadRequestError$6(
              message_1('CreateRecordsInvalid', language))

          type = context.request.type;
          meta = context.request.meta;
          transaction = context.transaction;
          language = meta.language;

          hook = hooks[type];
          fields = recordTypes[type];

          for (field in fields) {
            if (linkKey$5 in fields[field])
              links.push(field);

            // Delete denormalized inverse fields.
            if (denormalizedInverseKey$1 in fields[field])
              for (i = 0, j = records.length; i < j; i++)
                delete records[i][field];
          }

          return typeof hook[0] === 'function' ?
            Promise.all(map(records, function (record) {
              return hook[0](context, record)
            })) : records
        })

        .then(function (results) {
          return Promise.all(map(results, function (record, i) {
            if (record && typeof record === 'object') records[i] = record;
            else record = records[i];

            // Enforce the fields.
            enforce(type, record, fields, meta);

            // Ensure referential integrity.
            return check_links.call(self, transaction, record, fields, links, meta)
          }))
        })

        .then(function () {
          validate_records.call(self, records, fields, links, meta);
          return transaction.create(type, records, meta)
        })

        .then(function (createdRecords) {
          var i, j, k, l, m, n, record, field, inverseField,
            linkedType, linkedIsArray, linkedIds, id;

          // Update inversely linked records on created records.
          // Trying to batch updates to be as few as possible.
          var idCache = {};

          // Adapter must return something.
          if (!createdRecords.length)
            throw new BadRequestError$6(
              message_1('CreateRecordsFail', language))

          records = createdRecords;

          Object.defineProperty(context.response, 'records', {
            configurable: true,
            value: records
          });

          // Iterate over each record to generate updates object.
          for (i = 0, j = records.length; i < j; i++) {
            record = records[i];

            // Each created record must have an ID.
            if (!(primaryKey$5 in record))
              throw new Error(
                message_1('CreateRecordMissingID', language))

            for (k = 0, l = links.length; k < l; k++) {
              field = links[k];
              inverseField = fields[field][inverseKey$4];

              if (!record.hasOwnProperty(field) || !inverseField) continue

              linkedType = fields[field][linkKey$5];
              linkedIsArray =
              recordTypes[linkedType][inverseField][isArrayKey$6];
              linkedIds = Array.isArray(record[field]) ?
                record[field] : [ record[field] ];

              // Do some initialization.
              if (!updates[linkedType]) updates[linkedType] = [];
              if (!idCache[linkedType]) idCache[linkedType] = {};

              for (m = 0, n = linkedIds.length; m < n; m++) {
                id = linkedIds[m];
                if (id !== null)
                  addId$1(record[primaryKey$5],
                    getUpdate$1(linkedType, id, updates, idCache),
                    inverseField, linkedIsArray);
              }
            }
          }

          return Promise.all(map(Object.keys(updates), function (type) {
            return updates[type].length ?
              transaction.update(type, updates[type], meta) :
              null
          }))
        })

        .then(function () {
          var eventData = {}, currentType;

          eventData[createMethod] = {};
          eventData[createMethod][type] = records;

          for (currentType in updates) {
            scrubDenormalizedUpdates$1(updates[currentType], denormalizedFields);

            if (!updates[currentType].length) continue

            if (!(updateMethod in eventData)) eventData[updateMethod] = {};
            eventData[updateMethod][currentType] = updates[currentType];
          }

          // Summarize changes during the lifecycle of the request.
          self.emit(changeEvent, eventData);

          return context
        })
    };

    var NotFoundError$2 = errors.NotFoundError;


    var scrubDenormalizedUpdates$2 = update_helpers.scrubDenormalizedUpdates;
    var getUpdate$2 = update_helpers.getUpdate;
    var removeId$1 = update_helpers.removeId;


    var changeEvent$1 = constants.change;
    var deleteMethod = constants.delete;
    var updateMethod$1 = constants.update;
    var primaryKey$6 = constants.primary;
    var linkKey$6 = constants.link;
    var inverseKey$5 = constants.inverse;
    var isArrayKey$7 = constants.isArray;


    /**
     * Delete records. This does not mutate context.
     *
     * @return {Promise}
     */
    var _delete = function (context) {
      var Promise = promise.Promise;
      var self = this;
      var denormalizedFields = self.denormalizedFields;
      var request = context.request;
      var type = request.type;
      var ids = request.ids;
      var meta = request.meta;
      var language = meta.language;
      var recordTypes = self.recordTypes;
      var hooks = self.hooks;
      var updates = {};
      var fields = recordTypes[type];
      var hook = hooks[type];
      var links = [];
      var transaction, field, records;

      transaction = context.transaction;

      for (field in fields)
        if (linkKey$6 in fields[field]) links.push(field);

      if (!ids || !ids.length)
        throw new NotFoundError$2(message_1('DeleteRecordsMissingID', language))

      return transaction.find(type, ids, null, meta)

        .then(function (foundRecords) {
          records = foundRecords;

          if (records.length < ids.length)
            throw new NotFoundError$2(message_1('DeleteRecordsInvalid', language))

          Object.defineProperty(context.response, 'records', {
            configurable: true,
            value: records
          });

          return typeof hook[0] === 'function' ?
            Promise.all(map(records, function (record) {
              return hook[0](context, record)
            })) : records
        })

        .then(function () {
          return transaction.delete(type, ids, meta)
        })

        .then(function (count) {
          var i, j, k, l, m, n, record, field, id, inverseField,
            linkedType, linkedIsArray, linkedIds;

          // Remove all instances of the deleted IDs in all records.
          var idCache = {};

          // Sanity check.
          if (count < ids.length)
            throw new Error(message_1('DeleteRecordsFail', language))

          // Loop over each record to generate updates object.
          for (i = 0, j = records.length; i < j; i++) {
            record = records[i];
            for (k = 0, l = links.length; k < l; k++) {
              field = links[k];
              inverseField = fields[field][inverseKey$5];

              if (!record.hasOwnProperty(field) || !inverseField) continue

              linkedType = fields[field][linkKey$6];
              linkedIsArray = recordTypes[linkedType][inverseField][isArrayKey$7];
              linkedIds = Array.isArray(record[field]) ?
                record[field] : [ record[field] ];

              // Do some initialization.
              if (!updates[linkedType]) updates[linkedType] = [];
              if (!idCache[linkedType]) idCache[linkedType] = {};

              for (m = 0, n = linkedIds.length; m < n; m++) {
                id = linkedIds[m];
                if (id !== null)
                  removeId$1(record[primaryKey$6],
                    getUpdate$2(linkedType, id, updates, idCache),
                    inverseField, linkedIsArray);
              }
            }
          }

          return Promise.all(map(Object.keys(updates), function (type) {
            return updates[type].length ?
              transaction.update(type, updates[type], meta) :
              null
          }))
        })

        .then(function () {
          var eventData = {}, currentType;

          eventData[deleteMethod] = {};
          eventData[deleteMethod][type] = ids;

          for (currentType in updates) {
            scrubDenormalizedUpdates$2(updates[currentType], denormalizedFields);

            if (!updates[currentType].length) continue

            if (!(updateMethod$1 in eventData)) eventData[updateMethod$1] = {};
            eventData[updateMethod$1][currentType] = updates[currentType];
          }

          // Summarize changes during the lifecycle of the request.
          self.emit(changeEvent$1, eventData);

          return context
        })
    };

    var scrubDenormalizedUpdates$3 = update_helpers.scrubDenormalizedUpdates;
    var getUpdate$3 = update_helpers.getUpdate;
    var addId$2 = update_helpers.addId;
    var removeId$2 = update_helpers.removeId;


    var NotFoundError$3 = errors.NotFoundError;
    var BadRequestError$7 = errors.BadRequestError;






    var changeEvent$2 = constants.change;
    var updateMethod$2 = constants.update;
    var primaryKey$7 = constants.primary;
    var linkKey$7 = constants.link;
    var inverseKey$6 = constants.inverse;
    var isArrayKey$8 = constants.isArray;
    var denormalizedInverseKey$2 = constants.denormalizedInverse;
    var updateRecordKey = constants.updateRecord;
    var linkedHashKey = constants.linkedHash;


    /**
     * Do updates. First, it must find the records to update, then run hooks
     * and validation, then apply the update as well as links on related records.
     *
     * @return {Promise}
     */
    var update$1 = function (context) {
      var Promise = promise.Promise;
      var self = this;
      var denormalizedFields = self.denormalizedFields;
      var adapter = self.adapter;
      var recordTypes = self.recordTypes;
      var hooks = self.hooks;

      var relatedUpdates = {};
      var hookedUpdates = [];

      var links = [];
      var transaction, updates, fields, hook, type, meta, language;

      // Start a promise chain.
      return Promise.resolve(context.request.payload)

        .then(function (payload) {
          var i, j, update, field;

          updates = payload;
          validateUpdates(updates, context.request.meta);

          type = context.request.type;
          meta = context.request.meta;
          transaction = context.transaction;
          language = meta.language;

          fields = recordTypes[type];
          hook = hooks[type];

          // Delete denormalized inverse fields, can't be updated.
          for (field in fields) {
            if (linkKey$7 in fields[field]) links.push(field);
            if (denormalizedInverseKey$2 in fields[field])
              for (i = 0, j = updates.length; i < j; i++) {
                update = updates[i];
                if (update.replace) delete update.replace[field];
                if (update.pull) delete update.pull[field];
                if (update.push) delete update.push[field];
              }
          }

          return transaction.find(type, map(updates, function (update) {
            return update[primaryKey$7]
          }), null, meta)
        })

        .then(function (records) {
          if (records.length < updates.length)
            throw new NotFoundError$3(message_1('UpdateRecordMissing', language))

          return Promise.all(map(records, function (record) {
            var update, cloneUpdate;
            var hasHook = typeof hook[0] === 'function';
            var id = record[primaryKey$7];

            update = find$1(updates, function (update) {
              return update[primaryKey$7] === id
            });

            if (!update) throw new NotFoundError$3(
              message_1('UpdateRecordMissing', language))

            if (hasHook) cloneUpdate = clone(update);

            return Promise.resolve(hasHook ?
              hook[0](context, record, update) : update)
              .then(function (result) {
                if (result && typeof result === 'object') update = result;

                if (hasHook) {
                  // Check if the update has been modified or not.
                  if (!deep_equal(update, cloneUpdate))
                    context.response.meta.updateModified = true;

                  // Runtime safety check: primary key must be the same.
                  if (update[primaryKey$7] !== id) throw new BadRequestError$7(
                    message_1('InvalidID', language))
                }

                hookedUpdates.push(update);
                Object.defineProperty(update, updateRecordKey, { value: record });

                // Shallow clone the record.
                record = assign({}, record);

                // Apply updates to record.
                apply_update(record, update);

                // Apply operators to record.
                if (update.operate)
                  record = adapter.applyOperators(record, update.operate);

                // Enforce the fields.
                enforce(type, record, fields, meta);

                // Ensure referential integrity.
                return check_links.call(
                  self, transaction, record, fields, links, meta)
                  .then(function (linked) {
                    Object.defineProperty(update, linkedHashKey, { value: linked });
                    return record
                  })
              })
          }))
        })

        .then(function (records) {
          var i, j;

          validate_records.call(self, records, fields, links, meta);

          Object.defineProperty(context.response, 'records', {
            configurable: true,
            value: records
          });

          // Drop fields in the updates that aren't defined in the record type
          // before doing the update.
          for (i = 0, j = hookedUpdates.length; i < j; i++)
            dropFields(hookedUpdates[i], fields);

          return transaction.update(type, hookedUpdates, meta)
        })

        .then(function () {
          var inverseField, isArray, linkedType, linkedIsArray, linked, record,
            partialRecord, partialRecords, ids, id, push, pull, update, field;
          var i, j, k, l, m, n;

          // Build up related updates based on update objects.
          var idCache = {};

          // Iterate over each update to generate related updates.
          for (i = 0, j = hookedUpdates.length; i < j; i++) {
            update = hookedUpdates[i];

            for (k = 0, l = links.length; k < l; k++) {
              field = links[k];
              inverseField = fields[field][inverseKey$6];

              if (!inverseField) continue

              isArray = fields[field][isArrayKey$8];
              linkedType = fields[field][linkKey$7];
              linkedIsArray =
              recordTypes[linkedType][inverseField][isArrayKey$8];

              // Do some initialization.
              if (!relatedUpdates[linkedType]) relatedUpdates[linkedType] = [];
              if (!idCache[linkedType]) idCache[linkedType] = {};

              record = update[updateRecordKey];
              linked = update[linkedHashKey];

              // Replacing a link field is pretty complicated.
              if (update.replace && update.replace.hasOwnProperty(field)) {
                id = update.replace[field];

                if (!Array.isArray(id)) {
                // Don't need to worry about inverse updates if the value does not
                // change.
                  if (id === record[field]) continue

                  // Set related field.
                  if (id !== null)
                    addId$2(update[primaryKey$7],
                      getUpdate$3(linkedType, id, relatedUpdates, idCache),
                      inverseField, linkedIsArray);

                  // Unset 2nd degree related record.
                  if (linked.hasOwnProperty(field) &&
                  linked[field][inverseField] !== null &&
                  !linkedIsArray &&
                  linked[field][inverseField] !== update[primaryKey$7])
                    removeId$2(id,
                      getUpdate$3(
                        linkedType, linked[field][inverseField],
                        relatedUpdates, idCache),
                      inverseField, linkedIsArray);

                  // For unsetting, remove ID from related record.
                  if (record[field] !== null &&
                  record[field] !== update[field] &&
                  record[field] !== id)
                    removeId$2(update[primaryKey$7],
                      getUpdate$3(
                        linkedType, record[field], relatedUpdates, idCache),
                      inverseField, linkedIsArray);

                  // After this point, there's no need to go over push/pull.
                  continue
                }

                ids = id;

                // Compute differences for pull, and mutate the update.
                for (m = 0, n = record[field].length; m < n; m++) {
                  id = record[field][m];
                  if (!includes(ids, id)) {
                    if (!('pull' in update)) update.pull = {};
                    if (update.pull.hasOwnProperty(field)) {
                      if (Array.isArray(update.pull[field])) {
                        update.pull[field].push(id);
                        continue
                      }
                      update.pull[field] = [ update.pull[field], id ];
                      continue
                    }
                    update.pull[field] = [ id ];
                  }
                }

                // Compute differences for push, and mutate the update.
                for (m = 0, n = ids.length; m < n; m++) {
                  id = ids[m];
                  if (!includes(record[field], id)) {
                    if (!('push' in update)) update.push = {};
                    if (update.push.hasOwnProperty(field)) {
                      if (Array.isArray(update.push[field])) {
                        update.push[field].push(id);
                        continue
                      }
                      update.push[field] = [ update.push[field], id ];
                      continue
                    }
                    update.push[field] = [ id ];
                  }
                }

                // Delete the original replace, since it is no longer valid.
                delete update.replace[field];
              }

              if (update.pull && update.pull[field]) {
                pull = Array.isArray(update.pull[field]) ?
                  update.pull[field] : [ update.pull[field] ];

                for (m = 0, n = pull.length; m < n; m++) {
                  id = pull[m];
                  if (id !== null)
                    removeId$2(update[primaryKey$7],
                      getUpdate$3(linkedType, id, relatedUpdates, idCache),
                      inverseField, linkedIsArray);
                }
              }

              if (update.push && update.push[field]) {
                push = Array.isArray(update.push[field]) ?
                  update.push[field] : [ update.push[field] ];

                for (m = 0, n = push.length; m < n; m++) {
                  id = push[m];
                  if (id !== null)
                    addId$2(update[primaryKey$7],
                      getUpdate$3(linkedType, id, relatedUpdates, idCache),
                      inverseField, linkedIsArray);
                }
              }

              // Unset from 2nd degree related records.
              if (linked.hasOwnProperty(field) && !linkedIsArray) {
                partialRecords = Array.isArray(linked[field]) ?
                  linked[field] : [ linked[field] ];

                for (m = 0, n = partialRecords.length; m < n; m++) {
                  partialRecord = partialRecords[m];

                  if (partialRecord[inverseField] === update[primaryKey$7])
                    continue

                  removeId$2(partialRecord[primaryKey$7],
                    getUpdate$3(
                      type, partialRecord[inverseField],
                      relatedUpdates, idCache),
                    field, isArray);
                }
              }
            }
          }

          return Promise.all(map(Object.keys(relatedUpdates), function (type) {
            return relatedUpdates[type].length ?
              transaction.update(type, relatedUpdates[type], meta) :
              null
          }))
        })

        .then(function () {
          var eventData = {}, linkedType;

          eventData[updateMethod$2] = {};
          eventData[updateMethod$2][type] = hookedUpdates;

          for (linkedType in relatedUpdates) {
            scrubDenormalizedUpdates$3(
              relatedUpdates[linkedType], denormalizedFields);

            if (!relatedUpdates[linkedType].length) continue

            if (linkedType !== type)
              eventData[updateMethod$2][linkedType] = relatedUpdates[linkedType];

            // Get the union of update IDs.
            else eventData[updateMethod$2][type] =
            eventData[updateMethod$2][type].concat(relatedUpdates[type]);
          }

          // Summarize changes during the lifecycle of the request.
          self.emit(changeEvent$2, eventData);

          return context
        })
    };


    // Validate updates.
    function validateUpdates (updates, meta) {
      var language = meta.language;
      var i, j, update;

      if (!updates || !updates.length)
        throw new BadRequestError$7(
          message_1('UpdateRecordsInvalid', language))

      for (i = 0, j = updates.length; i < j; i++) {
        update = updates[i];
        if (!update[primaryKey$7])
          throw new BadRequestError$7(
            message_1('UpdateRecordMissingID', language))
      }
    }


    function dropFields (update, fields) {
      var field;

      for (field in update.replace)
        if (!fields.hasOwnProperty(field)) delete update.replace[field];

      for (field in update.pull)
        if (!fields.hasOwnProperty(field)) delete update.pull[field];

      for (field in update.push)
        if (!fields.hasOwnProperty(field)) delete update.push[field];
    }

    /**
     * Fetch the primary records. This mutates `context.response`
     * for the next method.
     *
     * @return {Promise}
     */
    var find$3 = function (context) {
      var transaction = context.transaction;
      var request = context.request;
      var type = request.type;
      var ids = request.ids;
      var options = request.options;
      var meta = request.meta;

      if (!type) return context

      return transaction.find(type, ids, options, meta)
        .then(function (records) {
          Object.defineProperty(context.response, 'records', {
            configurable: true,
            value: records
          });

          return context
        })
    };

    var BadRequestError$8 = errors.BadRequestError;


    var primaryKey$8 = keys.primary;
    var linkKey$8 = keys.link;


    /**
     * Fetch included records. This mutates `context.response`
     * for the next method.
     *
     * @return {Promise}
     */
    var include = function include (context) {
      var Promise = promise.Promise;
      var request = context.request;
      var type = request.type;
      var ids = request.ids || [];
      var include = request.include;
      var meta = request.meta;
      var language = meta.language;
      var response = context.response;
      var transaction = context.transaction;
      var records = response.records;
      var recordTypes = this.recordTypes;
      var hasField = true;
      var idCache = {};
      var i, j, record, id;

      // Skip if there's nothing to be done.
      if (!type || !include || !records) return context

      // This cache is used to keep unique IDs per type.
      idCache[type] = {};
      for (i = 0, j = ids.length; i < j; i++)
        idCache[type][ids[i]] = true;

      // It's necessary to iterate over primary records if no IDs were
      // provided initially.
      if (!ids.length)
        for (i = 0, j = records.length; i < j; i++) {
          record = records[i];
          id = record[primaryKey$8];
          if (!idCache[type][id]) idCache[type][id] = true;
        }

      // Cast `include` into an array if it's using shorthand.
      if (include.length && !Array.isArray(include[0]))
        include = [ include ];

      return Promise.all(map(include, function (fields) {
        return new Promise(function (resolve, reject) {
          var currentType = type;
          var includeOptions = [];
          var currentCache, currentIds, currentOptions, currentField;
          var i, j, ensureFields;

          // Cast `fields` into an array if it's using shorthand.
          if (!Array.isArray(fields) ||
            (!Array.isArray(fields[1]) && typeof fields[1] === 'object'))
            fields = [ fields ];

          for (i = 0, j = fields.length; i < j; i++)
            if (Array.isArray(fields[i])) {
              includeOptions[i] = fields[i][1];
              fields[i] = fields[i][0];
            }

          // Check if first level field in in each record.
          for (i = 0, j = records.length; i < j; i++)
            if (!(fields[0] in records[i])) {
              hasField = false;
              break
            }

          // Ensure that the first level field is in each record.
          if (hasField)
            ensureFields = Promise.resolve(records);
          else {
            currentOptions = { fields: {} };
            currentOptions.fields[fields[0]] = true;
            currentIds = [];
            for (i = 0, j = records.length; i < j; i++)
              currentIds.push(records[i][primaryKey$8]);
            ensureFields = transaction.find(
              type, currentIds, currentOptions, meta);
          }

          return ensureFields
            .then(function (records) {
              return reduce(fields, function (records, field, index) {
                // `cursor` refers to the current collection of records.
                return records.then(function (cursor) {
                  currentField = recordTypes[currentType][field];

                  if (!currentType || !currentField) return []
                  if (!(linkKey$8 in currentField))
                    throw new BadRequestError$8(
                      message_1('InvalidLink', language, { field: field }))

                  currentCache = {};
                  currentType = currentField[linkKey$8];
                  currentIds = reduce(cursor, function (ids, record) {
                    var linkedIds = Array.isArray(record[field]) ?
                      record[field] : [ record[field] ];
                    var i, j, id;

                    for (i = 0, j = linkedIds.length; i < j; i++) {
                      id = linkedIds[i];
                      if (id && !currentCache[id]) {
                        currentCache[id] = true;
                        ids.push(id);
                      }
                    }

                    return ids
                  }, []);

                  if (index in includeOptions)
                    currentOptions = includeOptions[index];
                  else if (index < fields.length - 1) {
                    currentOptions = { fields: {} };
                    currentOptions.fields[fields[index + 1]] = true;
                  }
                  else currentOptions = null;

                  return currentIds.length ?
                    transaction.find(
                      currentType, currentIds, currentOptions, meta) :
                    []
                })
              }, Promise.resolve(records))
            })

            .then(function (records) {
              return resolve({
                type: currentType,
                ids: currentIds,
                records: records
              })
            }, function (error) {
              return reject(error)
            })
        })
      }))

        .then(function (containers) {
          var include = reduce(containers, function (include, container) {
            var i, j, id, record;

            if (!container.ids.length) return include

            if (!include[container.type])
              include[container.type] = [];

            // Only include unique IDs per type.
            if (!idCache[container.type])
              idCache[container.type] = {};

            for (i = 0, j = container.ids.length; i < j; i++) {
              id = container.ids[i];

              if (idCache[container.type][id]) continue

              record = find$1(container.records, matchId$1(id));

              if (record) {
                idCache[container.type][id] = true;
                include[container.type].push(record);
              }
            }

            // If nothing so far, delete the type from include.
            if (!include[container.type].length)
              delete include[container.type];

            return include
          }, {});

          if (Object.keys(include).length)
            Object.defineProperty(context.response, 'include', {
              configurable: true,
              value: include
            });

          return context
        })
    };


    function matchId$1 (id) {
      return function (record) {
        return record[primaryKey$8] === id
      }
    }

    /**
     * Apply `output` hook per record, this mutates `context.response`.
     *
     * @return {Promise}
     */
    var end = function (context) {
      var Promise = promise.Promise;
      var hooks = this.hooks;
      var request = context.request;
      var response = context.response;
      var type = request.type;
      var hook = hooks[type];
      var records = response.records;
      var include = response.include;

      // Delete temporary keys.
      delete response.records;
      delete response.include;

      // Run hooks on primary type.
      return (records ? Promise.all(map(records, function (record) {
        return Promise.resolve(typeof hook[1] === 'function' ?
          hook[1](context, record) : record)
      }))

        .then(function (updatedRecords) {
          var includeTypes;
          var i, j;

          for (i = 0, j = updatedRecords.length; i < j; i++)
            if (updatedRecords[i]) records[i] = updatedRecords[i];

          if (!include) return void 0

          // The order of the keys and their corresponding indices matter.
          includeTypes = Object.keys(include);

          // Run output hooks per include type.
          return Promise.all(map(includeTypes, function (includeType) {
            // This is useful for output hooks to know which type that the current
            // record belongs to. It is temporary and gets deleted later.
            request.includeType = includeType;

            return Promise.all(map(include[includeType], function (record) {
              return Promise.resolve(
                typeof hooks[includeType][1] === 'function' ?
                  hooks[includeType][1](context, record) : record)
            }))
          }))

            .then(function (types) {
              var i, j, k, l;

              // Don't need this anymore.
              delete request.includeType;

              // Assign results of output hooks on includes.
              for (i = 0, j = types.length; i < j; i++)
                for (k = 0, l = types[i].length; k < l; k++)
                  if (types[i][k]) include[includeTypes[i]][k] = types[i][k];
            })
        }) : Promise.resolve())

        .then(function () {
          context.response.payload = {
            records: records
          };

          if (include) context.response.payload.include = include;

          // Expose the "count" property so that it is serializable.
          if (records && 'count' in records)
            context.response.payload.count = records.count;

          return context
        })
    };

    var BadRequestError$9 = response_classes.BadRequestError;
    var NotFoundError$4 = response_classes.NotFoundError;
    var MethodError$2 = response_classes.MethodError;
    var OK$2 = response_classes.OK;
    var Empty$2 = response_classes.Empty;
    var Created$2 = response_classes.Created;


    var findMethod = methods.find;
    var createMethod$1 = methods.create;


    /*!
     * Internal function to dispatch a request. Must be called in the context of
     * the Fortune instance.
     *
     * @param {Object} options
     * @return {Promise}
     */
    function dispatch (options) {
      var Promise = promise.Promise;
      var flows = this.flows;
      var recordTypes = this.recordTypes;
      var adapter = this.adapter;

      var context = setDefaults(options);
      var method = context.request.method;
      var hasTransaction = 'transaction' in options;

      // Start a promise chain.
      return Promise.resolve(context)

        .then(function (context) {
          var type = context.request.type;
          var ids = context.request.ids;
          var language = context.request.meta.language;
          var error;

          // Make sure that IDs are an array of unique values.
          if (ids) context.request.ids = unique(ids);

          // If a type is unspecified, block the request.
          if (type === null) {
            error = new BadRequestError$9(message_1('UnspecifiedType', language));
            error.isTypeUnspecified = true;
            throw error
          }

          // If a type is specified and it doesn't exist, block the request.
          if (!recordTypes.hasOwnProperty(type))
            throw new NotFoundError$4(
              message_1('InvalidType', language, { type: type }))

          // Block invalid method.
          if (!(method in flows))
            throw new MethodError$2(
              message_1('InvalidMethod', language, { method: method }))

          return hasTransaction ?
            Promise.resolve(options.transaction) :
            adapter.beginTransaction()
        })

        .then(function (transaction) {
          var chain, flow, i, j;

          context.transaction = transaction;
          chain = Promise.resolve(context);
          flow = flows[method];

          for (i = 0, j = flow.length; i < j; i++)
            chain = chain.then(flow[i]);

          return chain
        })

        .then(function (context) {
          return hasTransaction ?
            Promise.resolve() : context.transaction.endTransaction()
              .then(function () {
                var method = context.request.method;
                var response = context.response;
                var payload = response.payload;

                if (!payload) return new Empty$2(response)
                if (method === createMethod$1) return new Created$2(response)

                return new OK$2(response)
              })
        })

      // This makes sure to call `endTransaction` before re-throwing the error.
        .catch(function (error) {
          return 'transaction' in context && !hasTransaction ?
            context.transaction.endTransaction(error)
              .then(throwError, throwError) :
            throwError()

          function throwError () {
            throw assign(error, context.response)
          }
        })
    }


    // Re-exporting internal middlewares.
    dispatch.middlewares = {
      create: create$1,
      'delete': _delete,
      update: update$1,
      find: find$3,
      include: include,
      end: end
    };


    /*!
     * Set default options on a context's request. For internal use.
     *
     * @param {Object} [options]
     * @return {Object}
     */
    function setDefaults (options) {
      var context = {
        request: {
          method: findMethod,
          type: null,
          ids: null,
          options: {},
          include: [],
          meta: {},
          payload: null
        },
        response: {
          meta: {},
          payload: null
        }
      };

      assign(context.request, options);

      return context
    }


    var dispatch_1 = dispatch;

    // Local modules.






    var middlewares = dispatch_1.middlewares;

    // Static re-exports.


    var assign$1 = common$1.assign;
    var methods$1 = common$1.methods;
    var events$1 = common$1.events;


    /**
     * This is the default export of the `fortune` package. It implements a
     * [subset of `EventEmitter`](https://www.npmjs.com/package/event-lite), and it
     * has a few static properties attached to it that may be useful to access:
     *
     * - `Adapter`: abstract base class for the Adapter.
     * - `adapters`: included adapters, defaults to memory adapter.
     * - `errors`: custom error types, useful for throwing errors in I/O hooks.
     * - `methods`: a hash that maps to string constants. Available are: `find`,
     *   `create`, `update`, and `delete`.
     * - `events`: names for events on the Fortune instance. Available are:
     *   `change`, `sync`, `connect`, `disconnect`, `failure`.
     * - `message`: a function which accepts the arguments (`id`, `language`,
     *   `data`). It has properties keyed by two-letter language codes, which by
     *   default includes only `en`.
     * - `Promise`: assign this to set the Promise implementation that Fortune
     *   will use.
     */
    function Fortune (recordTypes, options) {
      if (!(this instanceof Fortune))
        return new Fortune(recordTypes, options)

      this.constructor(recordTypes, options);
    }


    // Inherit from EventLite class.
    Fortune.prototype = new eventLite();


    /**
     * Create a new instance, the only required input is record type definitions.
     * The first argument must be an object keyed by name, valued by definition
     * objects.
     *
     * Here are some example field definitions:
     *
     * ```js
     * {
     *   // Top level keys are names of record types.
     *   person: {
     *     // Data types may be singular or plural.
     *     name: String, // Singular string value.
     *     luckyNumbers: Array(Number), // Array of numbers.
     *
     *     // Relationships may be singular or plural. They must specify which
     *     // record type it refers to, and may also specify an inverse field
     *     // which is optional but recommended.
     *     pets: [ Array('animal'), 'owner' ], // Has many.
     *     employer: [ 'organization', 'employees' ], // Belongs to.
     *     likes: Array('thing'), // Has many (no inverse).
     *     doing: 'activity', // Belongs to (no inverse).
     *
     *     // Reflexive relationships are relationships in which the record type,
     *     // the first position, is of the same type.
     *     following: [ Array('person'), 'followers' ],
     *     followers: [ Array('person'), 'following' ],
     *
     *     // Mutual relationships are relationships in which the inverse,
     *     // the second position, is defined to be the same field on the same
     *     // record type.
     *     friends: [ Array('person'), 'friends' ],
     *     spouse: [ 'person', 'spouse' ]
     *   }
     * }
     * ```
     *
     * The above shows the shorthand which will be transformed internally to a
     * more verbose data structure. The internal structure is as follows:
     *
     * ```js
     * {
     *   person: {
     *     // A singular value.
     *     name: { type: String },
     *
     *     // An array containing values of a single type.
     *     luckyNumbers: { type: Number, isArray: true },
     *
     *     // Creates a to-many link to `animal` record type. If the field `owner`
     *     // on the `animal` record type is not an array, this is a many-to-one
     *     // relationship, otherwise it is many-to-many.
     *     pets: { link: 'animal', isArray: true, inverse: 'owner' },
     *
     *     // The `min` and `max` keys are open to interpretation by the specific
     *     // adapter, which may introspect the field definition.
     *     thing: { type: Number, min: 0, max: 100 },
     *
     *     // Nested field definitions are invalid. Use `Object` type instead.
     *     nested: { thing: { ... } } // Will throw an error.
     *   }
     * }
     * ```
     *
     * The allowed native types are `String`, `Number`, `Boolean`, `Date`,
     * `Object`, and `Buffer`. Note that the `Object` type should be a JSON
     * serializable object that may be persisted. The only other allowed type is
     * a `Function`, which may be used to define custom types.
     *
     * A custom type function should accept one argument, the value, and return a
     * boolean based on whether the value is valid for the type or not. It may
     * optionally have a method `compare`, used for sorting in the built-in
     * adapters. The `compare` method should have the same signature as the native
     * `Array.prototype.sort`.
     *
     * A custom type function must inherit one of the allowed native types. For
     * example:
     *
     * ```js
     * function Integer (x) { return (x | 0) === x }
     * Integer.prototype = new Number()
     * ```
     *
     * The options object may contain the following keys:
     *
     * - `adapter`: configuration array for the adapter. The default type is the
     *   memory adapter. If the value is not an array, its settings will be
     *   considered omitted.
     *
     *   ```js
     *   {
     *     adapter: [
     *       // Must be a class that extends `Fortune.Adapter`, or a function
     *       // that accepts the Adapter class and returns a subclass. Required.
     *       Adapter => { ... },
     *
     *       // An options object that is specific to the adapter. Optional.
     *       { ... }
     *     ]
     *   }
     *   ```
     *
     * - `hooks`: keyed by type name, valued by an array containing an `input`
     *   and/or `output` function at indices `0` and `1` respectively.
     *
     *   A hook function takes at least two arguments, the internal `context`
     *   object and a single `record`. A special case is the `update` argument for
     *   the `update` method.
     *
     *   There are only two kinds of hooks, before a record is written (input),
     *   and after a record is read (output), both are optional. If an error occurs
     *   within a hook function, it will be forwarded to the response. Use typed
     *   errors to provide the appropriate feedback.
     *
     *   For a create request, the input hook may return the second argument
     *   `record` either synchronously, or asynchronously as a Promise. The return
     *   value of a delete request is inconsequential, but it may return a value or
     *   a Promise. The `update` method accepts a `update` object as a third
     *   parameter, which may be returned synchronously or as a Promise.
     *
     *   An example hook to apply a timestamp on a record before creation, and
     *   displaying the timestamp in the server's locale:
     *
     *   ```js
     *   {
     *     recordType: [
     *       (context, record, update) => {
     *         switch (context.request.method) {
     *           case 'create':
     *             record.timestamp = new Date()
     *             return record
     *           case 'update': return update
     *           case 'delete': return null
     *         }
     *       },
     *       (context, record) => {
     *         record.timestamp = record.timestamp.toLocaleString()
     *         return record
     *       }
     *     ]
     *   }
     *   ```
     *
     *   Requests to update a record will **NOT** have the updates already applied
     *   to the record.
     *
     *   Another feature of the input hook is that it will have access to a
     *   temporary field `context.transaction`. This is useful for ensuring that
     *   bulk write operations are all or nothing. Each request is treated as a
     *   single transaction.
     *
     * - `documentation`: an object mapping names to descriptions. Note that there
     *   is only one namepspace, so field names can only have one description.
     *   This is optional, but useful for the HTML serializer, which also emits
     *   this information as micro-data.
     *
     *   ```js
     *   {
     *     documentation: {
     *       recordType: 'Description of a type.',
     *       fieldName: 'Description of a field.',
     *       anotherFieldName: {
     *         en: 'Two letter language code indicates localized description.'
     *       }
     *     }
     *   }
     *   ```
     *
     * - `settings`: internal settings to configure.
     *
     *   ```js
     *   {
     *     settings: {
     *       // Whether or not to enforce referential integrity. Default: `true`
     *       // for server, `false` for browser.
     *       enforceLinks: true,
     *
     *       // Name of the application used for display purposes.
     *       name: 'My Awesome Application',
     *
     *       // Description of the application used for display purposes.
     *       description: 'media type "application/vnd.micro+json"'
     *     }
     *   }
     *   ```
     *
     * The return value of the constructor is the instance itself.
     *
     * @param {Object} [recordTypes]
     * @param {Object} [options]
     * @return {Fortune}
     */
    Fortune.prototype.constructor = function Fortune (recordTypes, options) {
      var self = this;
      var plainObject = {};
      var message = common$1.message.copy();
      var adapter$$1, method, stack, flows, type, hooks, i, j;

      if (recordTypes === void 0) recordTypes = {};
      if (options === void 0) options = {};

      if (!('adapter' in options)) options.adapter = [ memory(adapter) ];
      if (!('settings' in options)) options.settings = {};
      if (!('hooks' in options)) options.hooks = {};
      if (!('enforceLinks' in options.settings))
        options.settings.enforceLinks = true;

      // Bind middleware methods to instance.
      flows = {};
      for (method in methods$1) {
        stack = [ middlewares[method], middlewares.include, middlewares.end ];

        for (i = 0, j = stack.length; i < j; i++)
          stack[i] = bindMiddleware(self, stack[i]);

        flows[methods$1[method]] = stack;
      }

      hooks = options.hooks;

      // Validate hooks.
      for (type in hooks) {
        if (!recordTypes.hasOwnProperty(type)) throw new Error(
          'Attempted to define hook on "' + type + '" type ' +
          'which does not exist.')
        if (!Array.isArray(hooks[type]))
          throw new TypeError('Hook value for "' + type + '" type ' +
            'must be an array.')
      }

      // Validate record types.
      for (type in recordTypes) {
        if (type in plainObject)
          throw new Error('Can not define type name "' + type +
            '" which is in Object.prototype.')

        validate$1(recordTypes[type]);
        if (!hooks.hasOwnProperty(type)) hooks[type] = [];
      }

      /*!
       * Adapter singleton that is coupled to the Fortune instance.
       *
       * @type {Adapter}
       */
      adapter$$1 = new singleton({
        adapter: options.adapter,
        recordTypes: recordTypes,
        hooks: hooks,
        message: message
      });

      // Internal properties.
      Object.defineProperties(self, {
        // 0 = not started, 1 = started, 2 = done.
        connectionStatus: { value: 0, writable: true },

        // Configuration settings.
        options: { value: options },
        hooks: { value: hooks },
        recordTypes: { value: recordTypes, enumerable: true },
        message: { value: message, enumerable: true },

        // Singleton instances.
        adapter: { value: adapter$$1, enumerable: true, configurable: true },

        // Dispatch.
        flows: { value: flows }
      });
    };


    /**
     * This is the primary method for initiating a request. The options object
     * may contain the following keys:
     *
     * - `method`: The method is a either a function or a constant, which is keyed
     *   under `Fortune.common.methods` and may be one of `find`, `create`,
     *   `update`, or `delete`. Default: `find`.
     *
     * - `type`: Name of a type. **Required**.
     *
     * - `ids`: An array of IDs. Used for `find` and `delete` methods only. This is
     *   optional for the `find` method.
     *
     * - `include`: A 3-dimensional array specifying links to include. The first
     *   dimension is a list, the second dimension is depth, and the third
     *   dimension is an optional tuple with field and query options. For example:
     *   `[['comments'], ['comments', ['author', { ... }]]]`.
     *
     * - `options`: Exactly the same as the [`find` method](#adapter-find)
     *   options in the adapter. These options do not apply on methods other than
     *   `find`, and do not affect the records returned from `include`. Optional.
     *
     * - `meta`: Meta-information object of the request. Optional.
     *
     * - `payload`: Payload of the request. **Required** for `create` and `update`
     *   methods only, and must be an array of objects. The objects must be the
     *   records to create, or update objects as expected by the Adapter.
     *
     * - `transaction`: if an existing transaction should be re-used, this may
     *   optionally be passed in. This must be ended manually.
     *
     * The response object may contain the following keys:
     *
     * - `meta`: Meta-info of the response.
     *
     * - `payload`: An object containing the following keys:
     *   - `records`: An array of records returned.
     *   - `count`: Total number of records without options applied (only for
     *     responses to the `find` method).
     *   - `include`: An object keyed by type, valued by arrays of included
     *     records.
     *
     * The resolved response object should always be an instance of a response
     * type.
     *
     * @param {Object} options
     * @return {Promise}
     */
    Fortune.prototype.request = function (options) {
      var self = this;
      var connectionStatus = self.connectionStatus;
      var Promise = promise.Promise;

      if (connectionStatus === 0)
        return self.connect()
          .then(function () { return dispatch_1.call(self, options) })

      else if (connectionStatus === 1)
        return new Promise(function (resolve, reject) {
          // Wait for changes to connection status.
          self.once(events$1.failure, function () {
            reject(new Error('Connection failed.'));
          });
          self.once(events$1.connect, function () {
            resolve(dispatch_1.call(self, options));
          });
        })

      return dispatch_1.call(self, options)
    };


    /**
     * The `find` method retrieves record by type given IDs, querying options,
     * or both. This is a convenience method that wraps around the `request`
     * method, see the `request` method for documentation on its arguments.
     *
     * @param {String} type
     * @param {*|*[]} [ids]
     * @param {Object} [options]
     * @param {Array[]} [include]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Fortune.prototype.find = function (type, ids, options, include, meta) {
      var obj = { method: methods$1.find, type: type };

      if (ids) obj.ids = Array.isArray(ids) ? ids : [ ids ];
      if (options) obj.options = options;
      if (include) obj.include = include;
      if (meta) obj.meta = meta;

      return this.request(obj)
    };


    /**
     * The `create` method creates records by type given records to create. This
     * is a convenience method that wraps around the `request` method, see the
     * request `method` for documentation on its arguments.
     *
     * @param {String} type
     * @param {Object|Object[]} records
     * @param {Array[]} [include]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Fortune.prototype.create = function (type, records, include, meta) {
      var options = { method: methods$1.create, type: type,
        payload: Array.isArray(records) ? records : [ records ] };

      if (include) options.include = include;
      if (meta) options.meta = meta;

      return this.request(options)
    };


    /**
     * The `update` method updates records by type given update objects. See the
     * [Adapter.update](#adapter-update) method for the format of the update
     * objects. This is a convenience method that wraps around the `request`
     * method, see the `request` method for documentation on its arguments.
     *
     * @param {String} type
     * @param {Object|Object[]} updates
     * @param {Array[]} [include]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Fortune.prototype.update = function (type, updates, include, meta) {
      var options = { method: methods$1.update, type: type,
        payload: Array.isArray(updates) ? updates : [ updates ] };

      if (include) options.include = include;
      if (meta) options.meta = meta;

      return this.request(options)
    };


    /**
     * The `delete` method deletes records by type given IDs (optional). This is a
     * convenience method that wraps around the `request` method, see the `request`
     * method for documentation on its arguments.
     *
     * @param {String} type
     * @param {*|*[]} [ids]
     * @param {Array[]} [include]
     * @param {Object} [meta]
     * @return {Promise}
     */
    Fortune.prototype.delete = function (type, ids, include, meta) {
      var options = { method: methods$1.delete, type: type };

      if (ids) options.ids = Array.isArray(ids) ? ids : [ ids ];
      if (include) options.include = include;
      if (meta) options.meta = meta;

      return this.request(options)
    };


    /**
     * This method does not need to be called manually, it is automatically called
     * upon the first request if it is not connected already. However, it may be
     * useful if manually reconnect is needed. The resolved value is the instance
     * itself.
     *
     * @return {Promise}
     */
    Fortune.prototype.connect = function () {
      var self = this;
      var Promise = promise.Promise;

      if (self.connectionStatus === 1)
        return Promise.reject(new Error('Connection is in progress.'))

      else if (self.connectionStatus === 2)
        return Promise.reject(new Error('Connection is already done.'))

      self.connectionStatus = 1;

      return new Promise(function (resolve, reject) {
        Object.defineProperty(self, 'denormalizedFields', {
          value: ensure_types(self.recordTypes),
          writable: true,
          configurable: true
        });

        self.adapter.connect().then(function () {
          self.connectionStatus = 2;
          self.emit(events$1.connect);
          return resolve(self)
        }, function (error) {
          self.connectionStatus = 0;
          self.emit(events$1.failure);
          return reject(error)
        });
      })
    };


    /**
     * Close adapter connection, and reset connection state. The resolved value is
     * the instance itself.
     *
     * @return {Promise}
     */
    Fortune.prototype.disconnect = function () {
      var self = this;
      var Promise = promise.Promise;

      if (self.connectionStatus !== 2)
        return Promise.reject(new Error('Instance has not been connected.'))

      self.connectionStatus = 1;

      return new Promise(function (resolve, reject) {
        return self.adapter.disconnect().then(function () {
          self.connectionStatus = 0;
          self.emit(events$1.disconnect);
          return resolve(self)
        }, function (error) {
          self.connectionStatus = 2;
          self.emit(events$1.failure);
          return reject(error)
        })
      })
    };


    // Useful for dependency injection. All instances of Fortune have the same
    // common internal dependencies.
    Fortune.prototype.common = common$1;


    // Assign useful static properties to the default export.
    assign$1(Fortune, {
      Adapter: adapter,
      adapters: {
        memory: memory(adapter)
      },
      errors: common$1.errors,
      message: common$1.message,
      methods: methods$1,
      events: events$1
    });


    // Set the `Promise` property.
    Object.defineProperty(Fortune, 'Promise', {
      enumerable: true,
      get: function () {
        return promise.Promise
      },
      set: function (value) {
        promise.Promise = value;
      }
    });


    // Internal helper function.
    function bindMiddleware (scope, method) {
      return function (x) {
        return method.call(scope, x)
      }
    }


    var lib = Fortune;

    class Relation {
        constructor($type, $field, $field0isArray) {
            this.type0 = $type;
            this.field0 = $field;
            this.field0isArray = $field0isArray;
        }
        setRelative(relation) {
            this.type1 = relation.type0;
            this.field1 = relation.field0;
            this.field1isArray = relation.field0isArray;
        }
        isValidRelative(relation) {
            if (!this.type1) {
                return true;
            }
            else {
                return this.isSameRelative(relation);
            }
        }
        isSameRelative(relation) {
            return this.type0 === relation.type0 && this.field0 === relation.field0 && this.field0isArray === relation.field0isArray;
        }
        getInverse(type, field) {
            const inverse = this.getInverseTuple(type, field);
            return inverse ? inverse[1] : null;
        }
        getInverseTuple(type, field) {
            let inverse = null;
            if (this.type0 === type && this.field0 === field) {
                inverse = [this.type1, this.field1];
            }
            else if (this.type1 === type && this.field1 === field) {
                inverse = [this.type0, this.field0];
            }
            return inverse;
        }
    }
    class Relations {
        constructor() {
            this.relations = new Map();
        }
        getRelation(name) {
            let relations = null;
            if (this.relations.has(name)) {
                relations = this.relations.get(name);
            }
            return relations;
        }
        getInverseWithoutName(type, field) {
            let inverse = null;
            const iter = this.relations.values();
            let relation = iter.next().value;
            while (!inverse && relation) {
                inverse = relation.getInverse(type, field);
                relation = iter.next().value;
            }
            return inverse;
        }
        getInverse(name, type, field) {
            let inverse = null;
            if (this.relations.has(name)) {
                const relation = this.relations.get(name);
                inverse = relation.getInverse(type, field);
            }
            return inverse;
        }
        setRelation(name, type, field, fieldIsArray) {
            const newRelation = new Relation(type, field, fieldIsArray);
            if (!this.relations.has(name)) {
                this.relations.set(name, newRelation);
            }
            else {
                const relation = this.relations.get(name);
                if (relation.isValidRelative(newRelation)) {
                    if (!relation.isSameRelative(newRelation)) {
                        relation.setRelative(newRelation);
                    }
                }
                else {
                    this.throwError(name, type, field, relation.field0);
                }
            }
        }
        throwError(name, type, primaryField, relatedField) {
            console.error('Bad schema, relation could apply to multiple fields\n', 'relation name', name, '\n', 'fortune name', type, '\n', 'curr field', primaryField, '\n', 'other field', relatedField);
        }
    }
    const computeRelations = (schemaInfo, typeNameResolver = (name) => name) => {
        const relations = new Relations();
        lodash_16(lodash_25(schemaInfo), (typeName) => {
            const type = schemaInfo[typeName];
            lodash_16(type.fields, field => {
                const relation = lodash_17(field, 'metadata.relation');
                if (relation) {
                    const reslovedTypeName = typeNameResolver(getReturnType(field.type));
                    relations.setRelation(relation.name, reslovedTypeName, field.name, fieldIsArray(field.type));
                }
            });
        });
        return relations;
    };
    const stripNonNull = (type) => {
        if (isNonNullType(type)) {
            return type.ofType;
        }
        else {
            return type;
        }
    };
    const fieldIsArray = (fieldInfo) => {
        let isArray = false;
        while (isListType(fieldInfo) || isNonNullType(fieldInfo) || fieldInfo.kind === 'NON_NULL' || fieldInfo.kind === 'LIST') {
            if (isListType(fieldInfo) || fieldInfo.kind === 'LIST') {
                isArray = true;
                break;
            }
            fieldInfo = fieldInfo.ofType;
        }
        return isArray;
    };
    const getReturnType = (type) => {
        if (isListType(type) || isNonNullType(type) || type.kind === 'NON_NULL' || type.kind === 'LIST') {
            return getReturnType(type.ofType);
        }
        else {
            return type.name;
        }
    };
    const getReturnGraphQLType = (type) => {
        if (isListType(type) || isNonNullType(type)) {
            return getReturnGraphQLType(type.ofType);
        }
        else {
            return type;
        }
    };
    var Mutation;
    (function (Mutation) {
        Mutation[Mutation["Create"] = 0] = "Create";
        Mutation[Mutation["Update"] = 1] = "Update";
        Mutation[Mutation["Delete"] = 2] = "Delete";
        Mutation[Mutation["Upsert"] = 3] = "Upsert";
    })(Mutation || (Mutation = {}));
    const clean = (obj) => {
        for (const propName in obj) {
            if (obj[propName] === null || obj[propName] === undefined || (lodash_22(obj[propName]) && obj[propName].length < 1)) {
                delete obj[propName];
            }
        }
    };
    const getValueByUnique = (dataResolver, returnTypeName, args) => __awaiter(undefined, void 0, void 0, function* () {
        let currValue;
        // tslint:disable-next-line:prefer-conditional-expression
        if (args.id) {
            currValue = yield dataResolver.find(returnTypeName, [args.id]);
        }
        else {
            currValue = yield dataResolver.find(returnTypeName, undefined, { match: args });
        }
        if (!currValue || lodash_21(currValue)) {
            throw new Error(`${returnTypeName} does not exist with where args ${JSON.stringify(args)}`);
        }
        return lodash_22(currValue) ? currValue[0] : currValue;
    });
    const resolveArgs = (args, returnType, mutation, dataResolver, currRecord, _args, _context, _info) => __awaiter(undefined, void 0, void 0, function* () {
        const promises = [];
        args.forEach((currArg, index) => {
            for (const argName in currArg) {
                let argReturnType;
                if ((isObjectType(returnType) || isInterfaceType(returnType)) && returnType.getFields()[argName]) {
                    argReturnType = returnType.getFields()[argName].type;
                }
                const argReturnRootType = getReturnGraphQLType(argReturnType);
                if (!isScalarType(argReturnRootType)) {
                    const arg = currArg[argName];
                    if (lodash_23(arg) && argReturnType) {
                        promises.push(mutateResolver(mutation, dataResolver)(currRecord, arg, _context, _info, index, argName, argReturnType));
                        currArg[argName] = fieldIsArray(argReturnType) ? [] : undefined;
                    }
                }
            }
        });
        const results = yield Promise.all(promises);
        // setup the arguments to use the new types
        results.forEach((types) => {
            types = types ? types : [];
            types.forEach(type => {
                if (type && type.key && type.id && type.index > -1) {
                    const key = type.key;
                    const id = type.id;
                    const arg = args[type.index];
                    if (lodash_22(arg[key])) {
                        if (lodash_22(id)) {
                            arg[key] = arg[key].concat(id);
                        }
                        else {
                            arg[key].push(id);
                        }
                    }
                    else {
                        arg[key] = id;
                    }
                }
            });
        });
        return args;
    });
    const mutateResolver = (mutation, dataResolver) => {
        return (currRecord, _args, _context, _info, index, key, returnType) => __awaiter(undefined, void 0, void 0, function* () {
            // iterate over all the non-id arguments and recursively create new types
            const recursed = key ? true : false;
            if (!returnType) {
                returnType = _info.returnType.getFields().data.type;
                returnType = getReturnGraphQLType(returnType);
            }
            const returnTypeName = getReturnType(returnType);
            const clientMutationId = _args.input && _args.input.clientMutationId ? _args.input.clientMutationId : '';
            let createArgs = _args.create ? _args.create : mutation === Mutation.Create && lodash_17(_args, 'input.data') ? lodash_17(_args, 'input.data') : [];
            createArgs = createArgs && !lodash_22(createArgs) ? [createArgs] : createArgs;
            let updateArgs = _args.update ? _args.update : mutation === Mutation.Update && lodash_17(_args, 'input.data') ? lodash_17(_args, 'input.data') : [];
            updateArgs = updateArgs && !lodash_22(updateArgs) ? [updateArgs] : updateArgs;
            let deleteArgs = _args.delete ? _args.delete : mutation === Mutation.Delete && _args.input ? _args.input : [];
            deleteArgs = deleteArgs && !lodash_22(deleteArgs) ? [deleteArgs] : deleteArgs;
            let connectArgs = _args.connect ? _args.connect : [];
            connectArgs = connectArgs && !lodash_22(connectArgs) ? [connectArgs] : connectArgs;
            let disconnectArgs = _args.disconnect ? _args.disconnect : [];
            disconnectArgs = disconnectArgs && !lodash_22(disconnectArgs) ? [disconnectArgs] : disconnectArgs;
            // const disconnectArgs = _args.disconnect ? _args.disconnect : {};
            let whereArgs = _args.where ? _args.where : _args.input && _args.input.where ? _args.input.where : null;
            if (updateArgs.where && updateArgs.data) {
                whereArgs = updateArgs.where;
                updateArgs = updateArgs.data;
            }
            if (!lodash_21(updateArgs) || !lodash_21(deleteArgs)) {
                if (!whereArgs && !currRecord) {
                    throw new Error(`Cannot ${Mutation[mutation]} without where arguments`);
                }
                else if (whereArgs) {
                    currRecord = yield getValueByUnique(dataResolver, returnTypeName, whereArgs);
                }
                else {
                    currRecord = yield dataResolver.find(returnTypeName, currRecord[key]);
                }
            }
            [createArgs, updateArgs] = yield Promise.all([
                resolveArgs(createArgs, returnType, mutation, dataResolver, currRecord, _args, _context, _info),
                resolveArgs(updateArgs, returnType, mutation, dataResolver, currRecord, _args, _context, _info)
            ]);
            // could be creating more than 1 type
            const dataResolverPromises = [];
            createArgs.forEach((createArg) => {
                createArg = createArg.hasOwnProperty ? createArg : Object.assign({}, createArg);
                clean(createArg);
                if (createArg && !lodash_21(createArg)) {
                    dataResolverPromises.push(new Promise((resolve) => {
                        dataResolver.create(returnTypeName, createArg).then(data => {
                            const id = lodash_22(data) ? lodash_24(data, 'id') : data.id;
                            resolve({ index, key, id, data });
                        });
                    }));
                }
            });
            // now updates
            updateArgs.forEach((updateArg) => {
                updateArg = updateArg.hasOwnProperty ? updateArg : Object.assign({}, updateArg);
                clean(updateArg);
                if (updateArg && !lodash_21(updateArg)) {
                    dataResolverPromises.push(new Promise((resolve) => {
                        updateArg.id = currRecord.id;
                        dataResolver.update(returnTypeName, updateArg).then(data => {
                            const id = lodash_22(data) ? lodash_24(data, 'id') : data.id;
                            resolve({ index, key, id, data });
                        });
                    }));
                }
            });
            // now add the connect types
            connectArgs.forEach(connectArg => {
                dataResolverPromises.push(new Promise((resolve, reject) => {
                    getValueByUnique(dataResolver, returnTypeName, connectArg).then(data => {
                        if (data && data['id']) {
                            resolve({ index, key, id: data['id'], data });
                        }
                        else {
                            reject();
                        }
                    });
                }));
            });
            // disconnect
            const disconnectPromies = [];
            disconnectArgs.forEach(disconnectArg => {
                if (disconnectArg === true) {
                    dataResolverPromises.push(new Promise((resolve) => {
                        dataResolver.update(currRecord.__typename, { id: currRecord.id, [key]: null }).then(_data => {
                            resolve();
                        });
                    }));
                }
                else {
                    disconnectPromies.push(new Promise((resolve, reject) => {
                        getValueByUnique(dataResolver, returnTypeName, disconnectArg).then(data => {
                            if (data && data['id']) {
                                resolve(data['id']);
                            }
                            else {
                                reject();
                            }
                        });
                    }));
                }
            });
            const disconnectIds = yield Promise.all(disconnectPromies);
            if (!lodash_21(disconnectIds)) {
                dataResolverPromises.push(new Promise((resolve) => {
                    dataResolver.update(currRecord.__typename, { id: currRecord.id, [key]: disconnectIds }, null, { pull: true }).then(_data => {
                        resolve();
                    });
                }));
            }
            const dataResult = yield Promise.all(dataResolverPromises);
            // if everything was an id no need to create anything new
            // if key this is recursed else it's the final value
            if (recursed) {
                return dataResult;
            }
            else {
                return {
                    // if everything was already done on the object (deletions and disconnects) we need to refind it
                    data: lodash_17(dataResult, '[0].data', yield dataResolver.find(returnTypeName, [currRecord.id])),
                    clientMutationId
                };
            }
        });
    };
    const createResolver = (dataResolver) => {
        return mutateResolver(Mutation.Create, dataResolver);
    };
    const updateResolver = (dataResolver) => {
        return mutateResolver(Mutation.Update, dataResolver);
    };
    const parseScalars = (filter, fieldMap) => {
        if (!filter || !lodash_23(filter) || lodash_22(filter)) {
            return filter;
        }
        return lodash_27(filter, (val, key) => {
            if (lodash_22(val)) {
                return val.map((val) => {
                    if (lodash_23(val)) {
                        return parseScalars(val, fieldMap);
                    }
                    else {
                        return val && fieldMap.has(key) ? fieldMap.get(key).parseValue(val) : val;
                    }
                });
            }
            else if (lodash_23(val)) {
                if (key === 'range' || key === 'match') {
                    return parseScalars(val, fieldMap);
                }
                else {
                    return val;
                }
            }
            else {
                return val && fieldMap.has(key) ? fieldMap.get(key).parseValue(val) : val;
            }
        });
    };
    const filterArgs = {
        'filter': { type: 'JSON' },
        'sort': { type: 'JSON' },
        'first': { type: 'Int' },
        'last': { type: 'Int' },
        'offset': { type: 'Int' },
        'before': { type: 'String' },
        'after': { type: 'String' }
    };
    const parseFilter = (filter, type) => {
        if (!isObjectType(type) && !isInterfaceType(type)) {
            return filter;
        }
        if (!filter || !lodash_23(filter) || lodash_22(filter)) {
            return filter;
        }
        const fieldMap = new Map();
        lodash_16(type.getFields(), field => {
            if (filter[field.name]) {
                if (filter['and']) {
                    filter['and'].push({ exists: { [field.name]: true } });
                }
                else {
                    lodash_7(filter, `exists.${field.name}`, true);
                }
            }
            const fieldOutputType = getReturnGraphQLType(field.type);
            if (isScalarType(fieldOutputType)) {
                fieldMap.set(field.name, fieldOutputType);
            }
        });
        const scalarsParsed = parseScalars(lodash_1(filter, ['not', 'or', 'and', 'range', 'match']), fieldMap);
        return Object.assign(filter, scalarsParsed);
    };
    const filterNested = (filter, sort, type, fortuneReturn, cache, dataResolver) => __awaiter(undefined, void 0, void 0, function* () {
        // if they have nested filters on types we need to get that data now so we can filter at this root query
        const pullIds = new Set();
        if (filter && isObjectType(type) || isInterfaceType(type)) {
            yield Promise.all(lodash_24(type.getFields(), (field) => __awaiter(this, void 0, void 0, function* () {
                const currFilter = filter[field.name] ? filter[field.name] : filter[`f_${field.name}`] ? filter[`f_${field.name}`] : null;
                const currSort = sort && sort[field.name] ? sort[field.name] : sort && sort[`f_${field.name}`] ? sort[`f_${field.name}`] : null;
                if (currFilter) {
                    const childType = getReturnGraphQLType(field.type);
                    const options = parseFilter(currFilter, childType);
                    yield Promise.all(fortuneReturn.map((result) => __awaiter(this, void 0, void 0, function* () {
                        const childIds = result[field.name];
                        if (childIds && !lodash_21(childIds)) {
                            if (currSort) {
                                options.sort = currSort;
                            }
                            let childReturn = yield dataResolver.find(childType.name, childIds, options);
                            if (lodash_22(childReturn)) {
                                const recursePullIds = yield filterNested(options, currSort, childType, childReturn, cache, dataResolver);
                                childReturn = childReturn ? childReturn.filter(result => !recursePullIds.has(result.id)) : childReturn;
                            }
                            if (childReturn && !lodash_21(childReturn)) {
                                cache.set(childReturn.id, childReturn);
                            }
                            else {
                                pullIds.add(result.id);
                            }
                        }
                    })));
                }
            })));
        }
        return pullIds;
    });
    const getPayloadTypeName = (typeName) => {
        return `${typeName}Payload`;
    };
    const getPayloadTypeDef = (typeName) => {
        return `
		type ${getPayloadTypeName(typeName)} {
			data: ${typeName}!
			clientMutationId: String
		}`;
    };

    class FortuneGraph {
        constructor(fortuneOptions, schemaInfo) {
            this.create = (graphQLTypeName, records, include, meta) => __awaiter(this, void 0, void 0, function* () {
                console.log('create', records);
                const fortuneType = this.getFortuneTypeName(graphQLTypeName);
                records['__typename'] = graphQLTypeName;
                let results = yield this.store.create(fortuneType, records, include, meta);
                results = results.payload.records;
                return lodash_22(records) ? results : results[0];
            });
            this.find = (graphQLTypeName, ids, options, include, meta) => __awaiter(this, void 0, void 0, function* () {
                const fortuneType = this.getFortuneTypeName(graphQLTypeName);
                options = options ? options : {};
                if (!ids || ids.length < 1) {
                    lodash_7(options, 'match.__typename', graphQLTypeName);
                }
                const results = yield this.store.find(fortuneType, ids, options, include, meta);
                let graphReturn = results.payload.records;
                if (graphReturn) {
                    // if one id sent in we just want to return the value not an array
                    graphReturn = ids && ids.length === 1 ? graphReturn[0] : graphReturn;
                }
                if (!graphReturn) {
                    console.log('Nothing Found ' + graphQLTypeName + ' ' + JSON.stringify(ids));
                }
                return graphReturn;
            });
            this.generateUpdates = (record, options = {}) => {
                const updates = { id: record['id'], replace: {}, push: {}, pull: {} };
                for (const argName in record) {
                    const arg = record[argName];
                    if (argName !== 'id') {
                        if (lodash_22(arg)) {
                            if (options['pull']) {
                                updates.pull[argName] = arg;
                            }
                            else {
                                updates.push[argName] = arg;
                            }
                        }
                        else {
                            updates.replace[argName] = arg;
                        }
                    }
                }
                return updates;
            };
            this.update = (graphQLTypeName, records, meta, options) => __awaiter(this, void 0, void 0, function* () {
                console.log('update', records);
                const updates = lodash_22(records) ? records.map(value => this.generateUpdates(value, options)) : this.generateUpdates(records, options);
                const fortuneType = this.getFortuneTypeName(graphQLTypeName);
                let results = yield this.store.update(fortuneType, updates, meta);
                results = results.payload.records;
                return lodash_22(records) ? results : results[0];
            });
            this.delete = (graphQLTypeName, ids, meta) => __awaiter(this, void 0, void 0, function* () {
                const fortuneType = this.getFortuneTypeName(graphQLTypeName);
                yield this.store.delete(fortuneType, ids, meta);
                return true;
            });
            this.getLink = (graphQLTypeName, field) => {
                const fortuneType = this.getFortuneTypeName(graphQLTypeName);
                return lodash_17(this.store, `recordTypes.${fortuneType}.${field}.link`);
            };
            this.getStore = () => {
                if (!this.store) {
                    this.store = this.buildFortune();
                }
                return this.store;
            };
            this.computeFortuneTypeNames = () => {
                this.fortuneTypeNames = new Map();
                lodash_16(lodash_25(this.schemaInfo), (typeName) => {
                    if (typeName !== 'Node' && !this.fortuneTypeNames.has(typeName)) {
                        const type = this.schemaInfo[typeName];
                        if (!lodash_21(type.possibleTypes)) {
                            const possibleTypes = [type.name];
                            lodash_16(type.possibleTypes, possibleType => {
                                if (possibleTypes.indexOf(possibleType.name) < 0) {
                                    possibleTypes.push(possibleType.name);
                                }
                                possibleType = this.schemaInfo[possibleType.name];
                                lodash_16(possibleType.interfaces, currInterface => {
                                    if (currInterface.name !== 'Node' && currInterface.name !== typeName) {
                                        if (possibleTypes.indexOf(currInterface.name) < 0) {
                                            possibleTypes.push(currInterface.name);
                                        }
                                    }
                                });
                                lodash_16(possibleType.unions, currUnion => {
                                    if (currUnion.name !== typeName) {
                                        if (possibleTypes.indexOf(currUnion.name) < 0) {
                                            possibleTypes.push(currUnion.name);
                                        }
                                    }
                                });
                            });
                            possibleTypes.sort();
                            const fortuneTypeName = possibleTypes.join('_');
                            lodash_16(possibleTypes, currTypeName => {
                                this.fortuneTypeNames.set(currTypeName, fortuneTypeName);
                            });
                        }
                    }
                });
                return this.fortuneTypeNames;
            };
            this.getFortuneTypeName = (name) => {
                return this.fortuneTypeNames.has(name) ? this.fortuneTypeNames.get(name) : name;
            };
            this.buildFortune = () => {
                this.computeFortuneTypeNames();
                const relations = computeRelations(this.schemaInfo, this.getFortuneTypeName);
                const fortuneConfig = {};
                lodash_13(this.schemaInfo, (type, name) => {
                    if (type.kind === 'OBJECT' && name !== 'Query' && name !== 'Mutation' && name !== 'Subscription') {
                        const fields = {};
                        lodash_13(type.fields, (field) => {
                            if (field.name !== 'id') {
                                let currType = field.type;
                                let isArray = false;
                                while (currType.kind === 'NON_NULL' || currType.kind === 'LIST') {
                                    if (currType.kind === 'LIST') {
                                        isArray = true;
                                    }
                                    currType = currType.ofType;
                                }
                                currType = currType.kind === 'ENUM' ? 'String' : currType.name;
                                if (currType === 'ID' || currType === 'String') {
                                    currType = String;
                                }
                                else if (currType === 'Int' || currType === 'Float') {
                                    currType = Number;
                                }
                                else if (currType === 'Boolean') {
                                    currType = Boolean;
                                }
                                else if (currType === 'JSON') {
                                    currType = Object;
                                }
                                else if (currType === 'Date' || currType === 'Time' || currType === 'DateTime') {
                                    currType = Date;
                                }
                                let inverse;
                                if (lodash_9(currType)) {
                                    currType = this.getFortuneTypeName(currType);
                                    const relation = lodash_17(field, 'metadata.relation');
                                    if (!lodash_21(relation) && relation.name) {
                                        inverse = relations.getInverse(relation.name, currType, field.name);
                                    }
                                }
                                currType = isArray ? Array(currType) : currType;
                                if (inverse) {
                                    currType = [currType, inverse];
                                }
                                fields[field.name] = currType;
                            }
                            fields['__typename'] = String;
                        });
                        const fortuneName = this.getFortuneTypeName(name);
                        const fortuneConfigForName = fortuneConfig[fortuneName] ? fortuneConfig[fortuneName] : {};
                        lodash_16(lodash_25(fields), (fieldName) => {
                            const currType = fortuneConfigForName[fieldName];
                            const newType = fields[fieldName];
                            if (!currType) {
                                fortuneConfigForName[fieldName] = newType;
                            }
                            else {
                                let badSchema = typeof newType !== typeof currType;
                                badSchema = badSchema ? badSchema : !lodash_10(fortuneConfigForName[fieldName], fields[fieldName]);
                                if (badSchema) {
                                    console.error('Bad schema. Types that share unions/interfaces have fields of the same name but different types. This is not allowed\n', 'fortune type', fortuneName, '\n', 'field name', fieldName, '\n', 'currType', fortuneConfigForName[fieldName], '\n', 'newType', fields[fieldName]);
                                }
                            }
                        });
                        fortuneConfig[fortuneName] = fortuneConfigForName;
                    }
                });
                const store = lib(fortuneConfig, this.fortuneOptions);
                window['store'] = store;
                return store;
            };
            this.fortuneOptions = fortuneOptions;
            this.schemaInfo = schemaInfo;
            this.store = this.buildFortune();
        }
    }

    var pluralize = createCommonjsModule(function (module, exports) {
    /* global define */

    (function (root, pluralize) {
      /* istanbul ignore else */
      if (typeof commonjsRequire === 'function' && 'object' === 'object' && 'object' === 'object') {
        // Node.
        module.exports = pluralize();
      } else if (typeof undefined === 'function' && undefined.amd) {
        // AMD, registers as an anonymous module.
        undefined(function () {
          return pluralize();
        });
      } else {
        // Browser global.
        root.pluralize = pluralize();
      }
    })(commonjsGlobal, function () {
      // Rule storage - pluralize and singularize need to be run sequentially,
      // while other rules can be optimized using an object for instant lookups.
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};

      /**
       * Sanitize a pluralization rule to a usable regular expression.
       *
       * @param  {(RegExp|string)} rule
       * @return {RegExp}
       */
      function sanitizeRule (rule) {
        if (typeof rule === 'string') {
          return new RegExp('^' + rule + '$', 'i');
        }

        return rule;
      }

      /**
       * Pass in a word token to produce a function that can replicate the case on
       * another word.
       *
       * @param  {string}   word
       * @param  {string}   token
       * @return {Function}
       */
      function restoreCase (word, token) {
        // Tokens are an exact match.
        if (word === token) return token;

        // Upper cased words. E.g. "HELLO".
        if (word === word.toUpperCase()) return token.toUpperCase();

        // Title cased words. E.g. "Title".
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }

        // Lower cased words. E.g. "test".
        return token.toLowerCase();
      }

      /**
       * Interpolate a regexp string.
       *
       * @param  {string} str
       * @param  {Array}  args
       * @return {string}
       */
      function interpolate (str, args) {
        return str.replace(/\$(\d{1,2})/g, function (match, index) {
          return args[index] || '';
        });
      }

      /**
       * Replace a word using a rule.
       *
       * @param  {string} word
       * @param  {Array}  rule
       * @return {string}
       */
      function replace (word, rule) {
        return word.replace(rule[0], function (match, index) {
          var result = interpolate(rule[1], arguments);

          if (match === '') {
            return restoreCase(word[index - 1], result);
          }

          return restoreCase(match, result);
        });
      }

      /**
       * Sanitize a word by passing in the word and sanitization rules.
       *
       * @param  {string}   token
       * @param  {string}   word
       * @param  {Array}    rules
       * @return {string}
       */
      function sanitizeWord (token, word, rules) {
        // Empty string or doesn't need fixing.
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }

        var len = rules.length;

        // Iterate over the sanitization rules and use the first one to match.
        while (len--) {
          var rule = rules[len];

          if (rule[0].test(word)) return replace(word, rule);
        }

        return word;
      }

      /**
       * Replace a word with the updated word.
       *
       * @param  {Object}   replaceMap
       * @param  {Object}   keepMap
       * @param  {Array}    rules
       * @return {Function}
       */
      function replaceWord (replaceMap, keepMap, rules) {
        return function (word) {
          // Get the correct token and case restoration functions.
          var token = word.toLowerCase();

          // Check against the keep object map.
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }

          // Check against the replacement map for a direct word replacement.
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }

          // Run all the rules against the word.
          return sanitizeWord(token, word, rules);
        };
      }

      /**
       * Check if a word is part of the map.
       */
      function checkWord (replaceMap, keepMap, rules, bool) {
        return function (word) {
          var token = word.toLowerCase();

          if (keepMap.hasOwnProperty(token)) return true;
          if (replaceMap.hasOwnProperty(token)) return false;

          return sanitizeWord(token, token, rules) === token;
        };
      }

      /**
       * Pluralize or singularize a word based on the passed in count.
       *
       * @param  {string}  word
       * @param  {number}  count
       * @param  {boolean} inclusive
       * @return {string}
       */
      function pluralize (word, count, inclusive) {
        var pluralized = count === 1
          ? pluralize.singular(word) : pluralize.plural(word);

        return (inclusive ? count + ' ' : '') + pluralized;
      }

      /**
       * Pluralize a word.
       *
       * @type {Function}
       */
      pluralize.plural = replaceWord(
        irregularSingles, irregularPlurals, pluralRules
      );

      /**
       * Check if a word is plural.
       *
       * @type {Function}
       */
      pluralize.isPlural = checkWord(
        irregularSingles, irregularPlurals, pluralRules
      );

      /**
       * Singularize a word.
       *
       * @type {Function}
       */
      pluralize.singular = replaceWord(
        irregularPlurals, irregularSingles, singularRules
      );

      /**
       * Check if a word is singular.
       *
       * @type {Function}
       */
      pluralize.isSingular = checkWord(
        irregularPlurals, irregularSingles, singularRules
      );

      /**
       * Add a pluralization rule to the collection.
       *
       * @param {(string|RegExp)} rule
       * @param {string}          replacement
       */
      pluralize.addPluralRule = function (rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };

      /**
       * Add a singularization rule to the collection.
       *
       * @param {(string|RegExp)} rule
       * @param {string}          replacement
       */
      pluralize.addSingularRule = function (rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };

      /**
       * Add an uncountable word rule.
       *
       * @param {(string|RegExp)} word
       */
      pluralize.addUncountableRule = function (word) {
        if (typeof word === 'string') {
          uncountables[word.toLowerCase()] = true;
          return;
        }

        // Set singular and plural references for the word.
        pluralize.addPluralRule(word, '$0');
        pluralize.addSingularRule(word, '$0');
      };

      /**
       * Add an irregular word definition.
       *
       * @param {string} single
       * @param {string} plural
       */
      pluralize.addIrregularRule = function (single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();

        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };

      /**
       * Irregular rules.
       */
      [
        // Pronouns.
        ['I', 'we'],
        ['me', 'us'],
        ['he', 'they'],
        ['she', 'they'],
        ['them', 'them'],
        ['myself', 'ourselves'],
        ['yourself', 'yourselves'],
        ['itself', 'themselves'],
        ['herself', 'themselves'],
        ['himself', 'themselves'],
        ['themself', 'themselves'],
        ['is', 'are'],
        ['was', 'were'],
        ['has', 'have'],
        ['this', 'these'],
        ['that', 'those'],
        // Words ending in with a consonant and `o`.
        ['echo', 'echoes'],
        ['dingo', 'dingoes'],
        ['volcano', 'volcanoes'],
        ['tornado', 'tornadoes'],
        ['torpedo', 'torpedoes'],
        // Ends with `us`.
        ['genus', 'genera'],
        ['viscus', 'viscera'],
        // Ends with `ma`.
        ['stigma', 'stigmata'],
        ['stoma', 'stomata'],
        ['dogma', 'dogmata'],
        ['lemma', 'lemmata'],
        ['schema', 'schemata'],
        ['anathema', 'anathemata'],
        // Other irregular rules.
        ['ox', 'oxen'],
        ['axe', 'axes'],
        ['die', 'dice'],
        ['yes', 'yeses'],
        ['foot', 'feet'],
        ['eave', 'eaves'],
        ['goose', 'geese'],
        ['tooth', 'teeth'],
        ['quiz', 'quizzes'],
        ['human', 'humans'],
        ['proof', 'proofs'],
        ['carve', 'carves'],
        ['valve', 'valves'],
        ['looey', 'looies'],
        ['thief', 'thieves'],
        ['groove', 'grooves'],
        ['pickaxe', 'pickaxes'],
        ['whiskey', 'whiskies']
      ].forEach(function (rule) {
        return pluralize.addIrregularRule(rule[0], rule[1]);
      });

      /**
       * Pluralization rules.
       */
      [
        [/s?$/i, 's'],
        [/[^\u0000-\u007F]$/i, '$0'],
        [/([^aeiou]ese)$/i, '$1'],
        [/(ax|test)is$/i, '$1es'],
        [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
        [/(e[mn]u)s?$/i, '$1s'],
        [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
        [/(seraph|cherub)(?:im)?$/i, '$1im'],
        [/(her|at|gr)o$/i, '$1oes'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
        [/sis$/i, 'ses'],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
        [/([^aeiouy]|qu)y$/i, '$1ies'],
        [/([^ch][ieo][ln])ey$/i, '$1ies'],
        [/(x|ch|ss|sh|zz)$/i, '$1es'],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
        [/(m|l)(?:ice|ouse)$/i, '$1ice'],
        [/(pe)(?:rson|ople)$/i, '$1ople'],
        [/(child)(?:ren)?$/i, '$1ren'],
        [/eaux$/i, '$0'],
        [/m[ae]n$/i, 'men'],
        ['thou', 'you']
      ].forEach(function (rule) {
        return pluralize.addPluralRule(rule[0], rule[1]);
      });

      /**
       * Singularization rules.
       */
      [
        [/s$/i, ''],
        [/(ss)$/i, '$1'],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
        [/ies$/i, 'y'],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],
        [/\b(mon|smil)ies$/i, '$1ey'],
        [/(m|l)ice$/i, '$1ouse'],
        [/(seraph|cherub)im$/i, '$1'],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
        [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],
        [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],
        [/(test)(?:is|es)$/i, '$1is'],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
        [/(alumn|alg|vertebr)ae$/i, '$1a'],
        [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
        [/(matr|append)ices$/i, '$1ix'],
        [/(pe)(rson|ople)$/i, '$1rson'],
        [/(child)ren$/i, '$1'],
        [/(eau)x?$/i, '$1'],
        [/men$/i, 'man']
      ].forEach(function (rule) {
        return pluralize.addSingularRule(rule[0], rule[1]);
      });

      /**
       * Uncountable rules.
       */
      [
        // Singular words with no plurals.
        'adulthood',
        'advice',
        'agenda',
        'aid',
        'alcohol',
        'ammo',
        'anime',
        'athletics',
        'audio',
        'bison',
        'blood',
        'bream',
        'buffalo',
        'butter',
        'carp',
        'cash',
        'chassis',
        'chess',
        'clothing',
        'cod',
        'commerce',
        'cooperation',
        'corps',
        'debris',
        'diabetes',
        'digestion',
        'elk',
        'energy',
        'equipment',
        'excretion',
        'expertise',
        'flounder',
        'fun',
        'gallows',
        'garbage',
        'graffiti',
        'headquarters',
        'health',
        'herpes',
        'highjinks',
        'homework',
        'housework',
        'information',
        'jeans',
        'justice',
        'kudos',
        'labour',
        'literature',
        'machinery',
        'mackerel',
        'mail',
        'media',
        'mews',
        'moose',
        'music',
        'manga',
        'news',
        'pike',
        'plankton',
        'pliers',
        'pollution',
        'premises',
        'rain',
        'research',
        'rice',
        'salmon',
        'scissors',
        'series',
        'sewage',
        'shambles',
        'shrimp',
        'species',
        'staff',
        'swine',
        'tennis',
        'traffic',
        'transporation',
        'trout',
        'tuna',
        'wealth',
        'welfare',
        'whiting',
        'wildebeest',
        'wildlife',
        'you',
        // Regexes.
        /[^aeiou]ese$/i, // "chinese", "japanese"
        /deer$/i, // "deer", "reindeer"
        /fish$/i, // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i, // "carnivorous"
        /pox$/i, // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize.addUncountableRule);

      return pluralize;
    });
    });

    class GenerateGetAll {
        constructor(dataResolver, objectName, types, $schema) {
            this.dataResolver = dataResolver;
            this.objectName = objectName;
            this.types = types;
            this.schema = $schema;
            this.fields = {};
            this.resolvers = new Map();
            this.generate();
        }
        generate() {
            this.types.forEach(type => {
                const fieldName = `${pluralize(type.name.toLowerCase())}`;
                this.fields[fieldName] = {
                    type: `[${type.name}]`,
                    args: filterArgs
                };
                this.resolvers.set(fieldName, (_root, _args, _context, _info) => __awaiter(this, void 0, void 0, function* () {
                    let options = {};
                    let filter = null;
                    let schemaType = null;
                    if (_args && _args.filter) {
                        schemaType = this.schema.getType(type.name);
                        filter = _args.filter;
                        options = parseFilter(_args.filter, schemaType);
                    }
                    lodash_7(options, 'sort', _args.sort);
                    lodash_7(options, 'limit', _args.first);
                    lodash_7(options, 'offset', _args.offset);
                    let fortuneReturn = yield this.dataResolver.find(type.name, null, options);
                    const cache = new Map();
                    fortuneReturn.forEach(result => {
                        cache.set(result.id, result);
                    });
                    if (filter && isObjectType(schemaType) || isInterfaceType(schemaType)) {
                        const pullIds = yield filterNested(filter, _args.sort, schemaType, fortuneReturn, cache, this.dataResolver);
                        fortuneReturn = fortuneReturn.filter(result => !pullIds.has(result.id));
                    }
                    return fortuneReturn.map((result) => {
                        if (!result) {
                            return result;
                        }
                        return {
                            fortuneReturn: result,
                            cache: cache,
                            filter,
                            __typename: result.__typename
                        };
                    });
                }));
            });
        }
        getResolvers() {
            return new Map([[this.objectName, this.resolvers]]);
        }
        getFieldsOnObject() {
            return new Map([[this.objectName, this.fields]]);
        }
    }

    class InputGenerator {
        constructor($type, $config, $currInputObjectTypes, $schemaInfo, $schema, $relations) {
            this.generateFieldForInput = (fieldName, inputType, defaultValue) => {
                const field = {};
                field[fieldName] = {
                    type: inputType,
                    defaultValue: defaultValue
                };
                return field;
            };
            this.type = $type;
            this.config = $config;
            this.currInputObjectTypes = $currInputObjectTypes;
            this.schemaInfo = $schemaInfo;
            this.schema = $schema;
            this.relations = $relations;
        }
        capFirst(val) {
            return val.charAt(0).toUpperCase() + val.slice(1);
        }
        generateInputTypeForField(field, manyWithout, oneWithout, many, one) {
            let inputType;
            const fieldType = getReturnGraphQLType(field.type);
            const relationFieldName = this.relations.getInverseWithoutName(fieldType.name, field.name);
            const isList = fieldIsArray(field.type);
            // tslint:disable-next-line:prefer-conditional-expression
            if (relationFieldName) {
                inputType = isList ? manyWithout.call(this, fieldType, relationFieldName) : oneWithout.call(this, fieldType, relationFieldName);
            }
            else {
                inputType = isList ? many.call(this, fieldType) : one.call(this, fieldType);
            }
            return inputType;
        }
        generateDummyInputTypeForFieldInfo(field, mutation) {
            let inputType;
            const fieldTypeName = getReturnType(field.type);
            const schemaType = this.schema.getType(fieldTypeName);
            if (isInputType(schemaType)) {
                inputType = schemaType;
            }
            else {
                const isArray = fieldIsArray(field.type);
                let fieldInputName = schemaType.name + Mutation[mutation];
                fieldInputName += isArray ? 'Many' : 'One';
                const relationFieldName = this.relations.getInverseWithoutName(fieldTypeName, field.name);
                fieldInputName += relationFieldName ? 'Without' + this.capFirst(relationFieldName) : '';
                fieldInputName += 'Input';
                inputType = new GraphQLInputObjectType({ name: fieldInputName, fields: {} });
            }
            return inputType;
        }
        generateWhereUniqueInput(fieldType = this.type) {
            const name = fieldType.name + 'WhereUniqueInput';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                const infoType = this.schemaInfo[fieldType.name];
                infoType.fields.forEach(field => {
                    if (lodash_17(field, 'metadata.unique') === true) {
                        const isArray = fieldIsArray(field.type);
                        const schemaType = this.schema.getType(getReturnType(field.type));
                        let inputType;
                        if (isInputType(schemaType)) {
                            inputType = schemaType;
                        }
                        else {
                            const fieldInputName = schemaType.name + 'WhereUniqueInput';
                            inputType = new GraphQLInputObjectType({ name: fieldInputName, fields: {} });
                        }
                        if (isArray) {
                            inputType = new GraphQLList(inputType);
                        }
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(field, 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateWithoutInput(fieldType, relationFieldName) {
            let name = fieldType.name + 'Create';
            name += relationFieldName ? 'Without' + this.capFirst(relationFieldName) : '';
            name += 'Input';
            if (!relationFieldName) {
                return new GraphQLInputObjectType({ name, fields: {} });
            }
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                const infoType = this.schemaInfo[fieldType.name];
                infoType.fields.forEach(field => {
                    if (field.name !== relationFieldName && field.name !== 'id') {
                        let inputType = this.generateDummyInputTypeForFieldInfo(field, Mutation.Create);
                        if (field.type.kind === 'NON_NULL') {
                            inputType = new GraphQLNonNull(inputType);
                        }
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(field, 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateManyWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'CreateManyWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: new GraphQLList(new GraphQLNonNull(this.generateCreateWithoutInput(fieldType, relationFieldName))) };
                fields['connect'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateOneWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'CreateOneWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: this.generateCreateWithoutInput(fieldType, relationFieldName) };
                fields['connect'] = { type: this.generateWhereUniqueInput(fieldType) };
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateManyInput(fieldType) {
            const name = fieldType.name + 'CreateManyInput';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = new GraphQLList(new GraphQLNonNull(this.generateCreateWithoutInput(fieldType)));
                fields['connect'] = new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType)));
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateOneInput(fieldType) {
            const name = fieldType.name + 'CreateOneInput';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = this.generateCreateWithoutInput(fieldType);
                fields['connect'] = this.generateWhereUniqueInput(fieldType);
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateCreateInput() {
            const name = this.type.name + 'CreateInput';
            const fields = {};
            if (isObjectType(this.type) && !this.currInputObjectTypes.has(name)) {
                lodash_16(this.type.getFields(), field => {
                    if (field.name !== 'id') {
                        let inputType;
                        if (isInputType(field.type)) {
                            inputType = field.type;
                        }
                        else {
                            inputType = this.generateInputTypeForField(field, this.generateCreateManyWithoutInput, this.generateCreateOneWithoutInput, this.generateCreateManyInput, this.generateCreateOneInput);
                            if (isNonNullType(field.type)) {
                                inputType = new GraphQLNonNull(inputType);
                            }
                        }
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(this.schemaInfo[this.type.name].fields.find((introField) => introField.name === field.name), 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateWithoutInput(fieldType, relationFieldName) {
            let name = fieldType.name + 'Update';
            name += relationFieldName ? 'Without' + this.capFirst(relationFieldName) : '';
            name += 'Input';
            if (!relationFieldName) {
                return new GraphQLInputObjectType({ name, fields: {} });
            }
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                const infoType = this.schemaInfo[fieldType.name];
                infoType.fields.forEach(field => {
                    if (field.name !== relationFieldName && field.name !== 'id') {
                        const inputType = this.generateDummyInputTypeForFieldInfo(field, Mutation.Update);
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(field, 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateWithWhereUniqueWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'UpdateWithWhereUniqueWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['data'] = { type: new GraphQLNonNull(this.generateUpdateWithoutInput(fieldType, relationFieldName)) };
                fields['where'] = { type: new GraphQLNonNull(this.generateWhereUniqueInput(fieldType)) };
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateManyWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'UpdateManyWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: new GraphQLList(new GraphQLNonNull(this.generateCreateWithoutInput(fieldType, relationFieldName))) };
                fields['connect'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['disconnect'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['delete'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['update'] = { type: new GraphQLList(new GraphQLNonNull(this.generateUpdateWithWhereUniqueWithoutInput(fieldType, relationFieldName))) };
                if (this.config.generateUpsert) {
                    fields['upsert'] = { type: new GraphQLList(new GraphQLNonNull(this.generateUpsertWithWhereUniqueWithoutInput(fieldType, relationFieldName))) };
                }
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateOneWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'UpdateOneWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: this.generateCreateWithoutInput(fieldType, relationFieldName) };
                fields['connect'] = { type: this.generateWhereUniqueInput(fieldType) };
                fields['disconnect'] = { type: GraphQLBoolean };
                fields['delete'] = { type: GraphQLBoolean };
                fields['update'] = { type: this.generateUpdateWithoutInput(fieldType, relationFieldName) };
                if (this.config.generateUpsert) {
                    fields['upsert'] = { type: this.generateUpsertWithoutInput(fieldType, relationFieldName) };
                }
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateManyInput(fieldType) {
            const name = fieldType.name + 'UpdateManyInput';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: new GraphQLList(new GraphQLNonNull(this.generateCreateWithoutInput(fieldType))) };
                fields['connect'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['disconnect'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['delete'] = { type: new GraphQLList(new GraphQLNonNull(this.generateWhereUniqueInput(fieldType))) };
                fields['update'] = { type: new GraphQLList(new GraphQLNonNull(this.generateUpdateWithWhereUniqueWithoutInput(fieldType))) };
                if (this.config.generateUpsert) {
                    fields['upsert'] = { type: new GraphQLList(new GraphQLNonNull(this.generateUpsertWithWhereUniqueWithoutInput(fieldType))) };
                }
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateOneInput(fieldType) {
            const name = fieldType.name + 'UpdateOneInput';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['create'] = { type: this.generateCreateWithoutInput(fieldType) };
                fields['connect'] = { type: this.generateWhereUniqueInput(fieldType) };
                fields['disconnect'] = { type: GraphQLBoolean };
                fields['delete'] = { type: GraphQLBoolean };
                fields['update'] = { type: this.generateUpdateWithoutInput(fieldType) };
                if (this.config.generateUpsert) {
                    fields['upsert'] = { type: this.generateUpsertWithoutInput(fieldType) };
                }
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpdateInput() {
            const name = this.type.name + 'UpdateInput';
            const fields = {};
            if (isObjectType(this.type) && !this.currInputObjectTypes.has(name)) {
                lodash_16(this.type.getFields(), field => {
                    if (field.name !== 'id') {
                        let inputType;
                        if (isInputType(field.type)) {
                            inputType = stripNonNull(field.type);
                        }
                        else {
                            inputType = this.generateInputTypeForField(field, this.generateUpdateManyWithoutInput, this.generateUpdateOneWithoutInput, this.generateUpdateManyInput, this.generateUpdateOneInput);
                        }
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(this.schemaInfo[this.type.name].fields.find((introField) => introField.name === field.name), 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpsertWithoutInput(fieldType, relationFieldName) {
            let name = fieldType.name + 'Upsert';
            name += relationFieldName ? 'Without' + this.capFirst(relationFieldName) : '';
            name += 'Input';
            if (!relationFieldName) {
                return new GraphQLInputObjectType({ name, fields: {} });
            }
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                const infoType = this.schemaInfo[fieldType.name];
                infoType.fields.forEach(field => {
                    if (field.name !== relationFieldName && field.name !== 'id') {
                        const inputType = this.generateDummyInputTypeForFieldInfo(field, Mutation.Upsert);
                        lodash_18(fields, this.generateFieldForInput(field.name, inputType, lodash_17(field, 'metadata.defaultValue')));
                    }
                });
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
        generateUpsertWithWhereUniqueWithoutInput(fieldType, relationFieldName) {
            const name = fieldType.name + 'UpsertWithWhereUniqueWithout' + this.capFirst(relationFieldName) + 'Input';
            if (!this.currInputObjectTypes.has(name)) {
                const fields = {};
                fields['update'] = { type: new GraphQLNonNull(this.generateUpdateWithoutInput(fieldType, relationFieldName)) };
                fields['create'] = { type: new GraphQLNonNull(this.generateCreateWithoutInput(fieldType, relationFieldName)) };
                fields['where'] = { type: new GraphQLNonNull(this.generateWhereUniqueInput(fieldType)) };
                this.currInputObjectTypes.set(name, new GraphQLInputObjectType({
                    name,
                    fields
                }));
            }
            return this.currInputObjectTypes.get(name);
        }
    }

    class GenerateCreate {
        constructor(dataResolver, objectName, types, $config, currInputObjectTypes, currOutputObjectTypeDefs, schemaInfo, schema, relations) {
            this.dataResolver = dataResolver;
            this.objectName = objectName;
            this.types = types;
            this.config = $config;
            this.currInputObjectTypes = currInputObjectTypes;
            this.currOutputObjectTypeDefs = currOutputObjectTypeDefs;
            this.schema = schema;
            this.schemaInfo = schemaInfo;
            this.relations = relations;
            this.fields = {};
            this.resolvers = new Map();
            this.generate();
        }
        generate() {
            console.log('generate create');
            this.types.forEach(type => {
                const args = {};
                const createInputName = `Create${type.name}MutationInput`;
                const createInput = new GraphQLInputObjectType({
                    name: createInputName,
                    fields: {
                        data: { type: new GraphQLNonNull(new InputGenerator(this.schema.getType(type.name), this.config, this.currInputObjectTypes, this.schemaInfo, this.schema, this.relations).generateCreateInput()) },
                        clientMutationId: { type: GraphQLString }
                    }
                });
                this.currInputObjectTypes.set(createInputName, createInput);
                args['input'] = {
                    type: new GraphQLNonNull(createInput)
                };
                const outputTypeName = getPayloadTypeName(type.name);
                this.fields[`create${type.name}`] = {
                    type: outputTypeName,
                    args: args
                };
                this.currOutputObjectTypeDefs.add(getPayloadTypeDef(type.name));
                this.resolvers.set(`create${type.name}`, createResolver(this.dataResolver));
            });
        }
        getResolvers() {
            return new Map([[this.objectName, this.resolvers]]);
        }
        getFieldsOnObject() {
            return new Map([[this.objectName, this.fields]]);
        }
    }

    class GenerateUpdate {
        constructor(dataResolver, objectName, types, $config, currInputObjectTypes, currOutputObjectTypeDefs, schemaInfo, schema, $relations) {
            this.dataResolver = dataResolver;
            this.objectName = objectName;
            this.types = types;
            this.config = $config;
            this.currInputObjectTypes = currInputObjectTypes;
            this.currOutputObjectTypeDefs = currOutputObjectTypeDefs;
            this.schema = schema;
            this.schemaInfo = schemaInfo;
            this.relations = $relations;
            this.fields = {};
            this.resolvers = new Map();
            this.generate();
        }
        generate() {
            this.types.forEach(type => {
                const args = {};
                const generator = new InputGenerator(this.schema.getType(type.name), this.config, this.currInputObjectTypes, this.schemaInfo, this.schema, this.relations);
                const updateInputName = `Update${type.name}MutationInput`;
                const updateInput = new GraphQLInputObjectType({
                    name: updateInputName,
                    fields: {
                        data: { type: new GraphQLNonNull(generator.generateUpdateInput()) },
                        where: { type: new GraphQLNonNull(generator.generateWhereUniqueInput()) },
                        clientMutationId: { type: GraphQLString }
                    }
                });
                this.currInputObjectTypes.set(updateInputName, updateInput);
                args['input'] = {
                    type: new GraphQLNonNull(updateInput)
                };
                const outputTypeName = getPayloadTypeName(type.name);
                this.fields[`update${type.name}`] = {
                    type: outputTypeName,
                    args: args
                };
                this.currOutputObjectTypeDefs.add(getPayloadTypeDef(type.name));
                this.resolvers.set(`update${type.name}`, updateResolver(this.dataResolver));
            });
        }
        getResolvers() {
            return new Map([[this.objectName, this.resolvers]]);
        }
        getFieldsOnObject() {
            return new Map([[this.objectName, this.fields]]);
        }
    }

    class GenerateDelete {
        constructor(dataResolver, objectName, types, $config) {
            this.dataResolver = dataResolver;
            this.objectName = objectName;
            this.types = types;
            this.config = $config;
            this.fields = {};
            this.resolvers = new Map();
            this.generate();
        }
        generate() {
            this.types.forEach(type => {
                const args = {};
                args['id'] = {
                    type: new GraphQLNonNull(GraphQLID)
                };
                console.log(this.config);
                this.fields[`delete${type.name}`] = {
                    type: type.name,
                    args: args
                };
                this.resolvers.set(`delete${type.name}`, (_root, _args, _context, _info) => __awaiter(this, void 0, void 0, function* () {
                    const currValue = yield this.dataResolver.find(type.name, [_args['id']]);
                    yield this.dataResolver.delete(type.name, [_args['id']]);
                    return currValue;
                }));
            });
        }
        getResolvers() {
            return new Map([[this.objectName, this.resolvers]]);
        }
        getFieldsOnObject() {
            return new Map([[this.objectName, this.fields]]);
        }
    }

    var schemaVisitor = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });


    var hasOwn = Object.prototype.hasOwnProperty;
    // Abstract base class of any visitor implementation, defining the available
    // visitor methods along with their parameter types, and providing a static
    // helper function for determining whether a subclass implements a given
    // visitor method, as opposed to inheriting one of the stubs defined here.
    var SchemaVisitor = /** @class */ (function () {
        function SchemaVisitor() {
        }
        // Determine if this SchemaVisitor (sub)class implements a particular
        // visitor method.
        SchemaVisitor.implementsVisitorMethod = function (methodName) {
            if (!methodName.startsWith('visit')) {
                return false;
            }
            var method = this.prototype[methodName];
            if (typeof method !== 'function') {
                return false;
            }
            if (this === SchemaVisitor) {
                // The SchemaVisitor class implements every visitor method.
                return true;
            }
            var stub = SchemaVisitor.prototype[methodName];
            if (method === stub) {
                // If this.prototype[methodName] was just inherited from SchemaVisitor,
                // then this class does not really implement the method.
                return false;
            }
            return true;
        };
        // Concrete subclasses of SchemaVisitor should override one or more of these
        // visitor methods, in order to express their interest in handling certain
        // schema types/locations. Each method may return null to remove the given
        // type from the schema, a non-null value of the same type to update the
        // type in the schema, or nothing to leave the type as it was.
        /* tslint:disable:no-empty */
        SchemaVisitor.prototype.visitSchema = function (schema) { };
        SchemaVisitor.prototype.visitScalar = function (scalar) { };
        SchemaVisitor.prototype.visitObject = function (object) { };
        SchemaVisitor.prototype.visitFieldDefinition = function (field, details) { };
        SchemaVisitor.prototype.visitArgumentDefinition = function (argument, details) { };
        SchemaVisitor.prototype.visitInterface = function (iface) { };
        SchemaVisitor.prototype.visitUnion = function (union) { };
        SchemaVisitor.prototype.visitEnum = function (type) { };
        SchemaVisitor.prototype.visitEnumValue = function (value, details) { };
        SchemaVisitor.prototype.visitInputObject = function (object) { };
        SchemaVisitor.prototype.visitInputFieldDefinition = function (field, details) { };
        return SchemaVisitor;
    }());
    exports.SchemaVisitor = SchemaVisitor;
    // Generic function for visiting GraphQLSchema objects.
    function visitSchema(schema, 
        // To accommodate as many different visitor patterns as possible, the
        // visitSchema function does not simply accept a single instance of the
        // SchemaVisitor class, but instead accepts a function that takes the
        // current VisitableSchemaType object and the name of a visitor method and
        // returns an array of SchemaVisitor instances that implement the visitor
        // method and have an interest in handling the given VisitableSchemaType
        // object. In the simplest case, this function can always return an array
        // containing a single visitor object, without even looking at the type or
        // methodName parameters. In other cases, this function might sometimes
        // return an empty array to indicate there are no visitors that should be
        // applied to the given VisitableSchemaType object. For an example of a
        // visitor pattern that benefits from this abstraction, see the
        // SchemaDirectiveVisitor class below.
        visitorSelector) {
        // Helper function that calls visitorSelector and applies the resulting
        // visitors to the given type, with arguments [type, ...args].
        function callMethod(methodName, type) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            visitorSelector(type, methodName).every(function (visitor) {
                var newType = visitor[methodName].apply(visitor, [type].concat(args));
                if (typeof newType === 'undefined') {
                    // Keep going without modifying type.
                    return true;
                }
                if (methodName === 'visitSchema' ||
                    type instanceof _graphql.GraphQLSchema) {
                    throw new Error("Method " + methodName + " cannot replace schema with " + newType);
                }
                if (newType === null) {
                    // Stop the loop and return null form callMethod, which will cause
                    // the type to be removed from the schema.
                    type = null;
                    return false;
                }
                // Update type to the new type returned by the visitor method, so that
                // later directives will see the new type, and callMethod will return
                // the final type.
                type = newType;
            });
            // If there were no directives for this type object, or if all visitor
            // methods returned nothing, type will be returned unmodified.
            return type;
        }
        // Recursive helper function that calls any appropriate visitor methods for
        // each object in the schema, then traverses the object's children (if any).
        function visit(type) {
            if (type instanceof _graphql.GraphQLSchema) {
                // Unlike the other types, the root GraphQLSchema object cannot be
                // replaced by visitor methods, because that would make life very hard
                // for SchemaVisitor subclasses that rely on the original schema object.
                callMethod('visitSchema', type);
                updateEachKey(type.getTypeMap(), function (namedType, typeName) {
                    if (!typeName.startsWith('__')) {
                        // Call visit recursively to let it determine which concrete
                        // subclass of GraphQLNamedType we found in the type map. Because
                        // we're using updateEachKey, the result of visit(namedType) may
                        // cause the type to be removed or replaced.
                        return visit(namedType);
                    }
                });
                return type;
            }
            if (type instanceof _graphql.GraphQLObjectType) {
                // Note that callMethod('visitObject', type) may not actually call any
                // methods, if there are no @directive annotations associated with this
                // type, or if this SchemaDirectiveVisitor subclass does not override
                // the visitObject method.
                var newObject = callMethod('visitObject', type);
                if (newObject) {
                    visitFields(newObject);
                }
                return newObject;
            }
            if (type instanceof _graphql.GraphQLInterfaceType) {
                var newInterface = callMethod('visitInterface', type);
                if (newInterface) {
                    visitFields(newInterface);
                }
                return newInterface;
            }
            if (type instanceof _graphql.GraphQLInputObjectType) {
                var newInputObject_1 = callMethod('visitInputObject', type);
                if (newInputObject_1) {
                    updateEachKey(newInputObject_1.getFields(), function (field) {
                        // Since we call a different method for input object fields, we
                        // can't reuse the visitFields function here.
                        return callMethod('visitInputFieldDefinition', field, {
                            objectType: newInputObject_1,
                        });
                    });
                }
                return newInputObject_1;
            }
            if (type instanceof _graphql.GraphQLScalarType) {
                return callMethod('visitScalar', type);
            }
            if (type instanceof _graphql.GraphQLUnionType) {
                return callMethod('visitUnion', type);
            }
            if (type instanceof _graphql.GraphQLEnumType) {
                var newEnum_1 = callMethod('visitEnum', type);
                if (newEnum_1) {
                    updateEachKey(newEnum_1.getValues(), function (value) {
                        return callMethod('visitEnumValue', value, {
                            enumType: newEnum_1,
                        });
                    });
                }
                return newEnum_1;
            }
            throw new Error("Unexpected schema type: " + type);
        }
        function visitFields(type) {
            updateEachKey(type.getFields(), function (field) {
                // It would be nice if we could call visit(field) recursively here, but
                // GraphQLField is merely a type, not a value that can be detected using
                // an instanceof check, so we have to visit the fields in this lexical
                // context, so that TypeScript can validate the call to
                // visitFieldDefinition.
                var newField = callMethod('visitFieldDefinition', field, {
                    // While any field visitor needs a reference to the field object, some
                    // field visitors may also need to know the enclosing (parent) type,
                    // perhaps to determine if the parent is a GraphQLObjectType or a
                    // GraphQLInterfaceType. To obtain a reference to the parent, a
                    // visitor method can have a second parameter, which will be an object
                    // with an .objectType property referring to the parent.
                    objectType: type,
                });
                if (newField && newField.args) {
                    updateEachKey(newField.args, function (arg) {
                        return callMethod('visitArgumentDefinition', arg, {
                            // Like visitFieldDefinition, visitArgumentDefinition takes a
                            // second parameter that provides additional context, namely the
                            // parent .field and grandparent .objectType. Remember that the
                            // current GraphQLSchema is always available via this.schema.
                            field: newField,
                            objectType: type,
                        });
                    });
                }
                return newField;
            });
        }
        visit(schema);
        // Return the original schema for convenience, even though it cannot have
        // been replaced or removed by the code above.
        return schema;
    }
    exports.visitSchema = visitSchema;
    // Update any references to named schema types that disagree with the named
    // types found in schema.getTypeMap().
    function healSchema(schema) {
        heal(schema);
        return schema;
        function heal(type) {
            if (type instanceof _graphql.GraphQLSchema) {
                var originalTypeMap_1 = type.getTypeMap();
                var actualNamedTypeMap_1 = Object.create(null);
                // If any of the .name properties of the GraphQLNamedType objects in
                // schema.getTypeMap() have changed, the keys of the type map need to
                // be updated accordingly.
                each(originalTypeMap_1, function (namedType, typeName) {
                    if (typeName.startsWith('__')) {
                        return;
                    }
                    var actualName = namedType.name;
                    if (actualName.startsWith('__')) {
                        return;
                    }
                    if (hasOwn.call(actualNamedTypeMap_1, actualName)) {
                        throw new Error("Duplicate schema type name " + actualName);
                    }
                    actualNamedTypeMap_1[actualName] = namedType;
                    // Note: we are deliberately leaving namedType in the schema by its
                    // original name (which might be different from actualName), so that
                    // references by that name can be healed.
                });
                // Now add back every named type by its actual name.
                each(actualNamedTypeMap_1, function (namedType, typeName) {
                    originalTypeMap_1[typeName] = namedType;
                });
                // Directive declaration argument types can refer to named types.
                each(type.getDirectives(), function (decl) {
                    if (decl.args) {
                        each(decl.args, function (arg) {
                            arg.type = healType(arg.type);
                        });
                    }
                });
                each(originalTypeMap_1, function (namedType, typeName) {
                    if (!typeName.startsWith('__')) {
                        heal(namedType);
                    }
                });
                updateEachKey(originalTypeMap_1, function (namedType, typeName) {
                    // Dangling references to renamed types should remain in the schema
                    // during healing, but must be removed now, so that the following
                    // invariant holds for all names: schema.getType(name).name === name
                    if (!typeName.startsWith('__') &&
                        !hasOwn.call(actualNamedTypeMap_1, typeName)) {
                        return null;
                    }
                });
            }
            else if (type instanceof _graphql.GraphQLObjectType) {
                healFields(type);
                each(type.getInterfaces(), function (iface) { return heal(iface); });
            }
            else if (type instanceof _graphql.GraphQLInterfaceType) {
                healFields(type);
            }
            else if (type instanceof _graphql.GraphQLInputObjectType) {
                each(type.getFields(), function (field) {
                    field.type = healType(field.type);
                });
            }
            else if (type instanceof _graphql.GraphQLScalarType) {
                // Nothing to do.
            }
            else if (type instanceof _graphql.GraphQLUnionType) {
                updateEachKey(type.getTypes(), function (t) { return healType(t); });
            }
            else if (type instanceof _graphql.GraphQLEnumType) {
                // Nothing to do.
            }
            else {
                throw new Error("Unexpected schema type: " + type);
            }
        }
        function healFields(type) {
            each(type.getFields(), function (field) {
                field.type = healType(field.type);
                if (field.args) {
                    each(field.args, function (arg) {
                        arg.type = healType(arg.type);
                    });
                }
            });
        }
        function healType(type) {
            if (type instanceof _graphql.GraphQLList ||
                type instanceof _graphql.GraphQLNonNull) {
                // Unwrap the two known wrapper types:
                // https://github.com/graphql/graphql-js/blob/master/src/type/wrappers.js
                type.ofType = healType(type.ofType);
            }
            else if (_graphql.isNamedType(type)) {
                // If a type annotation on a field or an argument or a union member is
                // any `GraphQLNamedType` with a `name`, then it must end up identical
                // to `schema.getType(name)`, since `schema.getTypeMap()` is the source
                // of truth for all named schema types.
                var namedType = type;
                var officialType = schema.getType(namedType.name);
                if (officialType && namedType !== officialType) {
                    return officialType;
                }
            }
            return type;
        }
    }
    exports.healSchema = healSchema;
    // This class represents a reusable implementation of a @directive that may
    // appear in a GraphQL schema written in Schema Definition Language.
    //
    // By overriding one or more visit{Object,Union,...} methods, a subclass
    // registers interest in certain schema types, such as GraphQLObjectType,
    // GraphQLUnionType, etc. When SchemaDirectiveVisitor.visitSchemaDirectives is
    // called with a GraphQLSchema object and a map of visitor subclasses, the
    // overidden methods of those subclasses allow the visitors to obtain
    // references to any type objects that have @directives attached to them,
    // enabling visitors to inspect or modify the schema as appropriate.
    //
    // For example, if a directive called @rest(url: "...") appears after a field
    // definition, a SchemaDirectiveVisitor subclass could provide meaning to that
    // directive by overriding the visitFieldDefinition method (which receives a
    // GraphQLField parameter), and then the body of that visitor method could
    // manipulate the field's resolver function to fetch data from a REST endpoint
    // described by the url argument passed to the @rest directive:
    //
    //   const typeDefs = `
    //   type Query {
    //     people: [Person] @rest(url: "/api/v1/people")
    //   }`;
    //
    //   const schema = makeExecutableSchema({ typeDefs });
    //
    //   SchemaDirectiveVisitor.visitSchemaDirectives(schema, {
    //     rest: class extends SchemaDirectiveVisitor {
    //       public visitFieldDefinition(field: GraphQLField<any, any>) {
    //         const { url } = this.args;
    //         field.resolve = () => fetch(url);
    //       }
    //     }
    //   });
    //
    // The subclass in this example is defined as an anonymous class expression,
    // for brevity. A truly reusable SchemaDirectiveVisitor would most likely be
    // defined in a library using a named class declaration, and then exported for
    // consumption by other modules and packages.
    //
    // See below for a complete list of overridable visitor methods, their
    // parameter types, and more details about the properties exposed by instances
    // of the SchemaDirectiveVisitor class.
    var SchemaDirectiveVisitor = /** @class */ (function (_super) {
        __extends(SchemaDirectiveVisitor, _super);
        // Mark the constructor protected to enforce passing SchemaDirectiveVisitor
        // subclasses (not instances) to visitSchemaDirectives.
        function SchemaDirectiveVisitor(config) {
            var _this = _super.call(this) || this;
            _this.name = config.name;
            _this.args = config.args;
            _this.visitedType = config.visitedType;
            _this.schema = config.schema;
            _this.context = config.context;
            return _this;
        }
        // Override this method to return a custom GraphQLDirective (or modify one
        // already present in the schema) to enforce argument types, provide default
        // argument values, or specify schema locations where this @directive may
        // appear. By default, any declaration found in the schema will be returned.
        SchemaDirectiveVisitor.getDirectiveDeclaration = function (directiveName, schema) {
            return schema.getDirective(directiveName);
        };
        // Call SchemaDirectiveVisitor.visitSchemaDirectives to visit every
        // @directive in the schema and create an appropriate SchemaDirectiveVisitor
        // instance to visit the object decorated by the @directive.
        SchemaDirectiveVisitor.visitSchemaDirectives = function (schema, directiveVisitors, 
            // Optional context object that will be available to all visitor instances
            // via this.context. Defaults to an empty null-prototype object.
            context) {
            // Optional context object that will be available to all visitor instances
            // via this.context. Defaults to an empty null-prototype object.
            if (context === void 0) { context = Object.create(null); }
            // If the schema declares any directives for public consumption, record
            // them here so that we can properly coerce arguments when/if we encounter
            // an occurrence of the directive while walking the schema below.
            var declaredDirectives = this.getDeclaredDirectives(schema, directiveVisitors);
            // Map from directive names to lists of SchemaDirectiveVisitor instances
            // created while visiting the schema.
            var createdVisitors = Object.create(null);
            Object.keys(directiveVisitors).forEach(function (directiveName) {
                createdVisitors[directiveName] = [];
            });
            function visitorSelector(type, methodName) {
                var visitors = [];
                var directiveNodes = type.astNode && type.astNode.directives;
                if (!directiveNodes) {
                    return visitors;
                }
                directiveNodes.forEach(function (directiveNode) {
                    var directiveName = directiveNode.name.value;
                    if (!hasOwn.call(directiveVisitors, directiveName)) {
                        return;
                    }
                    var visitorClass = directiveVisitors[directiveName];
                    // Avoid creating visitor objects if visitorClass does not override
                    // the visitor method named by methodName.
                    if (!visitorClass.implementsVisitorMethod(methodName)) {
                        return;
                    }
                    var decl = declaredDirectives[directiveName];
                    var args;
                    if (decl) {
                        // If this directive was explicitly declared, use the declared
                        // argument types (and any default values) to check, coerce, and/or
                        // supply default values for the given arguments.
                        args = values.getArgumentValues(decl, directiveNode);
                    }
                    else {
                        // If this directive was not explicitly declared, just convert the
                        // argument nodes to their corresponding JavaScript values.
                        args = Object.create(null);
                        directiveNode.arguments.forEach(function (arg) {
                            args[arg.name.value] = valueFromASTUntyped(arg.value);
                        });
                    }
                    // As foretold in comments near the top of the visitSchemaDirectives
                    // method, this is where instances of the SchemaDirectiveVisitor class
                    // get created and assigned names. While subclasses could override the
                    // constructor method, the constructor is marked as protected, so
                    // these are the only arguments that will ever be passed.
                    visitors.push(new visitorClass({
                        name: directiveName,
                        args: args,
                        visitedType: type,
                        schema: schema,
                        context: context,
                    }));
                });
                if (visitors.length > 0) {
                    visitors.forEach(function (visitor) {
                        createdVisitors[visitor.name].push(visitor);
                    });
                }
                return visitors;
            }
            visitSchema(schema, visitorSelector);
            // Automatically update any references to named schema types replaced
            // during the traversal, so implementors don't have to worry about that.
            healSchema(schema);
            return createdVisitors;
        };
        SchemaDirectiveVisitor.getDeclaredDirectives = function (schema, directiveVisitors) {
            var declaredDirectives = Object.create(null);
            each(schema.getDirectives(), function (decl) {
                declaredDirectives[decl.name] = decl;
            });
            // If the visitor subclass overrides getDirectiveDeclaration, and it
            // returns a non-null GraphQLDirective, use that instead of any directive
            // declared in the schema itself. Reasoning: if a SchemaDirectiveVisitor
            // goes to the trouble of implementing getDirectiveDeclaration, it should
            // be able to rely on that implementation.
            each(directiveVisitors, function (visitorClass, directiveName) {
                var decl = visitorClass.getDirectiveDeclaration(directiveName, schema);
                if (decl) {
                    declaredDirectives[directiveName] = decl;
                }
            });
            each(declaredDirectives, function (decl, name) {
                if (!hasOwn.call(directiveVisitors, name)) {
                    // SchemaDirectiveVisitors.visitSchemaDirectives might be called
                    // multiple times with partial directiveVisitors maps, so it's not
                    // necessarily an error for directiveVisitors to be missing an
                    // implementation of a directive that was declared in the schema.
                    return;
                }
                var visitorClass = directiveVisitors[name];
                each(decl.locations, function (loc) {
                    var visitorMethodName = directiveLocationToVisitorMethodName(loc);
                    if (SchemaVisitor.implementsVisitorMethod(visitorMethodName) &&
                        !visitorClass.implementsVisitorMethod(visitorMethodName)) {
                        // While visitor subclasses may implement extra visitor methods,
                        // it's definitely a mistake if the GraphQLDirective declares itself
                        // applicable to certain schema locations, and the visitor subclass
                        // does not implement all the corresponding methods.
                        throw new Error("SchemaDirectiveVisitor for @" + name + " must implement " + visitorMethodName + " method");
                    }
                });
            });
            return declaredDirectives;
        };
        return SchemaDirectiveVisitor;
    }(SchemaVisitor));
    exports.SchemaDirectiveVisitor = SchemaDirectiveVisitor;
    // Convert a string like "FIELD_DEFINITION" to "visitFieldDefinition".
    function directiveLocationToVisitorMethodName(loc) {
        return 'visit' + loc.replace(/([^_]*)_?/g, function (wholeMatch, part) {
            return part.charAt(0).toUpperCase() + part.slice(1).toLowerCase();
        });
    }
    function each(arrayOrObject, callback) {
        Object.keys(arrayOrObject).forEach(function (key) {
            callback(arrayOrObject[key], key);
        });
    }
    // A more powerful version of each that has the ability to replace or remove
    // array or object keys.
    function updateEachKey(arrayOrObject, 
        // The callback can return nothing to leave the key untouched, null to remove
        // the key from the array or object, or a non-null V to replace the value.
        callback) {
        var deletedCount = 0;
        Object.keys(arrayOrObject).forEach(function (key) {
            var result = callback(arrayOrObject[key], key);
            if (typeof result === 'undefined') {
                return;
            }
            if (result === null) {
                delete arrayOrObject[key];
                deletedCount++;
                return;
            }
            arrayOrObject[key] = result;
        });
        if (deletedCount > 0 && Array.isArray(arrayOrObject)) {
            // Remove any holes from the array due to deleted elements.
            arrayOrObject.splice(0).forEach(function (elem) {
                arrayOrObject.push(elem);
            });
        }
    }
    // Similar to the graphql-js function of the same name, slightly simplified:
    // https://github.com/graphql/graphql-js/blob/master/src/utilities/valueFromASTUntyped.js
    function valueFromASTUntyped(valueNode) {
        switch (valueNode.kind) {
            case _graphql.Kind.NULL:
                return null;
            case _graphql.Kind.INT:
                return parseInt(valueNode.value, 10);
            case _graphql.Kind.FLOAT:
                return parseFloat(valueNode.value);
            case _graphql.Kind.STRING:
            case _graphql.Kind.ENUM:
            case _graphql.Kind.BOOLEAN:
                return valueNode.value;
            case _graphql.Kind.LIST:
                return valueNode.values.map(valueFromASTUntyped);
            case _graphql.Kind.OBJECT:
                var obj_1 = Object.create(null);
                valueNode.fields.forEach(function (field) {
                    obj_1[field.name.value] = valueFromASTUntyped(field.value);
                });
                return obj_1;
            /* istanbul ignore next */
            default:
                throw new Error('Unexpected value kind: ' + valueNode.kind);
        }
    }
    //# sourceMappingURL=schemaVisitor.js.map
    });

    unwrapExports(schemaVisitor);
    var schemaVisitor_1 = schemaVisitor.SchemaVisitor;
    var schemaVisitor_2 = schemaVisitor.visitSchema;
    var schemaVisitor_3 = schemaVisitor.healSchema;
    var schemaVisitor_4 = schemaVisitor.SchemaDirectiveVisitor;

    var bld = createCommonjsModule(function (module, exports) {
    /** @internal */
    exports.options = {
        getWarner: undefined
    };
    function createWarner(type, name, alternative, version, url) {
        var warnedPositions = {};
        return function () {
            var stack = (new Error()).stack || '';
            var at = (stack.match(/(?:\s+at\s.+){2}\s+at\s(.+)/) || [undefined, ''])[1];
            if (/\)$/.test(at)) {
                at = at.match(/[^(]+(?=\)$)/)[0];
            }
            else {
                at = at.trim();
            }
            if (at in warnedPositions) {
                return;
            }
            warnedPositions[at] = true;
            var message;
            switch (type) {
                case 'class':
                    message = 'Class';
                    break;
                case 'property':
                    message = 'Property';
                    break;
                case 'method':
                    message = 'Method';
                    break;
                case 'function':
                    message = 'Function';
                    break;
            }
            message += " `" + name + "` has been deprecated";
            if (version) {
                message += " since version " + version;
            }
            if (alternative) {
                message += ", use `" + alternative + "` instead";
            }
            message += '.';
            if (at) {
                message += "\n    at " + at;
            }
            if (url) {
                message += "\nCheck out " + url + " for more information.";
            }
            console.warn(message);
        };
    }
    function decorateProperty(type, name, descriptor, alternative, version, url) {
        var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);
        descriptor = descriptor || {
            writable: true,
            enumerable: false,
            configurable: true
        };
        var deprecatedDescriptor = {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable
        };
        if (descriptor.get || descriptor.set) {
            if (descriptor.get) {
                deprecatedDescriptor.get = function () {
                    warner();
                    return descriptor.get.call(this);
                };
            }
            if (descriptor.set) {
                deprecatedDescriptor.set = function (value) {
                    warner();
                    return descriptor.set.call(this, value);
                };
            }
        }
        else {
            var propertyValue_1 = descriptor.value;
            deprecatedDescriptor.get = function () {
                warner();
                return propertyValue_1;
            };
            if (descriptor.writable) {
                deprecatedDescriptor.set = function (value) {
                    warner();
                    propertyValue_1 = value;
                };
            }
        }
        return deprecatedDescriptor;
    }
    function decorateFunction(type, target, alternative, version, url) {
        var name = target.name;
        var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);
        var fn = function () {
            warner();
            return target.apply(this, arguments);
        };
        for (var _i = 0, _a = Object.getOwnPropertyNames(target); _i < _a.length; _i++) {
            var propertyName = _a[_i];
            var descriptor = Object.getOwnPropertyDescriptor(target, propertyName);
            if (descriptor.writable) {
                fn[propertyName] = target[propertyName];
            }
            else if (descriptor.configurable) {
                Object.defineProperty(fn, propertyName, descriptor);
            }
        }
        return fn;
    }
    function deprecated() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var fn = args[args.length - 1];
        if (typeof fn === 'function') {
            fn = args.pop();
        }
        else {
            fn = undefined;
        }
        var options = args[0];
        var alternative;
        var version;
        var url;
        if (typeof options === 'string') {
            alternative = options;
            version = args[1];
            url = args[2];
        }
        else if (options) {
            (alternative = options.alternative, version = options.version, url = options.url, options);
        }
        if (fn) {
            return decorateFunction('function', fn, alternative, version, url);
        }
        return function (target, name, descriptor) {
            if (typeof name === 'string') {
                var type = descriptor && typeof descriptor.value === 'function' ?
                    'method' : 'property';
                return decorateProperty(type, name, descriptor, alternative, version, url);
            }
            else if (typeof target === 'function') {
                var constructor = decorateFunction('class', target, alternative, version, url);
                var className = target.name;
                for (var _i = 0, _a = Object.getOwnPropertyNames(constructor); _i < _a.length; _i++) {
                    var propertyName = _a[_i];
                    var descriptor_1 = Object.getOwnPropertyDescriptor(constructor, propertyName);
                    descriptor_1 = decorateProperty('class', className, descriptor_1, alternative, version, url);
                    if (descriptor_1.writable) {
                        constructor[propertyName] = target[propertyName];
                    }
                    else if (descriptor_1.configurable) {
                        Object.defineProperty(constructor, propertyName, descriptor_1);
                    }
                }
                return constructor;
            }
        };
    }
    exports.deprecated = deprecated;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = deprecated;
    //# sourceMappingURL=index.js.map
    });

    unwrapExports(bld);
    var bld_1 = bld.options;
    var bld_2 = bld.deprecated;

    var mergeDeep_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function mergeDeep(target, source) {
        var output = Object.assign({}, target);
        if (isObject(target) && isObject(source)) {
            Object.keys(source).forEach(function (key) {
                if (isObject(source[key])) {
                    if (!(key in target)) {
                        Object.assign(output, (_a = {}, _a[key] = source[key], _a));
                    }
                    else {
                        output[key] = mergeDeep(target[key], source[key]);
                    }
                }
                else {
                    Object.assign(output, (_b = {}, _b[key] = source[key], _b));
                }
                var _a, _b;
            });
        }
        return output;
    }
    exports.default = mergeDeep;
    function isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item);
    }
    //# sourceMappingURL=mergeDeep.js.map
    });

    unwrapExports(mergeDeep_1);

    var schemaGenerator = createCommonjsModule(function (module, exports) {
    // Generates a schema for graphql-js given a shorthand schema
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    // TODO: document each function clearly in the code: what arguments it accepts
    // and what it outputs.
    // TODO: we should refactor this file, rename it to makeExecutableSchema, and move
    // a bunch of utility functions into a separate utitlities folder, one file per function.




    // @schemaDefinition: A GraphQL type schema in shorthand
    // @resolvers: Definitions for resolvers to be merged with schema
    var SchemaError = /** @class */ (function (_super) {
        __extends(SchemaError, _super);
        function SchemaError(message) {
            var _this = _super.call(this, message) || this;
            _this.message = message;
            Error.captureStackTrace(_this, _this.constructor);
            return _this;
        }
        return SchemaError;
    }(Error));
    exports.SchemaError = SchemaError;
    // type definitions can be a string or an array of strings.
    function _generateSchema(typeDefinitions, resolveFunctions, logger, 
        // TODO: rename to allowUndefinedInResolve to be consistent
        allowUndefinedInResolve, resolverValidationOptions, parseOptions, inheritResolversFromInterfaces) {
        if (typeof resolverValidationOptions !== 'object') {
            throw new SchemaError('Expected `resolverValidationOptions` to be an object');
        }
        if (!typeDefinitions) {
            throw new SchemaError('Must provide typeDefs');
        }
        if (!resolveFunctions) {
            throw new SchemaError('Must provide resolvers');
        }
        var resolvers = Array.isArray(resolveFunctions)
            ? resolveFunctions
                .filter(function (resolverObj) { return typeof resolverObj === 'object'; })
                .reduce(mergeDeep_1.default, {})
            : resolveFunctions;
        // TODO: check that typeDefinitions is either string or array of strings
        var schema = buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions);
        addResolveFunctionsToSchema({ schema: schema, resolvers: resolvers, resolverValidationOptions: resolverValidationOptions, inheritResolversFromInterfaces: inheritResolversFromInterfaces });
        assertResolveFunctionsPresent(schema, resolverValidationOptions);
        if (!allowUndefinedInResolve) {
            addCatchUndefinedToSchema(schema);
        }
        if (logger) {
            addErrorLoggingToSchema(schema, logger);
        }
        return schema;
    }
    function makeExecutableSchema(_a) {
        var typeDefs = _a.typeDefs, _b = _a.resolvers, resolvers = _b === void 0 ? {} : _b, connectors = _a.connectors, logger = _a.logger, _c = _a.allowUndefinedInResolve, allowUndefinedInResolve = _c === void 0 ? true : _c, _d = _a.resolverValidationOptions, resolverValidationOptions = _d === void 0 ? {} : _d, _e = _a.directiveResolvers, directiveResolvers = _e === void 0 ? null : _e, _f = _a.schemaDirectives, schemaDirectives = _f === void 0 ? null : _f, _g = _a.parseOptions, parseOptions = _g === void 0 ? {} : _g, _h = _a.inheritResolversFromInterfaces, inheritResolversFromInterfaces = _h === void 0 ? false : _h;
        var jsSchema = _generateSchema(typeDefs, resolvers, logger, allowUndefinedInResolve, resolverValidationOptions, parseOptions, inheritResolversFromInterfaces);
        if (typeof resolvers['__schema'] === 'function') {
            // TODO a bit of a hack now, better rewrite generateSchema to attach it there.
            // not doing that now, because I'd have to rewrite a lot of tests.
            addSchemaLevelResolveFunction(jsSchema, resolvers['__schema']);
        }
        if (connectors) {
            // connectors are optional, at least for now. That means you can just import them in the resolve
            // function if you want.
            attachConnectorsToContext(jsSchema, connectors);
        }
        if (directiveResolvers) {
            attachDirectiveResolvers(jsSchema, directiveResolvers);
        }
        if (schemaDirectives) {
            schemaVisitor.SchemaDirectiveVisitor.visitSchemaDirectives(jsSchema, schemaDirectives);
        }
        return jsSchema;
    }
    exports.makeExecutableSchema = makeExecutableSchema;
    function isDocumentNode(typeDefinitions) {
        return typeDefinitions.kind !== undefined;
    }
    function uniq(array) {
        return array.reduce(function (accumulator, currentValue) {
            return accumulator.indexOf(currentValue) === -1
                ? accumulator.concat([currentValue]) : accumulator;
        }, []);
    }
    function concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {
        if (calledFunctionRefs === void 0) { calledFunctionRefs = []; }
        var resolvedTypeDefinitions = [];
        typeDefinitionsAry.forEach(function (typeDef) {
            if (isDocumentNode(typeDef)) {
                typeDef = _graphql.print(typeDef);
            }
            if (typeof typeDef === 'function') {
                if (calledFunctionRefs.indexOf(typeDef) === -1) {
                    calledFunctionRefs.push(typeDef);
                    resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));
                }
            }
            else if (typeof typeDef === 'string') {
                resolvedTypeDefinitions.push(typeDef.trim());
            }
            else {
                var type = typeof typeDef;
                throw new SchemaError("typeDef array must contain only strings and functions, got " + type);
            }
        });
        return uniq(resolvedTypeDefinitions.map(function (x) { return x.trim(); })).join('\n');
    }
    exports.concatenateTypeDefs = concatenateTypeDefs;
    function buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {
        // TODO: accept only array here, otherwise interfaces get confusing.
        var myDefinitions = typeDefinitions;
        var astDocument;
        if (isDocumentNode(typeDefinitions)) {
            astDocument = typeDefinitions;
        }
        else if (typeof myDefinitions !== 'string') {
            if (!Array.isArray(myDefinitions)) {
                var type = typeof myDefinitions;
                throw new SchemaError("typeDefs must be a string, array or schema AST, got " + type);
            }
            myDefinitions = concatenateTypeDefs(myDefinitions);
        }
        if (typeof myDefinitions === 'string') {
            astDocument = _graphql.parse(myDefinitions, parseOptions);
        }
        var backcompatOptions = { commentDescriptions: true };
        // TODO fix types https://github.com/apollographql/graphql-tools/issues/542
        var schema = _graphql.buildASTSchema(astDocument, backcompatOptions);
        var extensionsAst = extractExtensionDefinitions(astDocument);
        if (extensionsAst.definitions.length > 0) {
            // TODO fix types https://github.com/apollographql/graphql-tools/issues/542
            schema = _graphql.extendSchema(schema, extensionsAst, backcompatOptions);
        }
        return schema;
    }
    exports.buildSchemaFromTypeDefinitions = buildSchemaFromTypeDefinitions;
    // This was changed in graphql@0.12
    // See https://github.com/apollographql/graphql-tools/pull/541
    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542
    var oldTypeExtensionDefinitionKind = 'TypeExtensionDefinition';
    var newExtensionDefinitionKind = 'ObjectTypeExtension';
    var interfaceExtensionDefinitionKind = 'InterfaceTypeExtension';
    function extractExtensionDefinitions(ast) {
        var extensionDefs = ast.definitions.filter(function (def) {
            return def.kind === oldTypeExtensionDefinitionKind ||
                def.kind === newExtensionDefinitionKind ||
                def.kind === interfaceExtensionDefinitionKind;
        });
        return Object.assign({}, ast, {
            definitions: extensionDefs,
        });
    }
    exports.extractExtensionDefinitions = extractExtensionDefinitions;
    function forEachField(schema, fn) {
        var typeMap = schema.getTypeMap();
        Object.keys(typeMap).forEach(function (typeName) {
            var type = typeMap[typeName];
            // TODO: maybe have an option to include these?
            if (!_graphql.getNamedType(type).name.startsWith('__') &&
                type instanceof _graphql.GraphQLObjectType) {
                var fields_1 = type.getFields();
                Object.keys(fields_1).forEach(function (fieldName) {
                    var field = fields_1[fieldName];
                    fn(field, typeName, fieldName);
                });
            }
        });
    }
    exports.forEachField = forEachField;
    // takes a GraphQL-JS schema and an object of connectors, then attaches
    // the connectors to the context by wrapping each query or mutation resolve
    // function with a function that attaches connectors if they don't exist.
    // attaches connectors only once to make sure they are singletons
    var attachConnectorsToContext = bld.deprecated({
        version: '0.7.0',
        url: 'https://github.com/apollostack/graphql-tools/issues/140',
    }, function (schema, connectors) {
        if (!schema || !(schema instanceof _graphql.GraphQLSchema)) {
            throw new Error('schema must be an instance of GraphQLSchema. ' +
                'This error could be caused by installing more than one version of GraphQL-JS');
        }
        if (typeof connectors !== 'object') {
            var connectorType = typeof connectors;
            throw new Error("Expected connectors to be of type object, got " + connectorType);
        }
        if (Object.keys(connectors).length === 0) {
            throw new Error('Expected connectors to not be an empty object');
        }
        if (Array.isArray(connectors)) {
            throw new Error('Expected connectors to be of type object, got Array');
        }
        if (schema['_apolloConnectorsAttached']) {
            throw new Error('Connectors already attached to context, cannot attach more than once');
        }
        schema['_apolloConnectorsAttached'] = true;
        var attachconnectorFn = function (root, args, ctx) {
            if (typeof ctx !== 'object') {
                // if in any way possible, we should throw an error when the attachconnectors
                // function is called, not when a query is executed.
                var contextType = typeof ctx;
                throw new Error("Cannot attach connector because context is not an object: " + contextType);
            }
            if (typeof ctx.connectors === 'undefined') {
                ctx.connectors = {};
            }
            Object.keys(connectors).forEach(function (connectorName) {
                var connector = connectors[connectorName];
                if (!!connector.prototype) {
                    ctx.connectors[connectorName] = new connector(ctx);
                }
                else {
                    throw new Error("Connector must be a function or an class");
                }
            });
            return root;
        };
        addSchemaLevelResolveFunction(schema, attachconnectorFn);
    });
    exports.attachConnectorsToContext = attachConnectorsToContext;
    // wraps all resolve functions of query, mutation or subscription fields
    // with the provided function to simulate a root schema level resolve funciton
    function addSchemaLevelResolveFunction(schema, fn) {
        // TODO test that schema is a schema, fn is a function
        var rootTypes = [
            schema.getQueryType(),
            schema.getMutationType(),
            schema.getSubscriptionType(),
        ].filter(function (x) { return !!x; });
        rootTypes.forEach(function (type) {
            // XXX this should run at most once per request to simulate a true root resolver
            // for graphql-js this is an approximation that works with queries but not mutations
            var rootResolveFn = runAtMostOncePerRequest(fn);
            var fields = type.getFields();
            Object.keys(fields).forEach(function (fieldName) {
                // XXX if the type is a subscription, a same query AST will be ran multiple times so we
                // deactivate here the runOnce if it's a subscription. This may not be optimal though...
                if (type === schema.getSubscriptionType()) {
                    fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, fn);
                }
                else {
                    fields[fieldName].resolve = wrapResolver(fields[fieldName].resolve, rootResolveFn);
                }
            });
        });
    }
    exports.addSchemaLevelResolveFunction = addSchemaLevelResolveFunction;
    function getFieldsForType(type) {
        if (type instanceof _graphql.GraphQLObjectType ||
            type instanceof _graphql.GraphQLInterfaceType) {
            return type.getFields();
        }
        else {
            return undefined;
        }
    }
    function addResolveFunctionsToSchema(options, legacyInputResolvers, legacyInputValidationOptions) {
        if (options instanceof _graphql.GraphQLSchema) {
            console.warn('The addResolveFunctionsToSchema function takes named options now; see IAddResolveFunctionsToSchemaOptions');
            options = {
                schema: options,
                resolvers: legacyInputResolvers,
                resolverValidationOptions: legacyInputValidationOptions
            };
        }
        var schema = options.schema, inputResolvers = options.resolvers, _a = options.resolverValidationOptions, resolverValidationOptions = _a === void 0 ? {} : _a, _b = options.inheritResolversFromInterfaces, inheritResolversFromInterfaces = _b === void 0 ? false : _b;
        var _c = resolverValidationOptions.allowResolversNotInSchema, allowResolversNotInSchema = _c === void 0 ? false : _c, requireResolversForResolveType = resolverValidationOptions.requireResolversForResolveType;
        var resolvers = inheritResolversFromInterfaces
            ? extendResolversFromInterfaces(schema, inputResolvers)
            : inputResolvers;
        Object.keys(resolvers).forEach(function (typeName) {
            var type = schema.getType(typeName);
            if (!type && typeName !== '__schema') {
                if (allowResolversNotInSchema) {
                    return;
                }
                throw new SchemaError("\"" + typeName + "\" defined in resolvers, but not in schema");
            }
            Object.keys(resolvers[typeName]).forEach(function (fieldName) {
                if (fieldName.startsWith('__')) {
                    // this is for isTypeOf and resolveType and all the other stuff.
                    type[fieldName.substring(2)] = resolvers[typeName][fieldName];
                    return;
                }
                if (type instanceof _graphql.GraphQLScalarType) {
                    type[fieldName] = resolvers[typeName][fieldName];
                    return;
                }
                if (type instanceof _graphql.GraphQLEnumType) {
                    if (!type.getValue(fieldName)) {
                        throw new SchemaError(typeName + "." + fieldName + " was defined in resolvers, but enum is not in schema");
                    }
                    type.getValue(fieldName)['value'] =
                        resolvers[typeName][fieldName];
                    return;
                }
                // object type
                var fields = getFieldsForType(type);
                if (!fields) {
                    if (allowResolversNotInSchema) {
                        return;
                    }
                    throw new SchemaError(typeName + " was defined in resolvers, but it's not an object");
                }
                if (!fields[fieldName]) {
                    if (allowResolversNotInSchema) {
                        return;
                    }
                    throw new SchemaError(typeName + "." + fieldName + " defined in resolvers, but not in schema");
                }
                var field = fields[fieldName];
                var fieldResolve = resolvers[typeName][fieldName];
                if (typeof fieldResolve === 'function') {
                    // for convenience. Allows shorter syntax in resolver definition file
                    setFieldProperties(field, { resolve: fieldResolve });
                }
                else {
                    if (typeof fieldResolve !== 'object') {
                        throw new SchemaError("Resolver " + typeName + "." + fieldName + " must be object or function");
                    }
                    setFieldProperties(field, fieldResolve);
                }
            });
        });
        checkForResolveTypeResolver(schema, requireResolversForResolveType);
    }
    exports.addResolveFunctionsToSchema = addResolveFunctionsToSchema;
    function extendResolversFromInterfaces(schema, resolvers) {
        var typeNames = Object.keys(__assign({}, schema.getTypeMap(), resolvers));
        var extendedResolvers = {};
        typeNames.forEach(function (typeName) {
            var typeResolvers = resolvers[typeName];
            var type = schema.getType(typeName);
            if (type instanceof _graphql.GraphQLObjectType) {
                var interfaceResolvers = type.getInterfaces().map(function (iFace) { return resolvers[iFace.name]; });
                extendedResolvers[typeName] = Object.assign.apply(Object, [{}].concat(interfaceResolvers, [typeResolvers]));
            }
            else {
                if (typeResolvers) {
                    extendedResolvers[typeName] = typeResolvers;
                }
            }
        });
        return extendedResolvers;
    }
    // If we have any union or interface types throw if no there is no resolveType or isTypeOf resolvers
    function checkForResolveTypeResolver(schema, requireResolversForResolveType) {
        Object.keys(schema.getTypeMap())
            .map(function (typeName) { return schema.getType(typeName); })
            .forEach(function (type) {
            if (!(type instanceof _graphql.GraphQLUnionType || type instanceof _graphql.GraphQLInterfaceType)) {
                return;
            }
            if (!type.resolveType) {
                if (requireResolversForResolveType === false) {
                    return;
                }
                if (requireResolversForResolveType === true) {
                    throw new SchemaError("Type \"" + type.name + "\" is missing a \"resolveType\" resolver");
                }
                // tslint:disable-next-line:max-line-length
                console.warn("Type \"" + type.name + "\" is missing a \"resolveType\" resolver. Pass false into \"resolverValidationOptions.requireResolversForResolveType\" to disable this warning.");
            }
        });
    }
    function setFieldProperties(field, propertiesObj) {
        Object.keys(propertiesObj).forEach(function (propertyName) {
            field[propertyName] = propertiesObj[propertyName];
        });
    }
    function assertResolveFunctionsPresent(schema, resolverValidationOptions) {
        if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }
        var _a = resolverValidationOptions.requireResolversForArgs, requireResolversForArgs = _a === void 0 ? false : _a, _b = resolverValidationOptions.requireResolversForNonScalar, requireResolversForNonScalar = _b === void 0 ? false : _b, _c = resolverValidationOptions.requireResolversForAllFields, requireResolversForAllFields = _c === void 0 ? false : _c;
        if (requireResolversForAllFields &&
            (requireResolversForArgs || requireResolversForNonScalar)) {
            throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +
                'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +
                'requireResolversForNonScalar, but not a combination of them.');
        }
        forEachField(schema, function (field, typeName, fieldName) {
            // requires a resolve function for *every* field.
            if (requireResolversForAllFields) {
                expectResolveFunction(field, typeName, fieldName);
            }
            // requires a resolve function on every field that has arguments
            if (requireResolversForArgs && field.args.length > 0) {
                expectResolveFunction(field, typeName, fieldName);
            }
            // requires a resolve function on every field that returns a non-scalar type
            if (requireResolversForNonScalar &&
                !(_graphql.getNamedType(field.type) instanceof _graphql.GraphQLScalarType)) {
                expectResolveFunction(field, typeName, fieldName);
            }
        });
    }
    exports.assertResolveFunctionsPresent = assertResolveFunctionsPresent;
    function expectResolveFunction(field, typeName, fieldName) {
        if (!field.resolve) {
            console.warn(
            // tslint:disable-next-line: max-line-length
            "Resolve function missing for \"" + typeName + "." + fieldName + "\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131");
            return;
        }
        if (typeof field.resolve !== 'function') {
            throw new SchemaError("Resolver \"" + typeName + "." + fieldName + "\" must be a function");
        }
    }
    function addErrorLoggingToSchema(schema, logger) {
        if (!logger) {
            throw new Error('Must provide a logger');
        }
        if (typeof logger.log !== 'function') {
            throw new Error('Logger.log must be a function');
        }
        forEachField(schema, function (field, typeName, fieldName) {
            var errorHint = typeName + "." + fieldName;
            field.resolve = decorateWithLogger(field.resolve, logger, errorHint);
        });
    }
    exports.addErrorLoggingToSchema = addErrorLoggingToSchema;
    // XXX badly named function. this doesn't really wrap, it just chains resolvers...
    function wrapResolver(innerResolver, outerResolver) {
        return function (obj, args, ctx, info) {
            return Promise.resolve(outerResolver(obj, args, ctx, info)).then(function (root) {
                if (innerResolver) {
                    return innerResolver(root, args, ctx, info);
                }
                return _graphql.defaultFieldResolver(root, args, ctx, info);
            });
        };
    }
    function chainResolvers(resolvers) {
        return function (root, args, ctx, info) {
            return resolvers.reduce(function (prev, curResolver) {
                if (curResolver) {
                    return curResolver(prev, args, ctx, info);
                }
                return _graphql.defaultFieldResolver(prev, args, ctx, info);
            }, root);
        };
    }
    exports.chainResolvers = chainResolvers;
    /*
     * fn: The function to decorate with the logger
     * logger: an object instance of type Logger
     * hint: an optional hint to add to the error's message
     */
    function decorateWithLogger(fn, logger, hint) {
        if (typeof fn === 'undefined') {
            fn = _graphql.defaultFieldResolver;
        }
        var logError = function (e) {
            // TODO: clone the error properly
            var newE = new Error();
            newE.stack = e.stack;
            /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */
            if (hint) {
                newE['originalMessage'] = e.message;
                newE['message'] = "Error in resolver " + hint + "\n" + e.message;
            }
            logger.log(newE);
        };
        return function (root, args, ctx, info) {
            try {
                var result = fn(root, args, ctx, info);
                // If the resolve function returns a Promise log any Promise rejects.
                if (result &&
                    typeof result.then === 'function' &&
                    typeof result.catch === 'function') {
                    result.catch(function (reason) {
                        // make sure that it's an error we're logging.
                        var error = reason instanceof Error ? reason : new Error(reason);
                        logError(error);
                        // We don't want to leave an unhandled exception so pass on error.
                        return reason;
                    });
                }
                return result;
            }
            catch (e) {
                logError(e);
                // we want to pass on the error, just in case.
                throw e;
            }
        };
    }
    function addCatchUndefinedToSchema(schema) {
        forEachField(schema, function (field, typeName, fieldName) {
            var errorHint = typeName + "." + fieldName;
            field.resolve = decorateToCatchUndefined(field.resolve, errorHint);
        });
    }
    exports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;
    function decorateToCatchUndefined(fn, hint) {
        if (typeof fn === 'undefined') {
            fn = _graphql.defaultFieldResolver;
        }
        return function (root, args, ctx, info) {
            var result = fn(root, args, ctx, info);
            if (typeof result === 'undefined') {
                throw new Error("Resolve function for \"" + hint + "\" returned undefined");
            }
            return result;
        };
    }
    // XXX this function only works for resolvers
    // XXX very hacky way to remember if the function
    // already ran for this request. This will only work
    // if people don't actually cache the operation.
    // if they do cache the operation, they will have to
    // manually remove the __runAtMostOnce before every request.
    function runAtMostOncePerRequest(fn) {
        var value;
        var randomNumber = Math.random();
        return function (root, args, ctx, info) {
            if (!info.operation['__runAtMostOnce']) {
                info.operation['__runAtMostOnce'] = {};
            }
            if (!info.operation['__runAtMostOnce'][randomNumber]) {
                info.operation['__runAtMostOnce'][randomNumber] = true;
                value = fn(root, args, ctx, info);
            }
            return value;
        };
    }
    function attachDirectiveResolvers(schema, directiveResolvers) {
        if (typeof directiveResolvers !== 'object') {
            throw new Error("Expected directiveResolvers to be of type object, got " + typeof directiveResolvers);
        }
        if (Array.isArray(directiveResolvers)) {
            throw new Error('Expected directiveResolvers to be of type object, got Array');
        }
        var schemaDirectives = Object.create(null);
        Object.keys(directiveResolvers).forEach(function (directiveName) {
            schemaDirectives[directiveName] = /** @class */ (function (_super) {
                __extends(class_1, _super);
                function class_1() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                class_1.prototype.visitFieldDefinition = function (field) {
                    var _this = this;
                    var resolver = directiveResolvers[directiveName];
                    var originalResolver = field.resolve || _graphql.defaultFieldResolver;
                    var directiveArgs = this.args;
                    field.resolve = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var source = args[0], context = args[2], info = args[3];
                        return resolver(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, originalResolver.apply(field, args)];
                        }); }); }, source, directiveArgs, context, info);
                    };
                };
                return class_1;
            }(schemaVisitor.SchemaDirectiveVisitor));
        });
        schemaVisitor.SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);
    }
    exports.attachDirectiveResolvers = attachDirectiveResolvers;
    //# sourceMappingURL=schemaGenerator.js.map
    });

    unwrapExports(schemaGenerator);
    var schemaGenerator_1 = schemaGenerator.SchemaError;
    var schemaGenerator_2 = schemaGenerator.makeExecutableSchema;
    var schemaGenerator_3 = schemaGenerator.concatenateTypeDefs;
    var schemaGenerator_4 = schemaGenerator.buildSchemaFromTypeDefinitions;
    var schemaGenerator_5 = schemaGenerator.extractExtensionDefinitions;
    var schemaGenerator_6 = schemaGenerator.forEachField;
    var schemaGenerator_7 = schemaGenerator.attachConnectorsToContext;
    var schemaGenerator_8 = schemaGenerator.addSchemaLevelResolveFunction;
    var schemaGenerator_9 = schemaGenerator.addResolveFunctionsToSchema;
    var schemaGenerator_10 = schemaGenerator.assertResolveFunctionsPresent;
    var schemaGenerator_11 = schemaGenerator.addErrorLoggingToSchema;
    var schemaGenerator_12 = schemaGenerator.chainResolvers;
    var schemaGenerator_13 = schemaGenerator.addCatchUndefinedToSchema;
    var schemaGenerator_14 = schemaGenerator.attachDirectiveResolvers;

    var empty = {};

    var empty$1 = /*#__PURE__*/Object.freeze({
        default: empty
    });

    // Unique ID creation requires a high quality random # generator.  In node.js
    // this is pretty straight-forward - we use the crypto API.



    var rng = function nodeRNG() {
      return empty$1.randomBytes(16);
    };

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]];
    }

    var bytesToUuid_1 = bytesToUuid;

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;
    var _clockseq;

    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;

    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid_1(b);
    }

    var v1_1 = v1;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rng)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    var uuid = v4_1;
    uuid.v1 = v1_1;
    uuid.v4 = v4_1;

    var uuid_1 = uuid;

    var mock = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    var graphql_2 = _graphql;


    // This function wraps addMockFunctionsToSchema for more convenience
    function mockServer(schema, mocks, preserveResolvers) {
        if (preserveResolvers === void 0) { preserveResolvers = false; }
        var mySchema;
        if (!(schema instanceof _graphql.GraphQLSchema)) {
            // TODO: provide useful error messages here if this fails
            mySchema = schemaGenerator.buildSchemaFromTypeDefinitions(schema);
        }
        else {
            mySchema = schema;
        }
        addMockFunctionsToSchema({ schema: mySchema, mocks: mocks, preserveResolvers: preserveResolvers });
        return { query: function (query, vars) { return graphql_2.graphql(mySchema, query, {}, {}, vars); } };
    }
    exports.mockServer = mockServer;
    // TODO allow providing a seed such that lengths of list could be deterministic
    // this could be done by using casual to get a random list length if the casual
    // object is global.
    function addMockFunctionsToSchema(_a) {
        var schema = _a.schema, _b = _a.mocks, mocks = _b === void 0 ? {} : _b, _c = _a.preserveResolvers, preserveResolvers = _c === void 0 ? false : _c;
        function isObject(thing) {
            return thing === Object(thing) && !Array.isArray(thing);
        }
        if (!schema) {
            throw new Error('Must provide schema to mock');
        }
        if (!(schema instanceof _graphql.GraphQLSchema)) {
            throw new Error('Value at "schema" must be of type GraphQLSchema');
        }
        if (!isObject(mocks)) {
            throw new Error('mocks must be of type Object');
        }
        // use Map internally, because that API is nicer.
        var mockFunctionMap = new Map();
        Object.keys(mocks).forEach(function (typeName) {
            mockFunctionMap.set(typeName, mocks[typeName]);
        });
        mockFunctionMap.forEach(function (mockFunction, mockTypeName) {
            if (typeof mockFunction !== 'function') {
                throw new Error("mockFunctionMap[" + mockTypeName + "] must be a function");
            }
        });
        var defaultMockMap = new Map();
        defaultMockMap.set('Int', function () { return Math.round(Math.random() * 200) - 100; });
        defaultMockMap.set('Float', function () { return Math.random() * 200 - 100; });
        defaultMockMap.set('String', function () { return 'Hello World'; });
        defaultMockMap.set('Boolean', function () { return Math.random() > 0.5; });
        defaultMockMap.set('ID', function () { return uuid_1.v4(); });
        function mergeObjects(a, b) {
            return Object.assign(a, b);
        }
        function copyOwnPropsIfNotPresent(target, source) {
            Object.getOwnPropertyNames(source).forEach(function (prop) {
                if (!Object.getOwnPropertyDescriptor(target, prop)) {
                    Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));
                }
            });
        }
        function copyOwnProps(target) {
            var sources = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sources[_i - 1] = arguments[_i];
            }
            sources.forEach(function (source) {
                var chain = source;
                while (chain) {
                    copyOwnPropsIfNotPresent(target, chain);
                    chain = Object.getPrototypeOf(chain);
                }
            });
            return target;
        }
        // returns a random element from that ary
        function getRandomElement(ary) {
            var sample = Math.floor(Math.random() * ary.length);
            return ary[sample];
        }
        // takes either an object or a (possibly nested) array
        // and completes the customMock object with any fields
        // defined on genericMock
        // only merges objects or arrays. Scalars are returned as is
        function mergeMocks(genericMockFunction, customMock) {
            if (Array.isArray(customMock)) {
                return customMock.map(function (el) { return mergeMocks(genericMockFunction, el); });
            }
            if (isObject(customMock)) {
                return mergeObjects(genericMockFunction(), customMock);
            }
            return customMock;
        }
        function getResolveType(namedFieldType) {
            if (namedFieldType instanceof _graphql.GraphQLInterfaceType ||
                namedFieldType instanceof _graphql.GraphQLUnionType) {
                return namedFieldType.resolveType;
            }
            else {
                return undefined;
            }
        }
        function assignResolveType(type) {
            var fieldType = _graphql.getNullableType(type);
            var namedFieldType = _graphql.getNamedType(fieldType);
            var oldResolveType = getResolveType(namedFieldType);
            if (preserveResolvers && oldResolveType && oldResolveType.length) {
                return;
            }
            if (namedFieldType instanceof _graphql.GraphQLUnionType ||
                namedFieldType instanceof _graphql.GraphQLInterfaceType) {
                // the default `resolveType` always returns null. We add a fallback
                // resolution that works with how unions and interface are mocked
                namedFieldType.resolveType = function (data, context, info) {
                    return info.schema.getType(data.__typename);
                };
            }
        }
        var mockType = function (type, typeName, fieldName) {
            // order of precendence for mocking:
            // 1. if the object passed in already has fieldName, just use that
            // --> if it's a function, that becomes your resolver
            // --> if it's a value, the mock resolver will return that
            // 2. if the nullableType is a list, recurse
            // 2. if there's a mock defined for this typeName, that will be used
            // 3. if there's no mock defined, use the default mocks for this type
            return function (root, args, context, info) {
                // nullability doesn't matter for the purpose of mocking.
                var fieldType = _graphql.getNullableType(type);
                var namedFieldType = _graphql.getNamedType(fieldType);
                if (root && typeof root[fieldName] !== 'undefined') {
                    var result = void 0;
                    // if we're here, the field is already defined
                    if (typeof root[fieldName] === 'function') {
                        result = root[fieldName](root, args, context, info);
                        if (result instanceof MockList) {
                            result = result.mock(root, args, context, info, fieldType, mockType);
                        }
                    }
                    else {
                        result = root[fieldName];
                    }
                    // Now we merge the result with the default mock for this type.
                    // This allows overriding defaults while writing very little code.
                    if (mockFunctionMap.has(namedFieldType.name)) {
                        result = mergeMocks(mockFunctionMap
                            .get(namedFieldType.name)
                            .bind(null, root, args, context, info), result);
                    }
                    return result;
                }
                if (fieldType instanceof _graphql.GraphQLList) {
                    return [
                        mockType(fieldType.ofType)(root, args, context, info),
                        mockType(fieldType.ofType)(root, args, context, info),
                    ];
                }
                if (mockFunctionMap.has(fieldType.name) &&
                    !(fieldType instanceof _graphql.GraphQLUnionType ||
                        fieldType instanceof _graphql.GraphQLInterfaceType)) {
                    // the object passed doesn't have this field, so we apply the default mock
                    return mockFunctionMap.get(fieldType.name)(root, args, context, info);
                }
                if (fieldType instanceof _graphql.GraphQLObjectType) {
                    // objects don't return actual data, we only need to mock scalars!
                    return {};
                }
                // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type
                // otherwise randomly pick a type from all implementation types
                if (fieldType instanceof _graphql.GraphQLUnionType ||
                    fieldType instanceof _graphql.GraphQLInterfaceType) {
                    var implementationType = void 0;
                    if (mockFunctionMap.has(fieldType.name)) {
                        var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);
                        if (!interfaceMockObj || !interfaceMockObj.__typename) {
                            return Error("Please return a __typename in \"" + fieldType.name + "\"");
                        }
                        implementationType = schema.getType(interfaceMockObj.__typename);
                    }
                    else {
                        var possibleTypes = schema.getPossibleTypes(fieldType);
                        implementationType = getRandomElement(possibleTypes);
                    }
                    return Object.assign({ __typename: implementationType }, mockType(implementationType)(root, args, context, info));
                }
                if (fieldType instanceof _graphql.GraphQLEnumType) {
                    return getRandomElement(fieldType.getValues()).value;
                }
                if (defaultMockMap.has(fieldType.name)) {
                    return defaultMockMap.get(fieldType.name)(root, args, context, info);
                }
                // if we get to here, we don't have a value, and we don't have a mock for this type,
                // we could return undefined, but that would be hard to debug, so we throw instead.
                // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.
                return Error("No mock defined for type \"" + fieldType.name + "\"");
            };
        };
        schemaGenerator.forEachField(schema, function (field, typeName, fieldName) {
            assignResolveType(field.type);
            var mockResolver;
            // we have to handle the root mutation and root query types differently,
            // because no resolver is called at the root.
            /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */
            var isOnQueryType = schema.getQueryType()
                ? schema.getQueryType().name === typeName
                : false;
            var isOnMutationType = schema.getMutationType()
                ? schema.getMutationType().name === typeName
                : false;
            if (isOnQueryType || isOnMutationType) {
                if (mockFunctionMap.has(typeName)) {
                    var rootMock_1 = mockFunctionMap.get(typeName);
                    // XXX: BUG in here, need to provide proper signature for rootMock.
                    if (rootMock_1(undefined, {}, {}, {})[fieldName]) {
                        // TODO: assert that it's a function
                        mockResolver = function (root, args, context, info) {
                            var updatedRoot = root || {}; // TODO: should we clone instead?
                            updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];
                            // XXX this is a bit of a hack to still use mockType, which
                            // lets you mock lists etc. as well
                            // otherwise we could just set field.resolve to rootMock()[fieldName]
                            // it's like pretending there was a resolve function that ran before
                            // the root resolve function.
                            return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);
                        };
                    }
                }
            }
            if (!mockResolver) {
                mockResolver = mockType(field.type, typeName, fieldName);
            }
            if (!preserveResolvers || !field.resolve) {
                field.resolve = mockResolver;
            }
            else {
                var oldResolver_1 = field.resolve;
                field.resolve = function (rootObject, args, context, info) {
                    return Promise.all([
                        mockResolver(rootObject, args, context, info),
                        oldResolver_1(rootObject, args, context, info),
                    ]).then(function (values) {
                        var mockedValue = values[0], resolvedValue = values[1];
                        // In case we couldn't mock
                        if (mockedValue instanceof Error) {
                            // only if value was not resolved, populate the error.
                            if (undefined === resolvedValue) {
                                throw mockedValue;
                            }
                            return resolvedValue;
                        }
                        if (resolvedValue instanceof Date && mockedValue instanceof Date) {
                            return undefined !== resolvedValue ? resolvedValue : mockedValue;
                        }
                        if (isObject(mockedValue) && isObject(resolvedValue)) {
                            // Object.assign() won't do here, as we need to all properties, including
                            // the non-enumerable ones and defined using Object.defineProperty
                            var emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));
                            return copyOwnProps(emptyObject, resolvedValue, mockedValue);
                        }
                        return undefined !== resolvedValue ? resolvedValue : mockedValue;
                    });
                };
            }
        });
    }
    exports.addMockFunctionsToSchema = addMockFunctionsToSchema;
    var MockList = /** @class */ (function () {
        // wrappedFunction can return another MockList or a value
        function MockList(len, wrappedFunction) {
            this.len = len;
            if (typeof wrappedFunction !== 'undefined') {
                if (typeof wrappedFunction !== 'function') {
                    throw new Error('Second argument to MockList must be a function or undefined');
                }
                this.wrappedFunction = wrappedFunction;
            }
        }
        MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {
            var arr;
            if (Array.isArray(this.len)) {
                arr = new Array(this.randint(this.len[0], this.len[1]));
            }
            else {
                arr = new Array(this.len);
            }
            for (var i = 0; i < arr.length; i++) {
                if (typeof this.wrappedFunction === 'function') {
                    var res = this.wrappedFunction(root, args, context, info);
                    if (res instanceof MockList) {
                        var nullableType = _graphql.getNullableType(fieldType.ofType);
                        arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);
                    }
                    else {
                        arr[i] = res;
                    }
                }
                else {
                    arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);
                }
            }
            return arr;
        };
        MockList.prototype.randint = function (low, high) {
            return Math.floor(Math.random() * (high - low + 1) + low);
        };
        return MockList;
    }());
    exports.MockList = MockList;
    //# sourceMappingURL=mock.js.map
    });

    unwrapExports(mock);
    var mock_1 = mock.mockServer;
    var mock_2 = mock.addMockFunctionsToSchema;
    var mock_3 = mock.MockList;

    var zenObservable = createCommonjsModule(function (module, exports) {
     (function(fn, name) { { fn(exports, module); } })(function(exports, module) { // === Symbol Support ===

    function hasSymbol(name) {
      return typeof Symbol === "function" && Boolean(Symbol[name]);
    }

    function getSymbol(name) {
      return hasSymbol(name) ? Symbol[name] : "@@" + name;
    }

    // Ponyfill Symbol.observable for interoperability with other libraries
    if (typeof Symbol === "function" && !Symbol.observable) {
      Symbol.observable = Symbol("observable");
    }

    // === Abstract Operations ===

    function hostReportError(e) {
      setTimeout(function() { throw e });
    }

    function getMethod(obj, key) {
      var value = obj[key];

      if (value == null)
        return undefined;

      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");

      return value;
    }

    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== undefined) {
        ctor = ctor[getSymbol("species")];
        if (ctor === null) {
          ctor = undefined;
        }
      }
      return ctor !== undefined ? ctor : Observable;
    }

    function addMethods(target, methods) {
      Object.keys(methods).forEach(function(k) {
        var desc = Object.getOwnPropertyDescriptor(methods, k);
        desc.enumerable = false;
        Object.defineProperty(target, k, desc);
      });
    }

    function cleanupSubscription(subscription) {
      // Assert:  observer._observer is undefined

      var cleanup = subscription._cleanup;

      if (!cleanup)
        return;

      // Drop the reference to the cleanup function so that we won't call it
      // more than once
      subscription._cleanup = undefined;

      // Call the cleanup function
      try { cleanup(); }
      catch (e) { hostReportError(e); }
    }

    function subscriptionClosed(subscription) {
      return subscription._observer === undefined;
    }

    function closeSubscription(subscription) {
      if (subscriptionClosed(subscription))
        return;

      subscription._observer = undefined;
      cleanupSubscription(subscription);
    }

    function cleanupFromSubscription(subscription) {
      return function() { subscription.unsubscribe(); };
    }

    function Subscription(observer, subscriber) {
      // Assert: subscriber is callable

      // The observer must be an object
      if (Object(observer) !== observer)
        throw new TypeError("Observer must be an object");

      this._cleanup = undefined;
      this._observer = observer;

      try {
        var start$0 = getMethod(observer, "start");
        if (start$0) start$0.call(observer, this);
      } catch (e) {
        hostReportError(e);
      }

      if (subscriptionClosed(this))
        return;

      observer = new SubscriptionObserver(this);

      try {
        // Call the subscriber function
        var cleanup$0 = subscriber.call(undefined, observer);

        // The return value must be undefined, null, a subscription object, or a function
        if (cleanup$0 != null) {
          if (typeof cleanup$0.unsubscribe === "function")
            cleanup$0 = cleanupFromSubscription(cleanup$0);
          else if (typeof cleanup$0 !== "function")
            throw new TypeError(cleanup$0 + " is not a function");

          this._cleanup = cleanup$0;
        }
      } catch (e) {
        // If an error occurs during startup, then attempt to send the error
        // to the observer
        observer.error(e);
        return;
      }

      // If the stream is already finished, then perform cleanup
      if (subscriptionClosed(this))
        cleanupSubscription(this);
    }

    addMethods(Subscription.prototype = {}, {
      get closed() { return subscriptionClosed(this) },
      unsubscribe: function() { closeSubscription(this); },
    });

    function SubscriptionObserver(subscription) {
      this._subscription = subscription;
    }

    addMethods(SubscriptionObserver.prototype = {}, {

      get closed() { return subscriptionClosed(this._subscription) },

      next: function(value) {
        var subscription = this._subscription;

        // If the stream is closed, then return undefined
        if (subscriptionClosed(subscription))
          return;

        var observer = subscription._observer;

        try {
          // If the observer has a "next" method, send the next value
          var m$0 = getMethod(observer, "next");
          if (m$0) m$0.call(observer, value);
        } catch (e) {
          hostReportError(e);
        }
      },

      error: function(value) {
        var subscription = this._subscription;

        // If the stream is closed, throw the error to the caller
        if (subscriptionClosed(subscription)) {
          hostReportError(value);
          return;
        }

        var observer = subscription._observer;
        subscription._observer = undefined;

        try {
          var m$1 = getMethod(observer, "error");
          if (m$1) m$1.call(observer, value);
          else throw value;
        } catch (e) {
          hostReportError(e);
        }

        cleanupSubscription(subscription);
      },

      complete: function() {
        var subscription = this._subscription;

        if (subscriptionClosed(subscription))
          return;

        var observer = subscription._observer;
        subscription._observer = undefined;

        try {
          var m$2 = getMethod(observer, "complete");
          if (m$2) m$2.call(observer);
        } catch (e) {
          hostReportError(e);
        }

        cleanupSubscription(subscription);
      },

    });

    function Observable(subscriber) {
      // Constructor cannot be called as a function
      if (!(this instanceof Observable))
        throw new TypeError("Observable cannot be called as a function");

      // The stream subscriber must be a function
      if (typeof subscriber !== "function")
        throw new TypeError("Observable initializer must be a function");

      this._subscriber = subscriber;
    }

    addMethods(Observable.prototype, {

      subscribe: function(observer) { for (var args = [], __$0 = 1; __$0 < arguments.length; ++__$0) args.push(arguments[__$0]); 
        if (typeof observer === 'function') {
          observer = {
            next: observer,
            error: args[0],
            complete: args[1],
          };
        } else if (typeof observer !== 'object' || observer === null) {
          observer = {};
        }

        return new Subscription(observer, this._subscriber);
      },

      forEach: function(fn) { var __this = this; 
        return new Promise(function(resolve, reject) {
          if (typeof fn !== "function")
            return Promise.reject(new TypeError(fn + " is not a function"));

          __this.subscribe({
            _subscription: null,

            start: function(subscription) {
              if (Object(subscription) !== subscription)
                throw new TypeError(subscription + " is not an object");

              this._subscription = subscription;
            },

            next: function(value) {
              var subscription = this._subscription;

              if (subscription.closed)
                return;

              try {
                fn(value);
              } catch (err) {
                reject(err);
                subscription.unsubscribe();
              }
            },

            error: reject,
            complete: resolve,
          });
        });
      },

      map: function(fn) { var __this = this; 
        if (typeof fn !== "function")
          throw new TypeError(fn + " is not a function");

        var C = getSpecies(this);

        return new C(function(observer) { return __this.subscribe({
          next: function(value) {
            if (observer.closed)
              return;

            try { value = fn(value); }
            catch (e) { return observer.error(e) }

            observer.next(value);
          },

          error: function(e) { observer.error(e); },
          complete: function() { observer.complete(); },
        }); });
      },

      filter: function(fn) { var __this = this; 
        if (typeof fn !== "function")
          throw new TypeError(fn + " is not a function");

        var C = getSpecies(this);

        return new C(function(observer) { return __this.subscribe({
          next: function(value) {
            if (observer.closed)
              return;

            try { if (!fn(value)) return }
            catch (e) { return observer.error(e) }

            observer.next(value);
          },

          error: function(e) { observer.error(e); },
          complete: function() { observer.complete(); },
        }); });
      },

      reduce: function(fn) { var __this = this; 
        if (typeof fn !== "function")
          throw new TypeError(fn + " is not a function");

        var C = getSpecies(this);
        var hasSeed = arguments.length > 1;
        var hasValue = false;
        var seed = arguments[1];
        var acc = seed;

        return new C(function(observer) { return __this.subscribe({

          next: function(value) {
            if (observer.closed)
              return;

            var first = !hasValue;
            hasValue = true;

            if (!first || hasSeed) {
              try { acc = fn(acc, value); }
              catch (e) { return observer.error(e) }
            } else {
              acc = value;
            }
          },

          error: function(e) { observer.error(e); },

          complete: function() {
            if (!hasValue && !hasSeed) {
              return observer.error(new TypeError("Cannot reduce an empty sequence"));
            }

            observer.next(acc);
            observer.complete();
          },

        }); });
      },

    });

    Object.defineProperty(Observable.prototype, getSymbol("observable"), {
      value: function() { return this },
      writable: true,
      configurable: true,
    });

    addMethods(Observable, {

      from: function(x) {
        var C = typeof this === "function" ? this : Observable;

        if (x == null)
          throw new TypeError(x + " is not an object");

        var method = getMethod(x, getSymbol("observable"));

        if (method) {
          var observable$0 = method.call(x);

          if (Object(observable$0) !== observable$0)
            throw new TypeError(observable$0 + " is not an object");

          if (observable$0.constructor === C)
            return observable$0;

          return new C(function(observer) { return observable$0.subscribe(observer); });
        }

        if (hasSymbol("iterator") && (method = getMethod(x, getSymbol("iterator")))) {
          return new C(function(observer) {
            for (var __$0 = (method.call(x))[Symbol.iterator](), __$1; __$1 = __$0.next(), !__$1.done;) { var item$0 = __$1.value; 
              observer.next(item$0);
              if (observer.closed)
                return;
            }

            observer.complete();
          });
        }

        if (Array.isArray(x)) {
          return new C(function(observer) {
            for (var i$0 = 0; i$0 < x.length; ++i$0) {
              observer.next(x[i$0]);
              if (observer.closed)
                return;
            }

            observer.complete();
          });
        }

        throw new TypeError(x + " is not observable");
      },

      of: function() { for (var items = [], __$0 = 0; __$0 < arguments.length; ++__$0) items.push(arguments[__$0]); 
        var C = typeof this === "function" ? this : Observable;

        return new C(function(observer) {
          for (var i$1 = 0; i$1 < items.length; ++i$1) {
            observer.next(items[i$1]);
            if (observer.closed)
              return;
          }

          observer.complete();
        });
      },

    });

    Object.defineProperty(Observable, getSymbol("species"), {
      get: function() { return this },
      configurable: true,
    });

    Object.defineProperty(Observable, "extensions", {
      value: {
        observableSymbol: getSymbol("observable"),
        setHostReportError: function(fn) { hostReportError = fn; },
      },
    });

    exports.Observable = Observable;


    }, "*");
    });

    var zenObservable$1 = zenObservable.Observable;

    var Observable = zenObservable$1;
    //# sourceMappingURL=zenObservable.js.map

    //# sourceMappingURL=index.js.map

    var __assign$1 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    function isStringValue(value) {
        return value.kind === 'StringValue';
    }
    function isBooleanValue(value) {
        return value.kind === 'BooleanValue';
    }
    function isIntValue(value) {
        return value.kind === 'IntValue';
    }
    function isFloatValue(value) {
        return value.kind === 'FloatValue';
    }
    function isVariable(value) {
        return value.kind === 'Variable';
    }
    function isObjectValue(value) {
        return value.kind === 'ObjectValue';
    }
    function isListValue(value) {
        return value.kind === 'ListValue';
    }
    function isEnumValue(value) {
        return value.kind === 'EnumValue';
    }
    function isNullValue(value) {
        return value.kind === 'NullValue';
    }
    function valueToObjectRepresentation(argObj, name, value, variables) {
        if (isIntValue(value) || isFloatValue(value)) {
            argObj[name.value] = Number(value.value);
        }
        else if (isBooleanValue(value) || isStringValue(value)) {
            argObj[name.value] = value.value;
        }
        else if (isObjectValue(value)) {
            var nestedArgObj_1 = {};
            value.fields.map(function (obj) {
                return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
            });
            argObj[name.value] = nestedArgObj_1;
        }
        else if (isVariable(value)) {
            var variableValue = (variables || {})[value.name.value];
            argObj[name.value] = variableValue;
        }
        else if (isListValue(value)) {
            argObj[name.value] = value.values.map(function (listValue) {
                var nestedArgArrayObj = {};
                valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
                return nestedArgArrayObj[name.value];
            });
        }
        else if (isEnumValue(value)) {
            argObj[name.value] = value.value;
        }
        else if (isNullValue(value)) {
            argObj[name.value] = null;
        }
        else {
            throw new Error("The inline argument \"" + name.value + "\" of kind \"" + value.kind + "\" is not supported.\n                    Use variables instead of inline arguments to overcome this limitation.");
        }
    }
    function storeKeyNameFromField(field, variables) {
        var directivesObj = null;
        if (field.directives) {
            directivesObj = {};
            field.directives.forEach(function (directive) {
                directivesObj[directive.name.value] = {};
                if (directive.arguments) {
                    directive.arguments.forEach(function (_a) {
                        var name = _a.name, value = _a.value;
                        return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
                    });
                }
            });
        }
        var argObj = null;
        if (field.arguments && field.arguments.length) {
            argObj = {};
            field.arguments.forEach(function (_a) {
                var name = _a.name, value = _a.value;
                return valueToObjectRepresentation(argObj, name, value, variables);
            });
        }
        return getStoreKeyName(field.name.value, argObj, directivesObj);
    }
    var KNOWN_DIRECTIVES = [
        'connection',
        'include',
        'skip',
        'client',
        'rest',
        'export',
    ];
    function getStoreKeyName(fieldName, args, directives) {
        if (directives &&
            directives['connection'] &&
            directives['connection']['key']) {
            if (directives['connection']['filter'] &&
                directives['connection']['filter'].length > 0) {
                var filterKeys = directives['connection']['filter']
                    ? directives['connection']['filter']
                    : [];
                filterKeys.sort();
                var queryArgs_1 = args;
                var filteredArgs_1 = {};
                filterKeys.forEach(function (key) {
                    filteredArgs_1[key] = queryArgs_1[key];
                });
                return directives['connection']['key'] + "(" + JSON.stringify(filteredArgs_1) + ")";
            }
            else {
                return directives['connection']['key'];
            }
        }
        var completeFieldName = fieldName;
        if (args) {
            var stringifiedArgs = JSON.stringify(args);
            completeFieldName += "(" + stringifiedArgs + ")";
        }
        if (directives) {
            Object.keys(directives).forEach(function (key) {
                if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
                    return;
                if (directives[key] && Object.keys(directives[key]).length) {
                    completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
                }
                else {
                    completeFieldName += "@" + key;
                }
            });
        }
        return completeFieldName;
    }
    function argumentsObjectFromField(field, variables) {
        if (field.arguments && field.arguments.length) {
            var argObj_1 = {};
            field.arguments.forEach(function (_a) {
                var name = _a.name, value = _a.value;
                return valueToObjectRepresentation(argObj_1, name, value, variables);
            });
            return argObj_1;
        }
        return null;
    }
    function resultKeyNameFromField(field) {
        return field.alias ? field.alias.value : field.name.value;
    }
    function isField(selection) {
        return selection.kind === 'Field';
    }
    function isInlineFragment(selection) {
        return selection.kind === 'InlineFragment';
    }
    function isIdValue(idObject) {
        return idObject && idObject.type === 'id';
    }
    function toIdValue(idConfig, generated) {
        if (generated === void 0) { generated = false; }
        return __assign$1({ type: 'id', generated: generated }, (typeof idConfig === 'string'
            ? { id: idConfig, typename: undefined }
            : idConfig));
    }
    function isJsonValue(jsonObject) {
        return (jsonObject != null &&
            typeof jsonObject === 'object' &&
            jsonObject.type === 'json');
    }
    //# sourceMappingURL=storeUtils.js.map

    function getDirectiveInfoFromField(field, variables) {
        if (field.directives && field.directives.length) {
            var directiveObj_1 = {};
            field.directives.forEach(function (directive) {
                directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);
            });
            return directiveObj_1;
        }
        return null;
    }
    function shouldInclude(selection, variables) {
        if (variables === void 0) { variables = {}; }
        if (!selection.directives) {
            return true;
        }
        var res = true;
        selection.directives.forEach(function (directive) {
            // TODO should move this validation to GraphQL validation once that's implemented.
            if (directive.name.value !== 'skip' && directive.name.value !== 'include') {
                // Just don't worry about directives we don't understand
                return;
            }
            //evaluate the "if" argument and skip (i.e. return undefined) if it evaluates to true.
            var directiveArguments = directive.arguments || [];
            var directiveName = directive.name.value;
            if (directiveArguments.length !== 1) {
                throw new Error("Incorrect number of arguments for the @" + directiveName + " directive.");
            }
            var ifArgument = directiveArguments[0];
            if (!ifArgument.name || ifArgument.name.value !== 'if') {
                throw new Error("Invalid argument for the @" + directiveName + " directive.");
            }
            var ifValue = directiveArguments[0].value;
            var evaledValue = false;
            if (!ifValue || ifValue.kind !== 'BooleanValue') {
                // means it has to be a variable value if this is a valid @skip or @include directive
                if (ifValue.kind !== 'Variable') {
                    throw new Error("Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
                }
                else {
                    evaledValue = variables[ifValue.name.value];
                    if (evaledValue === undefined) {
                        throw new Error("Invalid variable referenced in @" + directiveName + " directive.");
                    }
                }
            }
            else {
                evaledValue = ifValue.value;
            }
            if (directiveName === 'skip') {
                evaledValue = !evaledValue;
            }
            if (!evaledValue) {
                res = false;
            }
        });
        return res;
    }
    function flattenSelections(selection) {
        if (!selection.selectionSet ||
            !(selection.selectionSet.selections.length > 0))
            return [selection];
        return [selection].concat(selection.selectionSet.selections
            .map(function (selectionNode) {
            return [selectionNode].concat(flattenSelections(selectionNode));
        })
            .reduce(function (selections, selected) { return selections.concat(selected); }, []));
    }
    var added = new Map();
    function getDirectiveNames(doc) {
        var cached = added.get(doc);
        if (cached)
            return cached;
        // operation => [names of directives];
        var directives = doc.definitions
            .filter(function (definition) {
            return definition.selectionSet && definition.selectionSet.selections;
        })
            .map(function (x) { return flattenSelections(x); })
            .reduce(function (selections, selected) { return selections.concat(selected); }, [])
            .filter(function (selection) {
            return selection.directives && selection.directives.length > 0;
        })
            .map(function (selection) { return selection.directives; })
            .reduce(function (directives, directive) { return directives.concat(directive); }, [])
            .map(function (directive) { return directive.name.value; });
        added.set(doc, directives);
        return directives;
    }
    function hasDirectives(names, doc) {
        return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });
    }
    //# sourceMappingURL=directives.js.map

    var __assign$2 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    /**
     * Returns a query document which adds a single query operation that only
     * spreads the target fragment inside of it.
     *
     * So for example a document of:
     *
     * ```graphql
     * fragment foo on Foo { a b c }
     * ```
     *
     * Turns into:
     *
     * ```graphql
     * { ...foo }
     *
     * fragment foo on Foo { a b c }
     * ```
     *
     * The target fragment will either be the only fragment in the document, or a
     * fragment specified by the provided `fragmentName`. If there is more then one
     * fragment, but a `fragmentName` was not defined then an error will be thrown.
     */
    function getFragmentQueryDocument(document, fragmentName) {
        var actualFragmentName = fragmentName;
        // Build an array of all our fragment definitions that will be used for
        // validations. We also do some validations on the other definitions in the
        // document while building this list.
        var fragments = [];
        document.definitions.forEach(function (definition) {
            // Throw an error if we encounter an operation definition because we will
            // define our own operation definition later on.
            if (definition.kind === 'OperationDefinition') {
                throw new Error("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : '') + ". " +
                    'No operations are allowed when using a fragment as a query. Only fragments are allowed.');
            }
            // Add our definition to the fragments array if it is a fragment
            // definition.
            if (definition.kind === 'FragmentDefinition') {
                fragments.push(definition);
            }
        });
        // If the user did not give us a fragment name then let us try to get a
        // name from a single fragment in the definition.
        if (typeof actualFragmentName === 'undefined') {
            if (fragments.length !== 1) {
                throw new Error("Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
            }
            actualFragmentName = fragments[0].name.value;
        }
        // Generate a query document with an operation that simply spreads the
        // fragment inside of it.
        var query = __assign$2({}, document, { definitions: [
                {
                    kind: 'OperationDefinition',
                    operation: 'query',
                    selectionSet: {
                        kind: 'SelectionSet',
                        selections: [
                            {
                                kind: 'FragmentSpread',
                                name: {
                                    kind: 'Name',
                                    value: actualFragmentName,
                                },
                            },
                        ],
                    },
                }
            ].concat(document.definitions) });
        return query;
    }
    //# sourceMappingURL=fragments.js.map

    function assign$2(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        sources.forEach(function (source) {
            if (typeof source === 'undefined' || source === null) {
                return;
            }
            Object.keys(source).forEach(function (key) {
                target[key] = source[key];
            });
        });
        return target;
    }
    //# sourceMappingURL=assign.js.map

    function getMutationDefinition(doc) {
        checkDocument(doc);
        var mutationDef = doc.definitions.filter(function (definition) {
            return definition.kind === 'OperationDefinition' &&
                definition.operation === 'mutation';
        })[0];
        if (!mutationDef) {
            throw new Error('Must contain a mutation definition.');
        }
        return mutationDef;
    }
    // Checks the document for errors and throws an exception if there is an error.
    function checkDocument(doc) {
        if (doc.kind !== 'Document') {
            throw new Error("Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql");
        }
        var operations = doc.definitions
            .filter(function (d) { return d.kind !== 'FragmentDefinition'; })
            .map(function (definition) {
            if (definition.kind !== 'OperationDefinition') {
                throw new Error("Schema type definitions not allowed in queries. Found: \"" + definition.kind + "\"");
            }
            return definition;
        });
        if (operations.length > 1) {
            throw new Error("Ambiguous GraphQL document: contains " + operations.length + " operations");
        }
    }
    function getOperationDefinition(doc) {
        checkDocument(doc);
        return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];
    }
    function getOperationDefinitionOrDie(document) {
        var def = getOperationDefinition(document);
        if (!def) {
            throw new Error("GraphQL document is missing an operation");
        }
        return def;
    }
    function getOperationName(doc) {
        return (doc.definitions
            .filter(function (definition) {
            return definition.kind === 'OperationDefinition' && definition.name;
        })
            .map(function (x) { return x.name.value; })[0] || null);
    }
    // Returns the FragmentDefinitions from a particular document as an array
    function getFragmentDefinitions(doc) {
        return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });
    }
    function getQueryDefinition(doc) {
        var queryDef = getOperationDefinition(doc);
        if (!queryDef || queryDef.operation !== 'query') {
            throw new Error('Must contain a query definition.');
        }
        return queryDef;
    }
    /**
     * Returns the first operation definition found in this document.
     * If no operation definition is found, the first fragment definition will be returned.
     * If no definitions are found, an error will be thrown.
     */
    function getMainDefinition(queryDoc) {
        checkDocument(queryDoc);
        var fragmentDefinition;
        for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
            var definition = _a[_i];
            if (definition.kind === 'OperationDefinition') {
                var operation = definition.operation;
                if (operation === 'query' ||
                    operation === 'mutation' ||
                    operation === 'subscription') {
                    return definition;
                }
            }
            if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {
                // we do this because we want to allow multiple fragment definitions
                // to precede an operation definition.
                fragmentDefinition = definition;
            }
        }
        if (fragmentDefinition) {
            return fragmentDefinition;
        }
        throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');
    }
    // Utility function that takes a list of fragment definitions and makes a hash out of them
    // that maps the name of the fragment to the fragment definition.
    function createFragmentMap(fragments) {
        if (fragments === void 0) { fragments = []; }
        var symTable = {};
        fragments.forEach(function (fragment) {
            symTable[fragment.name.value] = fragment;
        });
        return symTable;
    }
    function getDefaultValues(definition) {
        if (definition &&
            definition.variableDefinitions &&
            definition.variableDefinitions.length) {
            var defaultValues = definition.variableDefinitions
                .filter(function (_a) {
                var defaultValue = _a.defaultValue;
                return defaultValue;
            })
                .map(function (_a) {
                var variable = _a.variable, defaultValue = _a.defaultValue;
                var defaultValueObj = {};
                valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);
                return defaultValueObj;
            });
            return assign$2.apply(void 0, [{}].concat(defaultValues));
        }
        return {};
    }
    //# sourceMappingURL=getFromAST.js.map

    /**
     * Deeply clones a value to create a new instance.
     */
    function cloneDeep(value) {
        // If the value is an array, create a new array where every item has been cloned.
        if (Array.isArray(value)) {
            return value.map(function (item) { return cloneDeep(item); });
        }
        // If the value is an object, go through all of the object’s properties and add them to a new
        // object.
        if (value !== null && typeof value === 'object') {
            var nextValue = {};
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    nextValue[key] = cloneDeep(value[key]);
                }
            }
            return nextValue;
        }
        // Otherwise this is some primitive value and it is therefore immutable so we can just return it
        // directly.
        return value;
    }
    //# sourceMappingURL=cloneDeep.js.map

    var TYPENAME_FIELD = {
        kind: 'Field',
        name: {
            kind: 'Name',
            value: '__typename',
        },
    };
    function isNotEmpty(op, fragments) {
        // keep selections that are still valid
        return (op.selectionSet.selections.filter(function (selectionSet) {
            // anything that doesn't match the compound filter is okay
            return !(selectionSet &&
                // look into fragments to verify they should stay
                selectionSet.kind === 'FragmentSpread' &&
                // see if the fragment in the map is valid (recursively)
                !isNotEmpty(fragments[selectionSet.name.value], fragments));
        }).length > 0);
    }
    function getDirectiveMatcher(directives) {
        return function directiveMatcher(directive) {
            return directives.some(function (dir) {
                if (dir.name && dir.name === directive.name.value)
                    return true;
                if (dir.test && dir.test(directive))
                    return true;
                return false;
            });
        };
    }
    function addTypenameToSelectionSet(selectionSet, isRoot) {
        if (isRoot === void 0) { isRoot = false; }
        if (selectionSet.selections) {
            if (!isRoot) {
                var alreadyHasThisField = selectionSet.selections.some(function (selection) {
                    return (selection.kind === 'Field' &&
                        selection.name.value === '__typename');
                });
                if (!alreadyHasThisField) {
                    selectionSet.selections.push(TYPENAME_FIELD);
                }
            }
            selectionSet.selections.forEach(function (selection) {
                // Must not add __typename if we're inside an introspection query
                if (selection.kind === 'Field') {
                    if (selection.name.value.lastIndexOf('__', 0) !== 0 &&
                        selection.selectionSet) {
                        addTypenameToSelectionSet(selection.selectionSet);
                    }
                }
                else if (selection.kind === 'InlineFragment') {
                    if (selection.selectionSet) {
                        addTypenameToSelectionSet(selection.selectionSet);
                    }
                }
            });
        }
    }
    function removeDirectivesFromSelectionSet(directives, selectionSet) {
        if (!selectionSet.selections)
            return selectionSet;
        // if any of the directives are set to remove this selectionSet, remove it
        var agressiveRemove = directives.some(function (dir) { return dir.remove; });
        selectionSet.selections = selectionSet.selections
            .map(function (selection) {
            if (selection.kind !== 'Field' ||
                !selection ||
                !selection.directives)
                return selection;
            var directiveMatcher = getDirectiveMatcher(directives);
            var remove;
            selection.directives = selection.directives.filter(function (directive) {
                var shouldKeep = !directiveMatcher(directive);
                if (!remove && !shouldKeep && agressiveRemove)
                    remove = true;
                return shouldKeep;
            });
            return remove ? null : selection;
        })
            .filter(function (x) { return !!x; });
        selectionSet.selections.forEach(function (selection) {
            if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&
                selection.selectionSet) {
                removeDirectivesFromSelectionSet(directives, selection.selectionSet);
            }
        });
        return selectionSet;
    }
    function removeDirectivesFromDocument(directives, doc) {
        var docClone = cloneDeep(doc);
        docClone.definitions.forEach(function (definition) {
            removeDirectivesFromSelectionSet(directives, definition.selectionSet);
        });
        var operation = getOperationDefinitionOrDie(docClone);
        var fragments = createFragmentMap(getFragmentDefinitions(docClone));
        return isNotEmpty(operation, fragments) ? docClone : null;
    }
    var added$1 = new Map();
    function addTypenameToDocument(doc) {
        checkDocument(doc);
        var cached = added$1.get(doc);
        if (cached)
            return cached;
        var docClone = cloneDeep(doc);
        docClone.definitions.forEach(function (definition) {
            var isRoot = definition.kind === 'OperationDefinition';
            addTypenameToSelectionSet(definition.selectionSet, isRoot);
        });
        added$1.set(doc, docClone);
        return docClone;
    }
    var connectionRemoveConfig = {
        test: function (directive) {
            var willRemove = directive.name.value === 'connection';
            if (willRemove) {
                if (!directive.arguments ||
                    !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {
                    console.warn('Removing an @connection directive even though it does not have a key. ' +
                        'You may want to use the key parameter to specify a store key.');
                }
            }
            return willRemove;
        },
    };
    var removed = new Map();
    function removeConnectionDirectiveFromDocument(doc) {
        checkDocument(doc);
        var cached = removed.get(doc);
        if (cached)
            return cached;
        var docClone = removeDirectivesFromDocument([connectionRemoveConfig], doc);
        removed.set(doc, docClone);
        return docClone;
    }
    //# sourceMappingURL=transform.js.map

    function getEnv() {
        {
            return "development";
        }
        // default environment
        return 'development';
    }
    function isEnv(env) {
        return getEnv() === env;
    }
    function isProduction() {
        return isEnv('production') === true;
    }
    function isDevelopment() {
        return isEnv('development') === true;
    }
    function isTest() {
        return isEnv('test') === true;
    }
    //# sourceMappingURL=environment.js.map

    function tryFunctionOrLogError(f) {
        try {
            return f();
        }
        catch (e) {
            if (console.error) {
                console.error(e);
            }
        }
    }
    function graphQLResultHasError(result) {
        return result.errors && result.errors.length;
    }
    //# sourceMappingURL=errorHandling.js.map

    /**
     * Performs a deep equality check on two JavaScript values.
     */
    function isEqual(a, b) {
        // If the two values are strictly equal, we are good.
        if (a === b) {
            return true;
        }
        // Dates are equivalent if their time values are equal.
        if (a instanceof Date && b instanceof Date) {
            return a.getTime() === b.getTime();
        }
        // If a and b are both objects, we will compare their properties. This will compare arrays as
        // well.
        if (a != null &&
            typeof a === 'object' &&
            b != null &&
            typeof b === 'object') {
            // Compare all of the keys in `a`. If one of the keys has a different value, or that key does
            // not exist in `b` return false immediately.
            for (var key in a) {
                if (Object.prototype.hasOwnProperty.call(a, key)) {
                    if (!Object.prototype.hasOwnProperty.call(b, key)) {
                        return false;
                    }
                    if (!isEqual(a[key], b[key])) {
                        return false;
                    }
                }
            }
            // Look through all the keys in `b`. If `b` has a key that `a` does not, return false.
            for (var key in b) {
                if (!Object.prototype.hasOwnProperty.call(a, key)) {
                    return false;
                }
            }
            // If we made it this far the objects are equal!
            return true;
        }
        // Otherwise the values are not equal.
        return false;
    }
    //# sourceMappingURL=isEqual.js.map

    // taken straight from https://github.com/substack/deep-freeze to avoid import hassles with rollup
    function deepFreeze(o) {
        Object.freeze(o);
        Object.getOwnPropertyNames(o).forEach(function (prop) {
            if (o.hasOwnProperty(prop) &&
                o[prop] !== null &&
                (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&
                !Object.isFrozen(o[prop])) {
                deepFreeze(o[prop]);
            }
        });
        return o;
    }
    function maybeDeepFreeze(obj) {
        if (isDevelopment() || isTest()) {
            // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing
            // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).
            var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';
            if (!symbolIsPolyfilled) {
                return deepFreeze(obj);
            }
        }
        return obj;
    }
    //# sourceMappingURL=maybeDeepFreeze.js.map

    var haveWarned = Object.create({});
    /**
     * Print a warning only once in development.
     * In production no warnings are printed.
     * In test all warnings are printed.
     *
     * @param msg The warning message
     * @param type warn or error (will call console.warn or console.error)
     */
    function warnOnceInDevelopment(msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (isProduction()) {
            return;
        }
        if (!haveWarned[msg]) {
            if (!isTest()) {
                haveWarned[msg] = true;
            }
            switch (type) {
                case 'error':
                    console.error(msg);
                    break;
                default:
                    console.warn(msg);
            }
        }
    }
    //# sourceMappingURL=warnOnce.js.map

    //# sourceMappingURL=index.js.map

    var __extends$1 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$3 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    function validateOperation(operation) {
        var OPERATION_FIELDS = [
            'query',
            'operationName',
            'variables',
            'extensions',
            'context',
        ];
        for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
            var key = _a[_i];
            if (OPERATION_FIELDS.indexOf(key) < 0) {
                throw new Error("illegal argument: " + key);
            }
        }
        return operation;
    }
    var LinkError = (function (_super) {
        __extends$1(LinkError, _super);
        function LinkError(message, link) {
            var _this = _super.call(this, message) || this;
            _this.link = link;
            return _this;
        }
        return LinkError;
    }(Error));
    function isTerminating(link) {
        return link.request.length <= 1;
    }
    function toPromise(observable) {
        var completed = false;
        return new Promise(function (resolve, reject) {
            observable.subscribe({
                next: function (data) {
                    if (completed) {
                        console.warn("Promise Wrapper does not support multiple results from Observable");
                    }
                    else {
                        completed = true;
                        resolve(data);
                    }
                },
                error: reject,
            });
        });
    }
    var makePromise = toPromise;
    function fromPromise(promise) {
        return new Observable(function (observer) {
            promise
                .then(function (value) {
                observer.next(value);
                observer.complete();
            })
                .catch(observer.error.bind(observer));
        });
    }
    function fromError(errorValue) {
        return new Observable(function (observer) {
            observer.error(errorValue);
        });
    }
    function transformOperation(operation) {
        var transformedOperation = {
            variables: operation.variables || {},
            extensions: operation.extensions || {},
            operationName: operation.operationName,
            query: operation.query,
        };
        if (!transformedOperation.operationName) {
            transformedOperation.operationName =
                typeof transformedOperation.query !== 'string'
                    ? getOperationName(transformedOperation.query)
                    : '';
        }
        return transformedOperation;
    }
    function createOperation(starting, operation) {
        var context = __assign$3({}, starting);
        var setContext = function (next) {
            if (typeof next === 'function') {
                context = __assign$3({}, context, next(context));
            }
            else {
                context = __assign$3({}, context, next);
            }
        };
        var getContext = function () { return (__assign$3({}, context)); };
        Object.defineProperty(operation, 'setContext', {
            enumerable: false,
            value: setContext,
        });
        Object.defineProperty(operation, 'getContext', {
            enumerable: false,
            value: getContext,
        });
        Object.defineProperty(operation, 'toKey', {
            enumerable: false,
            value: function () { return getKey(operation); },
        });
        return operation;
    }
    function getKey(operation) {
        return print(operation.query) + "|" + JSON.stringify(operation.variables) + "|" + operation.operationName;
    }
    //# sourceMappingURL=linkUtils.js.map

    var passthrough = function (op, forward) { return (forward ? forward(op) : Observable.of()); };
    var toLink = function (handler) {
        return typeof handler === 'function' ? new ApolloLink(handler) : handler;
    };
    var empty$2 = function () {
        return new ApolloLink(function (op, forward) { return Observable.of(); });
    };
    var from$1 = function (links) {
        if (links.length === 0)
            return empty$2();
        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });
    };
    var split = function (test, left, right) {
        if (right === void 0) { right = new ApolloLink(passthrough); }
        var leftLink = toLink(left);
        var rightLink = toLink(right);
        if (isTerminating(leftLink) && isTerminating(rightLink)) {
            return new ApolloLink(function (operation) {
                return test(operation)
                    ? leftLink.request(operation) || Observable.of()
                    : rightLink.request(operation) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return test(operation)
                    ? leftLink.request(operation, forward) || Observable.of()
                    : rightLink.request(operation, forward) || Observable.of();
            });
        }
    };
    var concat = function (first, second) {
        var firstLink = toLink(first);
        if (isTerminating(firstLink)) {
            console.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
            return firstLink;
        }
        var nextLink = toLink(second);
        if (isTerminating(nextLink)) {
            return new ApolloLink(function (operation) {
                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();
            });
        }
        else {
            return new ApolloLink(function (operation, forward) {
                return (firstLink.request(operation, function (op) {
                    return nextLink.request(op, forward) || Observable.of();
                }) || Observable.of());
            });
        }
    };
    var ApolloLink = (function () {
        function ApolloLink(request) {
            if (request)
                this.request = request;
        }
        ApolloLink.prototype.split = function (test, left, right) {
            if (right === void 0) { right = new ApolloLink(passthrough); }
            return this.concat(split(test, left, right));
        };
        ApolloLink.prototype.concat = function (next) {
            return concat(this, next);
        };
        ApolloLink.prototype.request = function (operation, forward) {
            throw new Error('request is not implemented');
        };
        ApolloLink.empty = empty$2;
        ApolloLink.from = from$1;
        ApolloLink.split = split;
        ApolloLink.execute = execute$1;
        return ApolloLink;
    }());
    function execute$1(link, operation) {
        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());
    }
    //# sourceMappingURL=link.js.map

    //# sourceMappingURL=index.js.map

    var lib$1 = /*#__PURE__*/Object.freeze({
        Observable: Observable,
        createOperation: createOperation,
        makePromise: makePromise,
        toPromise: toPromise,
        fromPromise: fromPromise,
        fromError: fromError,
        empty: empty$2,
        from: from$1,
        split: split,
        concat: concat,
        ApolloLink: ApolloLink,
        execute: execute$1
    });

    var linkToFetcher_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    var apollo_link_2 = lib$1;
    exports.execute = apollo_link_2.execute;
    function linkToFetcher(link) {
        return function (fetcherOperation) {
            return lib$1.makePromise(lib$1.execute(link, fetcherOperation));
        };
    }
    exports.default = linkToFetcher;
    //# sourceMappingURL=linkToFetcher.js.map
    });

    unwrapExports(linkToFetcher_1);
    var linkToFetcher_2 = linkToFetcher_1.execute;

    var isEmptyObject_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function isEmptyObject(obj) {
        if (!obj) {
            return true;
        }
        for (var key in obj) {
            if (Object.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    exports.default = isEmptyObject;
    //# sourceMappingURL=isEmptyObject.js.map
    });

    unwrapExports(isEmptyObject_1);

    var resolveFromParentTypename_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    function resolveFromParentTypename(parent, schema) {
        var parentTypename = parent['__typename'];
        if (!parentTypename) {
            throw new Error('Did not fetch typename for object, unable to resolve interface.');
        }
        var resolvedType = schema.getType(parentTypename);
        if (!(resolvedType instanceof _graphql.GraphQLObjectType)) {
            throw new Error('__typename did not match an object type: ' + parentTypename);
        }
        return resolvedType;
    }
    exports.default = resolveFromParentTypename;
    //# sourceMappingURL=resolveFromParentTypename.js.map
    });

    unwrapExports(resolveFromParentTypename_1);

    var errors$1 = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });


    var ERROR_SYMBOL;
    if ((typeof commonjsGlobal !== 'undefined' && 'Symbol' in commonjsGlobal) ||
        (typeof window !== 'undefined' && 'Symbol' in window)) {
        ERROR_SYMBOL = Symbol('subSchemaErrors');
    }
    else {
        ERROR_SYMBOL = '@@__subSchemaErrors';
    }
    exports.ErrorSymbol = ERROR_SYMBOL;
    function annotateWithChildrenErrors(object, childrenErrors) {
        if (childrenErrors && childrenErrors.length > 0) {
            if (Array.isArray(object)) {
                var byIndex_1 = {};
                childrenErrors.forEach(function (error$$1) {
                    if (!error$$1.path) {
                        return;
                    }
                    var index = error$$1.path[1];
                    var current = byIndex_1[index] || [];
                    current.push(__assign({}, error$$1, { path: error$$1.path.slice(1) }));
                    byIndex_1[index] = current;
                });
                return object.map(function (item, index) {
                    return annotateWithChildrenErrors(item, byIndex_1[index]);
                });
            }
            else {
                return __assign({}, object, (_a = {}, _a[ERROR_SYMBOL] = childrenErrors.map(function (error$$1) { return (__assign({}, error$$1, error$$1.path ? { path: error$$1.path.slice(1) } : {})); }), _a));
            }
        }
        else {
            return object;
        }
        var _a;
    }
    exports.annotateWithChildrenErrors = annotateWithChildrenErrors;
    function getErrorsFromParent(object, fieldName) {
        var errors = (object && object[ERROR_SYMBOL]) || [];
        var childrenErrors = [];
        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var error$$1 = errors_1[_i];
            if ((!error$$1.path) || (error$$1.path.length === 1 && error$$1.path[0] === fieldName)) {
                return {
                    kind: 'OWN',
                    error: error$$1,
                };
            }
            else if (error$$1.path[0] === fieldName) {
                childrenErrors.push(error$$1);
            }
        }
        return {
            kind: 'CHILDREN',
            errors: childrenErrors,
        };
    }
    exports.getErrorsFromParent = getErrorsFromParent;
    var CombinedError = /** @class */ (function (_super) {
        __extends(CombinedError, _super);
        function CombinedError(message, errors) {
            var _this = _super.call(this, message) || this;
            _this.errors = errors;
            return _this;
        }
        return CombinedError;
    }(Error));
    function checkResultAndHandleErrors(result, info, responseKey) {
        if (!responseKey) {
            responseKey = info.fieldNodes[0].alias
                ? info.fieldNodes[0].alias.value
                : info.fieldName;
        }
        if (result.errors && (!result.data || result.data[responseKey] == null)) {
            // apollo-link-http & http-link-dataloader need the
            // result property to be passed through for better error handling.
            // If there is only one error, which contains a result property, pass the error through
            var newError = result.errors.length === 1 && hasResult(result.errors[0])
                ? result.errors[0]
                : new CombinedError(concatErrors(result.errors), result.errors);
            throw error.locatedError(newError, info.fieldNodes, _graphql.responsePathAsArray(info.path));
        }
        else {
            var resultObject = result.data[responseKey];
            if (result.errors) {
                resultObject = annotateWithChildrenErrors(resultObject, result.errors);
            }
            return resultObject;
        }
    }
    exports.checkResultAndHandleErrors = checkResultAndHandleErrors;
    function concatErrors(errors) {
        return errors.map(function (error$$1) { return error$$1.message; }).join('\n');
    }
    function hasResult(error$$1) {
        return error$$1.result || (error$$1.originalError && error$$1.originalError.result);
    }
    //# sourceMappingURL=errors.js.map
    });

    unwrapExports(errors$1);
    var errors_1 = errors$1.ErrorSymbol;
    var errors_2 = errors$1.annotateWithChildrenErrors;
    var errors_3 = errors$1.getErrorsFromParent;
    var errors_4 = errors$1.checkResultAndHandleErrors;

    var defaultMergedResolver_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });



    // Resolver that knows how to:
    // a) handle aliases for proxied schemas
    // b) handle errors from proxied schemas
    var defaultMergedResolver = function (parent, args, context, info) {
        var responseKey = info.fieldNodes[0].alias
            ? info.fieldNodes[0].alias.value
            : info.fieldName;
        var errorResult = errors$1.getErrorsFromParent(parent, responseKey);
        if (errorResult.kind === 'OWN') {
            throw error.locatedError(new Error(errorResult.error.message), info.fieldNodes, _graphql.responsePathAsArray(info.path));
        }
        else if (parent) {
            var result = parent[responseKey];
            // subscription result mapping
            if (!result && parent.data && parent.data[responseKey]) {
                result = parent.data[responseKey];
            }
            if (errorResult.errors) {
                result = errors$1.annotateWithChildrenErrors(result, errorResult.errors);
            }
            return result;
        }
        else {
            return null;
        }
    };
    exports.default = defaultMergedResolver;
    //# sourceMappingURL=defaultMergedResolver.js.map
    });

    unwrapExports(defaultMergedResolver_1);

    var observableToAsyncIterable_1 = createCommonjsModule(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });

    function observableToAsyncIterable(observable) {
        var pullQueue = [];
        var pushQueue = [];
        var listening = true;
        var pushValue = function (_a) {
            var data = _a.data;
            if (pullQueue.length !== 0) {
                pullQueue.shift()({ value: data, done: false });
            }
            else {
                pushQueue.push({ value: data });
            }
        };
        var pushError = function (error) {
            if (pullQueue.length !== 0) {
                pullQueue.shift()({ value: { errors: [error] }, done: false });
            }
            else {
                pushQueue.push({ value: { errors: [error] } });
            }
        };
        var pullValue = function () {
            return new Promise(function (resolve) {
                if (pushQueue.length !== 0) {
                    var element = pushQueue.shift();
                    // either {value: {errors: [...]}} or {value: ...}
                    resolve(__assign({}, element, { done: false }));
                }
                else {
                    pullQueue.push(resolve);
                }
            });
        };
        var subscription = observable.subscribe({
            next: function (value) {
                pushValue(value);
            },
            error: function (err) {
                pushError(err);
            },
        });
        var emptyQueue = function () {
            if (listening) {
                listening = false;
                subscription.unsubscribe();
                pullQueue.forEach(function (resolve) { return resolve({ value: undefined, done: true }); });
                pullQueue.length = 0;
                pushQueue.length = 0;
            }
        };
        return _a = {
                next: function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, listening ? pullValue() : this.return()];
                        });
                    });
                },
                return: function () {
                    emptyQueue();
                    return Promise.resolve({ value: undefined, done: true });
                },
                throw: function (error) {
                    emptyQueue();
                    return Promise.reject(error);
                }
            }, _a[iterall.$$asyncIterator] = function () {
                return this;
            }, _a;
        var _a;
    }
    exports.observableToAsyncIterable = observableToAsyncIterable;
    //# sourceMappingURL=observableToAsyncIterable.js.map
    });

    unwrapExports(observableToAsyncIterable_1);
    var observableToAsyncIterable_2 = observableToAsyncIterable_1.observableToAsyncIterable;

    var makeRemoteExecutableSchema_1 = createCommonjsModule(function (module, exports) {
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });








    function makeRemoteExecutableSchema(_a) {
        var schema = _a.schema, link = _a.link, fetcher = _a.fetcher;
        if (!fetcher && link) {
            fetcher = linkToFetcher_1.default(link);
        }
        var typeDefs;
        if (typeof schema === 'string') {
            typeDefs = schema;
            schema = _graphql.buildSchema(typeDefs);
        }
        else {
            typeDefs = _graphql.printSchema(schema);
        }
        // prepare query resolvers
        var queryResolvers = {};
        var queryType = schema.getQueryType();
        var queries = queryType.getFields();
        Object.keys(queries).forEach(function (key) {
            queryResolvers[key] = createResolver(fetcher);
        });
        // prepare mutation resolvers
        var mutationResolvers = {};
        var mutationType = schema.getMutationType();
        if (mutationType) {
            var mutations = mutationType.getFields();
            Object.keys(mutations).forEach(function (key) {
                mutationResolvers[key] = createResolver(fetcher);
            });
        }
        // prepare subscription resolvers
        var subscriptionResolvers = {};
        var subscriptionType = schema.getSubscriptionType();
        if (subscriptionType) {
            var subscriptions = subscriptionType.getFields();
            Object.keys(subscriptions).forEach(function (key) {
                subscriptionResolvers[key] = {
                    subscribe: createSubscriptionResolver(key, link),
                };
            });
        }
        // merge resolvers into resolver map
        var resolvers = (_b = {}, _b[queryType.name] = queryResolvers, _b);
        if (!isEmptyObject_1.default(mutationResolvers)) {
            resolvers[mutationType.name] = mutationResolvers;
        }
        if (!isEmptyObject_1.default(subscriptionResolvers)) {
            resolvers[subscriptionType.name] = subscriptionResolvers;
        }
        // add missing abstract resolvers (scalar, unions, interfaces)
        var typeMap = schema.getTypeMap();
        var types = Object.keys(typeMap).map(function (name) { return typeMap[name]; });
        var _loop_1 = function (type) {
            if (type instanceof _graphql.GraphQLInterfaceType || type instanceof _graphql.GraphQLUnionType) {
                resolvers[type.name] = {
                    __resolveType: function (parent, context, info) {
                        return resolveFromParentTypename_1.default(parent, info.schema);
                    },
                };
            }
            else if (type instanceof _graphql.GraphQLScalarType) {
                if (!(type === _graphql.GraphQLID ||
                    type === _graphql.GraphQLString ||
                    type === _graphql.GraphQLFloat ||
                    type === _graphql.GraphQLBoolean ||
                    type === _graphql.GraphQLInt)) {
                    resolvers[type.name] = createPassThroughScalar(type);
                }
            }
            else if (type instanceof _graphql.GraphQLObjectType &&
                type.name.slice(0, 2) !== '__' &&
                type !== queryType &&
                type !== mutationType &&
                type !== subscriptionType) {
                var resolver_1 = {};
                Object.keys(type.getFields()).forEach(function (field) {
                    resolver_1[field] = defaultMergedResolver_1.default;
                });
                resolvers[type.name] = resolver_1;
            }
        };
        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var type = types_1[_i];
            _loop_1(type);
        }
        return schemaGenerator.makeExecutableSchema({
            typeDefs: typeDefs,
            resolvers: resolvers,
        });
        var _b;
    }
    exports.default = makeRemoteExecutableSchema;
    function createResolver(fetcher) {
        var _this = this;
        return function (root, args, context, info) { return __awaiter(_this, void 0, void 0, function () {
            var fragments, document, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });
                        document = {
                            kind: _graphql.Kind.DOCUMENT,
                            definitions: [info.operation].concat(fragments),
                        };
                        return [4 /*yield*/, fetcher({
                                query: document,
                                variables: info.variableValues,
                                context: { graphqlContext: context },
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, errors$1.checkResultAndHandleErrors(result, info)];
                }
            });
        }); };
    }
    function createSubscriptionResolver(name, link) {
        return function (root, args, context, info) {
            var fragments = Object.keys(info.fragments).map(function (fragment) { return info.fragments[fragment]; });
            var document = {
                kind: _graphql.Kind.DOCUMENT,
                definitions: [info.operation].concat(fragments),
            };
            var operation = {
                query: document,
                variables: info.variableValues,
                context: { graphqlContext: context },
            };
            var observable = linkToFetcher_1.execute(link, operation);
            return observableToAsyncIterable_1.observableToAsyncIterable(observable);
        };
    }
    function createPassThroughScalar(_a) {
        var name = _a.name, description = _a.description;
        return new _graphql.GraphQLScalarType({
            name: name,
            description: description,
            serialize: function (value) {
                return value;
            },
            parseValue: function (value) {
                return value;
            },
            parseLiteral: function (ast) {
                return parseLiteral(ast);
            },
        });
    }
    function parseLiteral(ast) {
        switch (ast.kind) {
            case _graphql.Kind.STRING:
            case _graphql.Kind.BOOLEAN: {
                return ast.value;
            }
            case _graphql.Kind.INT:
            case _graphql.Kind.FLOAT: {
                return parseFloat(ast.value);
            }
            case _graphql.Kind.OBJECT: {
                var value_1 = Object.create(null);
                ast.fields.forEach(function (field) {
                    value_1[field.name.value] = parseLiteral(field.value);
                });
                return value_1;
            }
            case _graphql.Kind.LIST: {
                return ast.values.map(parseLiteral);
            }
            default:
                return null;
        }
    }
    //# sourceMappingURL=makeRemoteExecutableSchema.js.map
    });

    unwrapExports(makeRemoteExecutableSchema_1);

    var introspectSchema_1 = createCommonjsModule(function (module, exports) {
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });


    var parsedIntrospectionQuery = _graphql.parse(_graphql.introspectionQuery);
    function introspectSchema(fetcher, linkContext) {
        return __awaiter(this, void 0, void 0, function () {
            var introspectionResult, schema;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Convert link to fetcher
                        if (fetcher.request) {
                            fetcher = linkToFetcher_1.default(fetcher);
                        }
                        return [4 /*yield*/, fetcher({
                                query: parsedIntrospectionQuery,
                                context: linkContext,
                            })];
                    case 1:
                        introspectionResult = _a.sent();
                        if ((introspectionResult.errors && introspectionResult.errors.length) ||
                            !introspectionResult.data.__schema) {
                            throw introspectionResult.errors;
                        }
                        else {
                            schema = _graphql.buildClientSchema(introspectionResult.data);
                            return [2 /*return*/, schema];
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.default = introspectSchema;
    //# sourceMappingURL=introspectSchema.js.map
    });

    unwrapExports(introspectSchema_1);

    var TypeRegistry_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    var TypeRegistry = /** @class */ (function () {
        function TypeRegistry() {
            this.types = {};
            this.schemaByField = {
                query: {},
                mutation: {},
                subscription: {},
            };
            this.fragmentReplacements = {};
        }
        TypeRegistry.prototype.getSchemaByField = function (operation, fieldName) {
            return this.schemaByField[operation][fieldName];
        };
        TypeRegistry.prototype.getAllTypes = function () {
            var _this = this;
            return Object.keys(this.types).map(function (name) { return _this.types[name]; });
        };
        TypeRegistry.prototype.getType = function (name) {
            if (!this.types[name]) {
                throw new Error("No such type: " + name);
            }
            return this.types[name];
        };
        TypeRegistry.prototype.resolveType = function (type) {
            if (type instanceof _graphql.GraphQLList) {
                return new _graphql.GraphQLList(this.resolveType(type.ofType));
            }
            else if (type instanceof _graphql.GraphQLNonNull) {
                return new _graphql.GraphQLNonNull(this.resolveType(type.ofType));
            }
            else if (_graphql.isNamedType(type)) {
                return this.getType(_graphql.getNamedType(type).name);
            }
            else {
                return type;
            }
        };
        TypeRegistry.prototype.addSchema = function (schema) {
            var _this = this;
            var query = schema.getQueryType();
            if (query) {
                var fieldNames = Object.keys(query.getFields());
                fieldNames.forEach(function (field) {
                    _this.schemaByField.query[field] = schema;
                });
            }
            var mutation = schema.getMutationType();
            if (mutation) {
                var fieldNames = Object.keys(mutation.getFields());
                fieldNames.forEach(function (field) {
                    _this.schemaByField.mutation[field] = schema;
                });
            }
            var subscription = schema.getSubscriptionType();
            if (subscription) {
                var fieldNames = Object.keys(subscription.getFields());
                fieldNames.forEach(function (field) {
                    _this.schemaByField.subscription[field] = schema;
                });
            }
        };
        TypeRegistry.prototype.addType = function (name, type, onTypeConflict) {
            if (this.types[name]) {
                if (onTypeConflict) {
                    type = onTypeConflict(this.types[name], type);
                }
                else {
                    throw new Error("Type name conflict: " + name);
                }
            }
            this.types[name] = type;
        };
        TypeRegistry.prototype.addFragment = function (typeName, fieldName, fragment) {
            if (!this.fragmentReplacements[typeName]) {
                this.fragmentReplacements[typeName] = {};
            }
            this.fragmentReplacements[typeName][fieldName] = parseFragmentToInlineFragment(fragment);
        };
        return TypeRegistry;
    }());
    exports.default = TypeRegistry;
    function parseFragmentToInlineFragment(definitions) {
        var document = _graphql.parse(definitions);
        for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {
            var definition = _a[_i];
            if (definition.kind === _graphql.Kind.FRAGMENT_DEFINITION) {
                return {
                    kind: _graphql.Kind.INLINE_FRAGMENT,
                    typeCondition: definition.typeCondition,
                    selectionSet: definition.selectionSet,
                };
            }
        }
        throw new Error('Could not parse fragment');
    }
    //# sourceMappingURL=TypeRegistry.js.map
    });

    unwrapExports(TypeRegistry_1);

    var schemaRecreation = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });



    function recreateType(type, resolveType) {
        if (type instanceof _graphql.GraphQLObjectType) {
            var fields_1 = type.getFields();
            var interfaces_1 = type.getInterfaces();
            return new _graphql.GraphQLObjectType({
                name: type.name,
                description: type.description,
                astNode: type.astNode,
                fields: function () { return fieldMapToFieldConfigMap(fields_1, resolveType); },
                interfaces: function () { return interfaces_1.map(function (iface) { return resolveType(iface); }); },
            });
        }
        else if (type instanceof _graphql.GraphQLInterfaceType) {
            var fields_2 = type.getFields();
            return new _graphql.GraphQLInterfaceType({
                name: type.name,
                description: type.description,
                astNode: type.astNode,
                fields: function () { return fieldMapToFieldConfigMap(fields_2, resolveType); },
                resolveType: function (parent, context, info) {
                    return resolveFromParentTypename_1.default(parent, info.schema);
                },
            });
        }
        else if (type instanceof _graphql.GraphQLUnionType) {
            return new _graphql.GraphQLUnionType({
                name: type.name,
                description: type.description,
                astNode: type.astNode,
                types: function () { return type.getTypes().map(function (unionMember) { return resolveType(unionMember); }); },
                resolveType: function (parent, context, info) {
                    return resolveFromParentTypename_1.default(parent, info.schema);
                },
            });
        }
        else if (type instanceof _graphql.GraphQLInputObjectType) {
            return new _graphql.GraphQLInputObjectType({
                name: type.name,
                description: type.description,
                astNode: type.astNode,
                fields: function () {
                    return inputFieldMapToFieldConfigMap(type.getFields(), resolveType);
                },
            });
        }
        else if (type instanceof _graphql.GraphQLEnumType) {
            var values = type.getValues();
            var newValues_1 = {};
            values.forEach(function (value) {
                newValues_1[value.name] = { value: value.name };
            });
            return new _graphql.GraphQLEnumType({
                name: type.name,
                description: type.description,
                astNode: type.astNode,
                values: newValues_1,
            });
        }
        else if (type instanceof _graphql.GraphQLScalarType) {
            if (type === _graphql.GraphQLID ||
                type === _graphql.GraphQLString ||
                type === _graphql.GraphQLFloat ||
                type === _graphql.GraphQLBoolean ||
                type === _graphql.GraphQLInt) {
                return type;
            }
            else {
                return new _graphql.GraphQLScalarType({
                    name: type.name,
                    description: type.description,
                    astNode: type.astNode,
                    serialize: function (value) {
                        return value;
                    },
                    parseValue: function (value) {
                        return value;
                    },
                    parseLiteral: function (ast) {
                        return parseLiteral(ast);
                    },
                });
            }
        }
        else {
            throw new Error("Invalid type " + type);
        }
    }
    exports.recreateType = recreateType;
    function parseLiteral(ast) {
        switch (ast.kind) {
            case _graphql.Kind.STRING:
            case _graphql.Kind.BOOLEAN: {
                return ast.value;
            }
            case _graphql.Kind.INT:
            case _graphql.Kind.FLOAT: {
                return parseFloat(ast.value);
            }
            case _graphql.Kind.OBJECT: {
                var value_1 = Object.create(null);
                ast.fields.forEach(function (field) {
                    value_1[field.name.value] = parseLiteral(field.value);
                });
                return value_1;
            }
            case _graphql.Kind.LIST: {
                return ast.values.map(parseLiteral);
            }
            default:
                return null;
        }
    }
    function fieldMapToFieldConfigMap(fields, resolveType) {
        var result = {};
        Object.keys(fields).forEach(function (name) {
            var field = fields[name];
            var type = resolveType(field.type);
            if (type !== null) {
                result[name] = fieldToFieldConfig(fields[name], resolveType);
            }
        });
        return result;
    }
    exports.fieldMapToFieldConfigMap = fieldMapToFieldConfigMap;
    function createResolveType(getType) {
        var resolveType = function (type) {
            if (type instanceof _graphql.GraphQLList) {
                var innerType = resolveType(type.ofType);
                if (innerType === null) {
                    return null;
                }
                else {
                    return new _graphql.GraphQLList(innerType);
                }
            }
            else if (type instanceof _graphql.GraphQLNonNull) {
                var innerType = resolveType(type.ofType);
                if (innerType === null) {
                    return null;
                }
                else {
                    return new _graphql.GraphQLNonNull(innerType);
                }
            }
            else if (_graphql.isNamedType(type)) {
                return getType(_graphql.getNamedType(type).name, type);
            }
            else {
                return type;
            }
        };
        return resolveType;
    }
    exports.createResolveType = createResolveType;
    function fieldToFieldConfig(field, resolveType) {
        return {
            type: resolveType(field.type),
            args: argsToFieldConfigArgumentMap(field.args, resolveType),
            resolve: defaultMergedResolver_1.default,
            description: field.description,
            deprecationReason: field.deprecationReason,
            astNode: field.astNode,
        };
    }
    function argsToFieldConfigArgumentMap(args, resolveType) {
        var result = {};
        args.forEach(function (arg) {
            var _a = argumentToArgumentConfig(arg, resolveType), name = _a[0], def = _a[1];
            result[name] = def;
        });
        return result;
    }
    function argumentToArgumentConfig(argument, resolveType) {
        return [
            argument.name,
            {
                type: resolveType(argument.type),
                defaultValue: argument.defaultValue,
                description: argument.description,
            },
        ];
    }
    function inputFieldMapToFieldConfigMap(fields, resolveType) {
        var result = {};
        Object.keys(fields).forEach(function (name) {
            var field = fields[name];
            var type = resolveType(field.type);
            if (type !== null) {
                result[name] = inputFieldToFieldConfig(fields[name], resolveType);
            }
        });
        return result;
    }
    function inputFieldToFieldConfig(field, resolveType) {
        return {
            type: resolveType(field.type),
            defaultValue: field.defaultValue,
            description: field.description,
            astNode: field.astNode,
        };
    }
    //# sourceMappingURL=schemaRecreation.js.map
    });

    unwrapExports(schemaRecreation);
    var schemaRecreation_1 = schemaRecreation.recreateType;
    var schemaRecreation_2 = schemaRecreation.fieldMapToFieldConfigMap;
    var schemaRecreation_3 = schemaRecreation.createResolveType;

    var delegateToSchema_1 = createCommonjsModule(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });


    function delegateToSchema(schema, fragmentReplacements, operation, fieldName, args, context, info) {
        return __awaiter(this, void 0, void 0, function () {
            var type, graphqlDoc, errors, operationDefinition, variableValues, _i, _a, definition, key, actualKey, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (operation === 'mutation') {
                            type = schema.getMutationType();
                        }
                        else if (operation === 'subscription') {
                            type = schema.getSubscriptionType();
                        }
                        else {
                            type = schema.getQueryType();
                        }
                        if (!type) return [3 /*break*/, 3];
                        graphqlDoc = createDocument(schema, fragmentReplacements, type, fieldName, operation, info.fieldNodes, info.fragments, info.operation.variableDefinitions);
                        errors = _graphql.validate(schema, graphqlDoc);
                        if (errors.length > 0) {
                            throw errors;
                        }
                        operationDefinition = graphqlDoc.definitions.find(function (_a) {
                            var kind = _a.kind;
                            return kind === _graphql.Kind.OPERATION_DEFINITION;
                        });
                        variableValues = {};
                        if (operationDefinition &&
                            operationDefinition.kind === _graphql.Kind.OPERATION_DEFINITION &&
                            operationDefinition.variableDefinitions &&
                            Array.isArray(operationDefinition.variableDefinitions)) {
                            for (_i = 0, _a = operationDefinition.variableDefinitions; _i < _a.length; _i++) {
                                definition = _a[_i];
                                key = definition.variable.name.value;
                                actualKey = key.startsWith('_') ? key.slice(1) : key;
                                variableValues[key] = args[actualKey] != null ? args[actualKey] : info.variableValues[key];
                            }
                        }
                        if (!(operation === 'query' || operation === 'mutation')) return [3 /*break*/, 2];
                        return [4 /*yield*/, _graphql.execute(schema, graphqlDoc, info.rootValue, context, variableValues)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, errors$1.checkResultAndHandleErrors(result, info, fieldName)];
                    case 2:
                        if (operation === 'subscription') {
                            return [2 /*return*/, _graphql.subscribe(schema, graphqlDoc, info.rootValue, context, variableValues)];
                        }
                        _b.label = 3;
                    case 3: throw new Error('Could not forward to merged schema');
                }
            });
        });
    }
    exports.default = delegateToSchema;
    function createDocument(schema, fragmentReplacements, type, rootFieldName, operation, selections, fragments, variableDefinitions) {
        var rootField = type.getFields()[rootFieldName];
        var newVariables = [];
        var rootSelectionSet = {
            kind: _graphql.Kind.SELECTION_SET,
            // (XXX) This (wrongly) assumes only having one fieldNode
            selections: selections.map(function (selection) {
                if (selection.kind === _graphql.Kind.FIELD) {
                    var _a = processRootField(selection, rootFieldName, rootField), newSelection = _a.selection, variables = _a.variables;
                    newVariables.push.apply(newVariables, variables);
                    return newSelection;
                }
                else {
                    return selection;
                }
            }),
        };
        var newVariableDefinitions = [];
        newVariables.forEach(function (_a) {
            var arg = _a.arg, variable = _a.variable;
            if (newVariableDefinitions.find(function (newVarDef) { return newVarDef.variable.name.value === variable; })) {
                return;
            }
            var argDef = rootField.args.find(function (rootArg) { return rootArg.name === arg; });
            if (!argDef) {
                throw new Error('Unexpected missing arg');
            }
            var typeName = typeToAst(argDef.type);
            newVariableDefinitions.push({
                kind: _graphql.Kind.VARIABLE_DEFINITION,
                variable: {
                    kind: _graphql.Kind.VARIABLE,
                    name: {
                        kind: _graphql.Kind.NAME,
                        value: variable,
                    },
                },
                type: typeName,
            });
        });
        var _a = filterSelectionSetDeep(schema, fragmentReplacements, type, rootSelectionSet, fragments), selectionSet = _a.selectionSet, processedFragments = _a.fragments, usedVariables = _a.usedVariables;
        var operationDefinition = {
            kind: _graphql.Kind.OPERATION_DEFINITION,
            operation: operation,
            variableDefinitions: (variableDefinitions || []).filter(function (variableDefinition) {
                return usedVariables.indexOf(variableDefinition.variable.name.value) !== -1;
            }).concat(newVariableDefinitions),
            selectionSet: selectionSet,
        };
        var newDoc = {
            kind: _graphql.Kind.DOCUMENT,
            definitions: [operationDefinition].concat(processedFragments),
        };
        return newDoc;
    }
    exports.createDocument = createDocument;
    function processRootField(selection, rootFieldName, rootField) {
        var existingArguments = selection.arguments || [];
        var existingArgumentNames = existingArguments.map(function (arg) { return arg.name.value; });
        var allowedArguments = rootField.args.map(function (arg) { return arg.name; });
        var missingArgumentNames = difference(allowedArguments, existingArgumentNames);
        var extraArguments = difference(existingArgumentNames, allowedArguments);
        var filteredExistingArguments = existingArguments.filter(function (arg) { return extraArguments.indexOf(arg.name.value) === -1; });
        var variables = [];
        var missingArguments = missingArgumentNames.map(function (name) {
            // (XXX): really needs better var generation
            var variableName = "_" + name;
            variables.push({
                arg: name,
                variable: variableName,
            });
            return {
                kind: _graphql.Kind.ARGUMENT,
                name: {
                    kind: _graphql.Kind.NAME,
                    value: name,
                },
                value: {
                    kind: _graphql.Kind.VARIABLE,
                    name: {
                        kind: _graphql.Kind.NAME,
                        value: variableName,
                    },
                },
            };
        });
        return {
            selection: {
                kind: _graphql.Kind.FIELD,
                alias: null,
                arguments: filteredExistingArguments.concat(missingArguments),
                selectionSet: selection.selectionSet,
                name: {
                    kind: _graphql.Kind.NAME,
                    value: rootFieldName,
                },
            },
            variables: variables,
        };
    }
    function filterSelectionSetDeep(schema, fragmentReplacements, type, selectionSet, fragments) {
        var validFragments = [];
        Object.keys(fragments).forEach(function (fragmentName) {
            var fragment = fragments[fragmentName];
            var typeName = fragment.typeCondition.name.value;
            var innerType = schema.getType(typeName);
            if (innerType) {
                validFragments.push(fragment);
            }
        });
        var _a = filterSelectionSet(schema, fragmentReplacements, type, selectionSet, validFragments), newSelectionSet = _a.selectionSet, remainingFragments = _a.usedFragments, usedVariables = _a.usedVariables;
        var newFragments = {};
        // (XXX): So this will break if we have a fragment that only has link fields
        while (remainingFragments.length > 0) {
            var name_1 = remainingFragments.pop();
            if (newFragments[name_1]) {
                continue;
            }
            else {
                var nextFragment = fragments[name_1];
                if (!name_1) {
                    throw new Error("Could not find fragment " + name_1);
                }
                var typeName = nextFragment.typeCondition.name.value;
                var innerType = schema.getType(typeName);
                if (!innerType) {
                    continue;
                }
                var _b = filterSelectionSet(schema, fragmentReplacements, innerType, nextFragment.selectionSet, validFragments), fragmentSelectionSet = _b.selectionSet, fragmentUsedFragments = _b.usedFragments, fragmentUsedVariables = _b.usedVariables;
                remainingFragments = union(remainingFragments, fragmentUsedFragments);
                usedVariables = union(usedVariables, fragmentUsedVariables);
                newFragments[name_1] = {
                    kind: _graphql.Kind.FRAGMENT_DEFINITION,
                    name: {
                        kind: _graphql.Kind.NAME,
                        value: name_1,
                    },
                    typeCondition: nextFragment.typeCondition,
                    selectionSet: fragmentSelectionSet,
                };
            }
        }
        var newFragmentValues = Object.keys(newFragments).map(function (name) { return newFragments[name]; });
        return {
            selectionSet: newSelectionSet,
            fragments: newFragmentValues,
            usedVariables: usedVariables,
        };
    }
    function filterSelectionSet(schema, fragmentReplacements, type, selectionSet, validFragments) {
        var usedFragments = [];
        var usedVariables = [];
        var typeStack = [type];
        var filteredSelectionSet = _graphql.visit(selectionSet, (_a = {}, _a[_graphql.Kind.FIELD] = {
                enter: function (node) {
                    var parentType = resolveType(typeStack[typeStack.length - 1]);
                    if (parentType instanceof _graphql.GraphQLObjectType ||
                        parentType instanceof _graphql.GraphQLInterfaceType) {
                        var fields = parentType.getFields();
                        var field = node.name.value === '__typename'
                            ? _graphql.TypeNameMetaFieldDef
                            : fields[node.name.value];
                        if (!field) {
                            return null;
                        }
                        else {
                            typeStack.push(field.type);
                        }
                    }
                    else if (parentType instanceof _graphql.GraphQLUnionType &&
                        node.name.value === '__typename') {
                        typeStack.push(_graphql.TypeNameMetaFieldDef.type);
                    }
                },
                leave: function () {
                    typeStack.pop();
                },
            }, _a[_graphql.Kind.SELECTION_SET] = function (node) {
                var parentType = resolveType(typeStack[typeStack.length - 1]);
                var parentTypeName = parentType.name;
                var selections = node.selections;
                if ((parentType instanceof _graphql.GraphQLInterfaceType ||
                    parentType instanceof _graphql.GraphQLUnionType) &&
                    !selections.find(function (_) {
                        return _.kind === _graphql.Kind.FIELD &&
                            _.name.value === '__typename';
                    })) {
                    selections = selections.concat({
                        kind: _graphql.Kind.FIELD,
                        name: {
                            kind: _graphql.Kind.NAME,
                            value: '__typename',
                        },
                    });
                }
                if (fragmentReplacements[parentTypeName]) {
                    selections.forEach(function (selection) {
                        if (selection.kind === _graphql.Kind.FIELD) {
                            var name_2 = selection.name.value;
                            var fragment = fragmentReplacements[parentTypeName][name_2];
                            if (fragment) {
                                selections = selections.concat(fragment);
                            }
                        }
                    });
                }
                if (selections !== node.selections) {
                    return __assign({}, node, { selections: selections });
                }
            }, _a[_graphql.Kind.FRAGMENT_SPREAD] = function (node) {
                var fragmentFiltered = validFragments.filter(function (frg) { return frg.name.value === node.name.value; });
                var fragment = fragmentFiltered[0];
                if (fragment) {
                    if (fragment.typeCondition) {
                        var innerType = schema.getType(fragment.typeCondition.name.value);
                        var parentType = resolveType(typeStack[typeStack.length - 1]);
                        if (!implementsAbstractType(parentType, innerType)) {
                            return null;
                        }
                    }
                    usedFragments.push(node.name.value);
                    return;
                }
                else {
                    return null;
                }
            }, _a[_graphql.Kind.INLINE_FRAGMENT] = {
                enter: function (node) {
                    if (node.typeCondition) {
                        var innerType = schema.getType(node.typeCondition.name.value);
                        var parentType = resolveType(typeStack[typeStack.length - 1]);
                        if (implementsAbstractType(parentType, innerType)) {
                            typeStack.push(innerType);
                        }
                        else {
                            return null;
                        }
                    }
                },
                leave: function (node) {
                    if (node.typeCondition) {
                        var innerType = schema.getType(node.typeCondition.name.value);
                        if (innerType) {
                            typeStack.pop();
                        }
                        else {
                            return null;
                        }
                    }
                },
            }, _a[_graphql.Kind.VARIABLE] = function (node) {
                usedVariables.push(node.name.value);
            }, _a));
        return {
            selectionSet: filteredSelectionSet,
            usedFragments: usedFragments,
            usedVariables: usedVariables,
        };
        var _a;
    }
    function resolveType(type) {
        var lastType = type;
        while (lastType instanceof _graphql.GraphQLNonNull ||
            lastType instanceof _graphql.GraphQLList) {
            lastType = lastType.ofType;
        }
        return lastType;
    }
    function implementsAbstractType(parent, child, bail) {
        if (bail === void 0) { bail = false; }
        if (parent === child) {
            return true;
        }
        else if (parent instanceof _graphql.GraphQLInterfaceType &&
            child instanceof _graphql.GraphQLObjectType) {
            return child.getInterfaces().indexOf(parent) !== -1;
        }
        else if (parent instanceof _graphql.GraphQLInterfaceType &&
            child instanceof _graphql.GraphQLInterfaceType) {
            return true;
        }
        else if (parent instanceof _graphql.GraphQLUnionType &&
            child instanceof _graphql.GraphQLObjectType) {
            return parent.getTypes().indexOf(child) !== -1;
        }
        else if (parent instanceof _graphql.GraphQLObjectType && !bail) {
            return implementsAbstractType(child, parent, true);
        }
        return false;
    }
    function typeToAst(type) {
        if (type instanceof _graphql.GraphQLNonNull) {
            var innerType = typeToAst(type.ofType);
            if (innerType.kind === _graphql.Kind.LIST_TYPE ||
                innerType.kind === _graphql.Kind.NAMED_TYPE) {
                return {
                    kind: _graphql.Kind.NON_NULL_TYPE,
                    type: innerType,
                };
            }
            else {
                throw new Error('Incorrent inner non-null type');
            }
        }
        else if (type instanceof _graphql.GraphQLList) {
            return {
                kind: _graphql.Kind.LIST_TYPE,
                type: typeToAst(type.ofType),
            };
        }
        else {
            return {
                kind: _graphql.Kind.NAMED_TYPE,
                name: {
                    kind: _graphql.Kind.NAME,
                    value: type.toString(),
                },
            };
        }
    }
    function union() {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i] = arguments[_i];
        }
        var cache = {};
        var result = [];
        arrays.forEach(function (array) {
            array.forEach(function (item) {
                if (!cache[item]) {
                    cache[item] = true;
                    result.push(item);
                }
            });
        });
        return result;
    }
    function difference(from) {
        var arrays = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            arrays[_i - 1] = arguments[_i];
        }
        var cache = {};
        arrays.forEach(function (array) {
            array.forEach(function (item) {
                cache[item] = true;
            });
        });
        return from.filter(function (item) { return !cache[item]; });
    }
    //# sourceMappingURL=delegateToSchema.js.map
    });

    unwrapExports(delegateToSchema_1);
    var delegateToSchema_2 = delegateToSchema_1.createDocument;

    var typeFromAST_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    //
    // TODO put back import once PR is merged
    // https://github.com/graphql/graphql-js/pull/1165
    // import { getDescription } from 'graphql/utilities/buildASTSchema';
    var backcompatOptions = { commentDescriptions: true };

    function typeFromAST(typeRegistry, node) {
        switch (node.kind) {
            case _graphql.Kind.OBJECT_TYPE_DEFINITION:
                return makeObjectType(typeRegistry, node);
            case _graphql.Kind.INTERFACE_TYPE_DEFINITION:
                return makeInterfaceType(typeRegistry, node);
            case _graphql.Kind.ENUM_TYPE_DEFINITION:
                return makeEnumType(typeRegistry, node);
            case _graphql.Kind.UNION_TYPE_DEFINITION:
                return makeUnionType(typeRegistry, node);
            case _graphql.Kind.SCALAR_TYPE_DEFINITION:
                return makeScalarType(typeRegistry, node);
            case _graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                return makeInputObjectType(typeRegistry, node);
            default:
                return null;
        }
    }
    exports.default = typeFromAST;
    function makeObjectType(typeRegistry, node) {
        return new _graphql.GraphQLObjectType({
            name: node.name.value,
            fields: function () { return makeFields(typeRegistry, node.fields); },
            interfaces: function () {
                return node.interfaces.map(function (iface) { return typeRegistry.getType(iface.name.value); });
            },
            description: getDescription(node, backcompatOptions),
        });
    }
    function makeInterfaceType(typeRegistry, node) {
        return new _graphql.GraphQLInterfaceType({
            name: node.name.value,
            fields: function () { return makeFields(typeRegistry, node.fields); },
            description: getDescription(node, backcompatOptions),
            resolveType: function (parent, context, info) {
                return resolveFromParentTypename_1.default(parent, info.schema);
            },
        });
    }
    function makeEnumType(typeRegistry, node) {
        var values = {};
        node.values.forEach(function (value) {
            values[value.name.value] = {
                description: getDescription(value, backcompatOptions),
            };
        });
        return new _graphql.GraphQLEnumType({
            name: node.name.value,
            values: values,
            description: getDescription(node, backcompatOptions),
        });
    }
    function makeUnionType(typeRegistry, node) {
        return new _graphql.GraphQLUnionType({
            name: node.name.value,
            types: function () {
                return node.types.map(function (type) { return resolveType(typeRegistry, type); });
            },
            description: getDescription(node, backcompatOptions),
            resolveType: function (parent, context, info) {
                return resolveFromParentTypename_1.default(parent, info.schema);
            },
        });
    }
    function makeScalarType(typeRegistry, node) {
        return new _graphql.GraphQLScalarType({
            name: node.name.value,
            description: getDescription(node, backcompatOptions),
            serialize: function () { return null; },
            // Note: validation calls the parse functions to determine if a
            // literal value is correct. Returning null would cause use of custom
            // scalars to always fail validation. Returning false causes them to
            // always pass validation.
            parseValue: function () { return false; },
            parseLiteral: function () { return false; },
        });
    }
    function makeInputObjectType(typeRegistry, node) {
        return new _graphql.GraphQLInputObjectType({
            name: node.name.value,
            fields: function () { return makeValues(typeRegistry, node.fields); },
            description: getDescription(node, backcompatOptions),
        });
    }
    function makeFields(typeRegistry, nodes) {
        var result = {};
        nodes.forEach(function (node) {
            result[node.name.value] = {
                type: resolveType(typeRegistry, node.type),
                args: makeValues(typeRegistry, node.arguments),
                description: getDescription(node, backcompatOptions),
            };
        });
        return result;
    }
    function makeValues(typeRegistry, nodes) {
        var result = {};
        nodes.forEach(function (node) {
            var type = resolveType(typeRegistry, node.type);
            result[node.name.value] = {
                type: type,
                defaultValue: _graphql.valueFromAST(node.defaultValue, type),
                description: getDescription(node, backcompatOptions),
            };
        });
        return result;
    }
    function resolveType(typeRegistry, node) {
        switch (node.kind) {
            case _graphql.Kind.LIST_TYPE:
                return new _graphql.GraphQLList(resolveType(typeRegistry, node.type));
            case _graphql.Kind.NON_NULL_TYPE:
                return new _graphql.GraphQLNonNull(resolveType(typeRegistry, node.type));
            default:
                return typeRegistry.getType(node.name.value);
        }
    }
    // Code below temporarily copied from graphql/graphql-js pending PR
    // https://github.com/graphql/graphql-js/pull/1165
    // MIT License
    // Copyright (c) 2015-present, Facebook, Inc.
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    // The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.
    function getDescription(node, options) {
        if (node.description) {
            return node.description.value;
        }
        if (options && options.commentDescriptions) {
            var rawValue = getLeadingCommentBlock(node);
            if (rawValue !== undefined) {
                return blockStringValue('\n' + rawValue);
            }
        }
    }
    function getLeadingCommentBlock(node) {
        var loc = node.loc;
        if (!loc) {
            return;
        }
        var comments = [];
        var token = loc.startToken.prev;
        while (token &&
            token.kind === 'Comment' &&
            token.next &&
            token.prev &&
            token.line + 1 === token.next.line &&
            token.line !== token.prev.line) {
            var value = String(token.value);
            comments.push(value);
            token = token.prev;
        }
        return comments.reverse().join('\n');
    }
    /**
     * Produces the value of a block string from its parsed raw value, similar to
     * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.
     *
     * This implements the GraphQL spec's BlockStringValue() static algorithm.
     */
    function blockStringValue(rawString) {
        // Expand a block string's raw value into independent lines.
        var lines = rawString.split(/\r\n|[\n\r]/g);
        // Remove common indentation from all lines but first.
        var commonIndent = null;
        for (var i = 1; i < lines.length; i++) {
            var line = lines[i];
            var indent = leadingWhitespace(line);
            if (indent < line.length &&
                (commonIndent === null || indent < commonIndent)) {
                commonIndent = indent;
                if (commonIndent === 0) {
                    break;
                }
            }
        }
        if (commonIndent) {
            for (var i = 1; i < lines.length; i++) {
                lines[i] = lines[i].slice(commonIndent);
            }
        }
        // Remove leading and trailing blank lines.
        while (lines.length > 0 && isBlank(lines[0])) {
            lines.shift();
        }
        while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
            lines.pop();
        }
        // Return a string of the lines joined with U+000A.
        return lines.join('\n');
    }
    function leadingWhitespace(str) {
        var i = 0;
        while (i < str.length && (str[i] === ' ' || str[i] === '\t')) {
            i++;
        }
        return i;
    }
    function isBlank(str) {
        return leadingWhitespace(str) === str.length;
    }
    //# sourceMappingURL=typeFromAST.js.map
    });

    unwrapExports(typeFromAST_1);

    var mergeSchemas_1 = createCommonjsModule(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });








    var backcompatOptions = { commentDescriptions: true };
    function mergeSchemas(_a) {
        var schemas = _a.schemas, onTypeConflict = _a.onTypeConflict, resolvers = _a.resolvers;
        if (!onTypeConflict) {
            onTypeConflict = defaultOnTypeConflict;
        }
        var queryFields = {};
        var mutationFields = {};
        var subscriptionFields = {};
        var typeRegistry = new TypeRegistry_1.default();
        var resolveType = schemaRecreation.createResolveType(function (name) {
            return typeRegistry.getType(name);
        });
        var mergeInfo = createMergeInfo(typeRegistry);
        var actualSchemas = [];
        var typeFragments = [];
        var extensions = [];
        var fullResolvers = {};
        schemas.forEach(function (schema) {
            if (schema instanceof _graphql.GraphQLSchema) {
                actualSchemas.push(schema);
            }
            else if (typeof schema === 'string') {
                var parsedSchemaDocument = _graphql.parse(schema);
                try {
                    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542
                    var actualSchema = _graphql.buildASTSchema(parsedSchemaDocument, backcompatOptions);
                    if (actualSchema.getQueryType()) {
                        actualSchemas.push(actualSchema);
                    }
                }
                catch (e) {
                    typeFragments.push(parsedSchemaDocument);
                }
                parsedSchemaDocument = schemaGenerator.extractExtensionDefinitions(parsedSchemaDocument);
                if (parsedSchemaDocument.definitions.length > 0) {
                    extensions.push(parsedSchemaDocument);
                }
            }
        });
        actualSchemas.forEach(function (schema) {
            typeRegistry.addSchema(schema);
            var queryType = schema.getQueryType();
            var mutationType = schema.getMutationType();
            var subscriptionType = schema.getSubscriptionType();
            var typeMap = schema.getTypeMap();
            Object.keys(typeMap).forEach(function (typeName) {
                var type = typeMap[typeName];
                if (_graphql.isNamedType(type) &&
                    _graphql.getNamedType(type).name.slice(0, 2) !== '__' &&
                    type !== queryType &&
                    type !== mutationType &&
                    type !== subscriptionType) {
                    var newType = schemaRecreation.recreateType(type, resolveType);
                    typeRegistry.addType(newType.name, newType, onTypeConflict);
                }
            });
            Object.keys(queryType.getFields()).forEach(function (name) {
                if (!fullResolvers.Query) {
                    fullResolvers.Query = {};
                }
                fullResolvers.Query[name] = createDelegatingResolver(mergeInfo, 'query', name);
            });
            queryFields = __assign({}, queryFields, queryType.getFields());
            if (mutationType) {
                if (!fullResolvers.Mutation) {
                    fullResolvers.Mutation = {};
                }
                Object.keys(mutationType.getFields()).forEach(function (name) {
                    fullResolvers.Mutation[name] = createDelegatingResolver(mergeInfo, 'mutation', name);
                });
                mutationFields = __assign({}, mutationFields, mutationType.getFields());
            }
            if (subscriptionType) {
                if (!fullResolvers.Subscription) {
                    fullResolvers.Subscription = {};
                }
                Object.keys(subscriptionType.getFields()).forEach(function (name) {
                    fullResolvers.Subscription[name] = {
                        subscribe: createDelegatingResolver(mergeInfo, 'subscription', name),
                    };
                });
                subscriptionFields = __assign({}, subscriptionFields, subscriptionType.getFields());
            }
        });
        typeFragments.forEach(function (document) {
            document.definitions.forEach(function (def) {
                var type = typeFromAST_1.default(typeRegistry, def);
                if (type) {
                    typeRegistry.addType(type.name, type, onTypeConflict);
                }
            });
        });
        var passedResolvers = {};
        if (resolvers) {
            if (typeof resolvers === 'function') {
                passedResolvers = resolvers(mergeInfo);
            }
            else if (Array.isArray(resolvers)) {
                passedResolvers = resolvers
                    .map(function (resolver) {
                    return typeof resolver === 'function' ? resolver(mergeInfo) : resolver;
                })
                    .reduce(mergeDeep_1.default, {});
            }
            else {
                passedResolvers = __assign({}, resolvers);
            }
        }
        Object.keys(passedResolvers).forEach(function (typeName) {
            var type = passedResolvers[typeName];
            if (type instanceof _graphql.GraphQLScalarType) {
                return;
            }
            Object.keys(type).forEach(function (fieldName) {
                var field = type[fieldName];
                if (field.fragment) {
                    typeRegistry.addFragment(typeName, fieldName, field.fragment);
                }
            });
        });
        fullResolvers = mergeDeep_1.default(fullResolvers, passedResolvers);
        var query = new _graphql.GraphQLObjectType({
            name: 'Query',
            fields: function () { return schemaRecreation.fieldMapToFieldConfigMap(queryFields, resolveType); },
        });
        var mutation;
        if (!isEmptyObject_1.default(mutationFields)) {
            mutation = new _graphql.GraphQLObjectType({
                name: 'Mutation',
                fields: function () { return schemaRecreation.fieldMapToFieldConfigMap(mutationFields, resolveType); },
            });
        }
        var subscription;
        if (!isEmptyObject_1.default(subscriptionFields)) {
            subscription = new _graphql.GraphQLObjectType({
                name: 'Subscription',
                fields: function () { return schemaRecreation.fieldMapToFieldConfigMap(subscriptionFields, resolveType); },
            });
        }
        typeRegistry.addType('Query', query);
        typeRegistry.addType('Mutation', mutation);
        typeRegistry.addType('Subscription', subscription);
        var mergedSchema = new _graphql.GraphQLSchema({
            query: query,
            mutation: mutation,
            subscription: subscription,
            types: typeRegistry.getAllTypes(),
        });
        extensions.forEach(function (extension) {
            // TODO fix types https://github.com/apollographql/graphql-tools/issues/542
            mergedSchema = _graphql.extendSchema(mergedSchema, extension, backcompatOptions);
        });
        schemaGenerator.addResolveFunctionsToSchema(mergedSchema, fullResolvers);
        forEachField(mergedSchema, function (field) {
            if (field.resolve) {
                var fieldResolver_1 = field.resolve;
                field.resolve = function (parent, args, context, info) {
                    var newInfo = __assign({}, info, { mergeInfo: mergeInfo });
                    return fieldResolver_1(parent, args, context, newInfo);
                };
            }
        });
        return mergedSchema;
    }
    exports.default = mergeSchemas;
    function defaultOnTypeConflict(left, right) {
        return left;
    }
    function createMergeInfo(typeRegistry) {
        return {
            delegate: function (operation, fieldName, args, context, info) {
                var schema = typeRegistry.getSchemaByField(operation, fieldName);
                if (!schema) {
                    throw new Error("Cannot find subschema for root field " + operation + "." + fieldName);
                }
                var fragmentReplacements = typeRegistry.fragmentReplacements;
                return delegateToSchema_1.default(schema, fragmentReplacements, operation, fieldName, args, context, info);
            },
        };
    }
    function createDelegatingResolver(mergeInfo, operation, fieldName) {
        return function (root, args, context, info) {
            return mergeInfo.delegate(operation, fieldName, args, context, info);
        };
    }
    function forEachField(schema, fn) {
        var typeMap = schema.getTypeMap();
        Object.keys(typeMap).forEach(function (typeName) {
            var type = typeMap[typeName];
            if (!_graphql.getNamedType(type).name.startsWith('__') &&
                type instanceof _graphql.GraphQLObjectType) {
                var fields_1 = type.getFields();
                Object.keys(fields_1).forEach(function (fieldName) {
                    var field = fields_1[fieldName];
                    fn(field, typeName, fieldName);
                });
            }
        });
    }
    //# sourceMappingURL=mergeSchemas.js.map
    });

    unwrapExports(mergeSchemas_1);

    var stitching = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    exports.makeRemoteExecutableSchema = makeRemoteExecutableSchema_1.default;

    exports.introspectSchema = introspectSchema_1.default;

    exports.mergeSchemas = mergeSchemas_1.default;

    exports.delegateToSchema = delegateToSchema_1.default;
    exports.createDocument = delegateToSchema_1.createDocument;

    exports.defaultMergedResolver = defaultMergedResolver_1.default;
    //# sourceMappingURL=index.js.map
    });

    unwrapExports(stitching);
    var stitching_1 = stitching.makeRemoteExecutableSchema;
    var stitching_2 = stitching.introspectSchema;
    var stitching_3 = stitching.mergeSchemas;
    var stitching_4 = stitching.delegateToSchema;
    var stitching_5 = stitching.createDocument;
    var stitching_6 = stitching.defaultMergedResolver;

    var dist = createCommonjsModule(function (module, exports) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(schemaGenerator);
    __export(mock);
    __export(stitching);
    __export(schemaVisitor);
    //# sourceMappingURL=index.js.map
    });

    unwrapExports(dist);
    var dist_1 = dist.SchemaDirectiveVisitor;
    var dist_2 = dist.makeExecutableSchema;
    var dist_3 = dist.addResolveFunctionsToSchema;

    var lib$2 = createCommonjsModule(function (module, exports) {

    exports.__esModule = true;





    function identity(value) {
      return value;
    }

    function parseLiteral(ast, variables) {
      switch (ast.kind) {
        case language.Kind.STRING:
        case language.Kind.BOOLEAN:
          return ast.value;
        case language.Kind.INT:
        case language.Kind.FLOAT:
          return parseFloat(ast.value);
        case language.Kind.OBJECT:
          {
            var value = Object.create(null);
            ast.fields.forEach(function (field) {
              value[field.name.value] = parseLiteral(field.value, variables);
            });

            return value;
          }
        case language.Kind.LIST:
          return ast.values.map(function (n) {
            return parseLiteral(n, variables);
          });
        case language.Kind.NULL:
          return null;
        case language.Kind.VARIABLE:
          {
            var name = ast.name.value;
            return variables ? variables[name] : undefined;
          }
        default:
          return undefined;
      }
    }

    exports.default = new _graphql.GraphQLScalarType({
      name: 'JSON',
      description: 'The `JSON` scalar type represents JSON values as specified by ' + '[ECMA-404](http://www.ecma-international.org/' + 'publications/files/ECMA-ST/ECMA-404.pdf).',
      serialize: identity,
      parseValue: identity,
      parseLiteral: parseLiteral
    });
    module.exports = exports['default'];
    });

    var GraphQLJSON = unwrapExports(lib$2);
    var lib_1 = lib$2.GraphQLJSON;

    var formatter = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    /**
     * Copyright (c) 2017, Dirk-Jan Rutten
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    // Parses an RFC 3339 compliant time-string into a Date.
    // It does this by combining the current date with the time-string
    // to create a new Date instance.
    //
    // Example:
    // Suppose the current date is 2016-01-01, then
    // parseTime('11:00:12Z') parses to a Date corresponding to
    // 2016-01-01T11:00:12Z.
    var parseTime = exports.parseTime = function parseTime(time) {
      var currentDateString = new Date().toISOString();
      return new Date(currentDateString.substr(0, currentDateString.indexOf('T') + 1) + time);
    };

    // Serializes a Date into an RFC 3339 compliant time-string in the
    // format hh:mm:ss.sssZ.
    var serializeTime = exports.serializeTime = function serializeTime(date) {
      var dateTimeString = date.toISOString();
      return dateTimeString.substr(dateTimeString.indexOf('T') + 1);
    };

    // Serializes an RFC 3339 compliant time-string by shifting
    // it to UTC.
    var serializeTimeString = exports.serializeTimeString = function serializeTimeString(time) {
      // If already formatted to UTC then return the time string
      if (time.indexOf('Z') !== -1) {
        return time;
      } else {
        // These are time-strings with timezone information,
        // these need to be shifted to UTC.

        // Convert to UTC time string in
        // format hh:mm:ss.sssZ.
        var date = parseTime(time);
        var timeUTC = serializeTime(date);

        // Regex to look for fractional second part in time string
        // such as 00:00:00.345+01:00
        var regexFracSec = /\.\d{1,}/;

        // Retrieve the fractional second part of the time
        // string if it exists.
        var fractionalPart = time.match(regexFracSec);
        if (fractionalPart == null) {
          // These are time-strings without the fractional
          // seconds. So we remove them from the UTC time-string.
          timeUTC = timeUTC.replace(regexFracSec, '');
          return timeUTC;
        } else {
          // These are time-string with fractional seconds.
          // Make sure that we inject the fractional
          // second part back in. The `timeUTC` variable
          // has millisecond precision, we may want more or less
          // depending on the string that was passed.
          timeUTC = timeUTC.replace(regexFracSec, fractionalPart[0]);
          return timeUTC;
        }
      }
    };

    // Parses an RFC 3339 compliant date-string into a Date.
    //
    // Example:
    // parseDate('2016-01-01') parses to a Date corresponding to
    // 2016-01-01T00:00:00.000Z.
    var parseDate = exports.parseDate = function parseDate(date) {
      return new Date(date);
    };

    // Serializes a Date into a RFC 3339 compliant date-string
    // in the format YYYY-MM-DD.
    var serializeDate = exports.serializeDate = function serializeDate(date) {
      return date.toISOString().split('T')[0];
    };

    // Parses an RFC 3339 compliant date-time-string into a Date.
    var parseDateTime = exports.parseDateTime = function parseDateTime(dateTime) {
      return new Date(dateTime);
    };

    // Serializes a Date into an RFC 3339 compliant date-time-string
    // in the format YYYY-MM-DDThh:mm:ss.sssZ.
    var serializeDateTime = exports.serializeDateTime = function serializeDateTime(dateTime) {
      return dateTime.toISOString();
    };

    // Serializes an RFC 3339 compliant date-time-string by shifting
    // it to UTC.
    var serializeDateTimeString = exports.serializeDateTimeString = function serializeDateTimeString(dateTime) {
      // If already formatted to UTC then return the time string
      if (dateTime.indexOf('Z') !== -1) {
        return dateTime;
      } else {
        // These are time-strings with timezone information,
        // these need to be shifted to UTC.

        // Convert to UTC time string in
        // format YYYY-MM-DDThh:mm:ss.sssZ.
        var dateTimeUTC = new Date(dateTime).toISOString();

        // Regex to look for fractional second part in date-time string
        var regexFracSec = /\.\d{1,}/;

        // Retrieve the fractional second part of the time
        // string if it exists.
        var fractionalPart = dateTime.match(regexFracSec);
        if (fractionalPart == null) {
          // The date-time-string has no fractional part,
          // so we remove it from the dateTimeUTC variable.
          dateTimeUTC = dateTimeUTC.replace(regexFracSec, '');
          return dateTimeUTC;
        } else {
          // These are datetime-string with fractional seconds.
          // Make sure that we inject the fractional
          // second part back in. The `dateTimeUTC` variable
          // has millisecond precision, we may want more or less
          // depending on the string that was passed.
          dateTimeUTC = dateTimeUTC.replace(regexFracSec, fractionalPart[0]);
          return dateTimeUTC;
        }
      }
    };

    // Serializes a Unix timestamp to an RFC 3339 compliant date-time-string
    // in the format YYYY-MM-DDThh:mm:ss.sssZ
    var serializeUnixTimestamp = exports.serializeUnixTimestamp = function serializeUnixTimestamp(timestamp) {
      return new Date(timestamp * 1000).toISOString();
    };
    });

    unwrapExports(formatter);
    var formatter_1 = formatter.parseTime;
    var formatter_2 = formatter.serializeTime;
    var formatter_3 = formatter.serializeTimeString;
    var formatter_4 = formatter.parseDate;
    var formatter_5 = formatter.serializeDate;
    var formatter_6 = formatter.parseDateTime;
    var formatter_7 = formatter.serializeDateTime;
    var formatter_8 = formatter.serializeDateTimeString;
    var formatter_9 = formatter.serializeUnixTimestamp;

    var validator = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    /**
     * Copyright (c) 2017, Dirk-Jan Rutten
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    // Check whether a certain year is a leap year.
    //
    // Every year that is exactly divisible by four
    // is a leap year, except for years that are exactly
    // divisible by 100, but these centurial years are
    // leap years if they are exactly divisible by 400.
    // For example, the years 1700, 1800, and 1900 are not leap years,
    // but the years 1600 and 2000 are.
    //
    var leapYear = function leapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    };

    // Function that checks whether a time-string is RFC 3339 compliant.
    //
    // It checks whether the time-string is structured in one of the
    // following formats:
    //
    // - hh:mm:ssZ
    // - hh:mm:ss±hh:mm
    // - hh:mm:ss.*sZ
    // - hh:mm:ss.*s±hh:mm
    //
    // Where *s is a fraction of seconds with at least 1 digit.
    //
    // Note, this validator assumes that all minutes have
    // 59 seconds. This assumption does not follow RFC 3339
    // which includes leap seconds (in which case it is possible that
    // there are 60 seconds in a minute).
    //
    // Leap seconds are ignored because it adds complexity in
    // the following areas:
    // - The native Javascript Date ignores them; i.e. Date.parse('1972-12-31T23:59:60Z')
    //   equals NaN.
    // - Leap seconds cannot be known in advance.
    //
    var validateTime = exports.validateTime = function validateTime(time) {
      var TIME_REGEX = /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
      return TIME_REGEX.test(time);
    };

    // Function that checks whether a date-string is RFC 3339 compliant.
    //
    // It checks whether the date-string is a valid date in the YYYY-MM-DD.
    //
    // Note, the number of days in each date are determined according to the
    // following lookup table:
    //
    // Month Number  Month/Year           Maximum value of date-mday
    // ------------  ----------           --------------------------
    // 01            January              31
    // 02            February, normal     28
    // 02            February, leap year  29
    // 03            March                31
    // 04            April                30
    // 05            May                  31
    // 06            June                 30
    // 07            July                 31
    // 08            August               31
    // 09            September            30
    // 10            October              31
    // 11            November             30
    // 12            December             31
    //
    var validateDate = exports.validateDate = function validateDate(datestring) {
      var RFC_3339_REGEX = /^(\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))$/;

      if (!RFC_3339_REGEX.test(datestring)) {
        return false;
      }

      // Verify the correct number of days for
      // the month contained in the date-string.
      var year = Number(datestring.substr(0, 4));
      var month = Number(datestring.substr(5, 2));
      var day = Number(datestring.substr(8, 2));

      switch (month) {
        case 2:
          // February
          if (leapYear(year) && day > 29) {
            return false;
          } else if (!leapYear(year) && day > 28) {
            return false;
          }
          return true;
        case 4: // April
        case 6: // June
        case 9: // September
        case 11:
          // November
          if (day > 30) {
            return false;
          }
          break;
      }

      return true;
    };

    // Function that checks whether a date-time-string is RFC 3339 compliant.
    //
    // It checks whether the time-string is structured in one of the
    //
    // - YYYY-MM-DDThh:mm:ssZ
    // - YYYY-MM-DDThh:mm:ss±hh:mm
    // - YYYY-MM-DDThh:mm:ss.*sZ
    // - YYYY-MM-DDThh:mm:ss.*s±hh:mm
    //
    // Where *s is a fraction of seconds with at least 1 digit.
    //
    var validateDateTime = exports.validateDateTime = function validateDateTime(dateTimeString) {
      var RFC_3339_REGEX = /^(\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60))(\.\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;

      // Validate the structure of the date-string
      if (!RFC_3339_REGEX.test(dateTimeString)) {
        return false;
      }

      // Check if it is a correct date using the javascript Date parse() method.
      var time = Date.parse(dateTimeString);
      if (time !== time) {
        // eslint-disable-line
        return false;
      }
      // Split the date-time-string up into the string-date and time-string part.
      // and check whether these parts are RFC 3339 compliant.
      var index = dateTimeString.indexOf('T');
      var dateString = dateTimeString.substr(0, index);
      var timeString = dateTimeString.substr(index + 1);
      return validateDate(dateString) && validateTime(timeString);
    };

    // Function that checks whether a given number is a valid
    // Unix timestamp.
    //
    // Unix timestamps are signed 32-bit integers. They are interpreted
    // as the number of seconds since 00:00:00 UTC on 1 January 1970.
    //
    var validateUnixTimestamp = exports.validateUnixTimestamp = function validateUnixTimestamp(timestamp) {
      var MAX_INT = 2147483647;
      var MIN_INT = -2147483648;
      return timestamp === timestamp && timestamp <= MAX_INT && timestamp >= MIN_INT; // eslint-disable-line
    };

    // Function that checks whether a javascript Date instance
    // is valid.
    //
    var validateJSDate = exports.validateJSDate = function validateJSDate(date) {
      var time = date.getTime();
      return time === time; // eslint-disable-line
    };
    });

    unwrapExports(validator);
    var validator_1 = validator.validateTime;
    var validator_2 = validator.validateDate;
    var validator_3 = validator.validateDateTime;
    var validator_4 = validator.validateUnixTimestamp;
    var validator_5 = validator.validateJSDate;

    var utils = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    Object.defineProperty(exports, 'serializeTime', {
      enumerable: true,
      get: function get() {
        return formatter.serializeTime;
      }
    });
    Object.defineProperty(exports, 'serializeTimeString', {
      enumerable: true,
      get: function get() {
        return formatter.serializeTimeString;
      }
    });
    Object.defineProperty(exports, 'serializeDate', {
      enumerable: true,
      get: function get() {
        return formatter.serializeDate;
      }
    });
    Object.defineProperty(exports, 'serializeDateTime', {
      enumerable: true,
      get: function get() {
        return formatter.serializeDateTime;
      }
    });
    Object.defineProperty(exports, 'serializeDateTimeString', {
      enumerable: true,
      get: function get() {
        return formatter.serializeDateTimeString;
      }
    });
    Object.defineProperty(exports, 'serializeUnixTimestamp', {
      enumerable: true,
      get: function get() {
        return formatter.serializeUnixTimestamp;
      }
    });
    Object.defineProperty(exports, 'parseTime', {
      enumerable: true,
      get: function get() {
        return formatter.parseTime;
      }
    });
    Object.defineProperty(exports, 'parseDate', {
      enumerable: true,
      get: function get() {
        return formatter.parseDate;
      }
    });
    Object.defineProperty(exports, 'parseDateTime', {
      enumerable: true,
      get: function get() {
        return formatter.parseDateTime;
      }
    });



    Object.defineProperty(exports, 'validateTime', {
      enumerable: true,
      get: function get() {
        return validator.validateTime;
      }
    });
    Object.defineProperty(exports, 'validateDate', {
      enumerable: true,
      get: function get() {
        return validator.validateDate;
      }
    });
    Object.defineProperty(exports, 'validateDateTime', {
      enumerable: true,
      get: function get() {
        return validator.validateDateTime;
      }
    });
    Object.defineProperty(exports, 'validateUnixTimestamp', {
      enumerable: true,
      get: function get() {
        return validator.validateUnixTimestamp;
      }
    });
    Object.defineProperty(exports, 'validateJSDate', {
      enumerable: true,
      get: function get() {
        return validator.validateJSDate;
      }
    });
    });

    unwrapExports(utils);

    var date = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });





    /**
     * An RFC 3339 compliant date scalar.
     *
     * Input:
     *    This scalar takes an RFC 3339 date string as input and
     *    parses it to a javascript Date.
     *
     * Output:
     *    This scalar serializes javascript Dates and
     *    RFC 3339 date strings to RFC 3339 date strings.
     */

    /**
     * Copyright (c) 2017, Dirk-Jan Rutten
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    var config = {
      name: 'Date',
      description: 'A date string, such as 2007-12-03, compliant with the `full-date` ' + 'format outlined in section 5.6 of the RFC 3339 profile of the ' + 'ISO 8601 standard for representation of dates and times using ' + 'the Gregorian calendar.',
      serialize: function serialize(value) {
        if (value instanceof Date) {
          if ((0, utils.validateJSDate)(value)) {
            return (0, utils.serializeDate)(value);
          }
          throw new TypeError('Date cannot represent an invalid Date instance');
        } else if (typeof value === 'string' || value instanceof String) {
          if ((0, utils.validateDate)(value)) {
            return value;
          }
          throw new TypeError('Date cannot represent an invalid date-string ' + value + '.');
        } else {
          throw new TypeError('Date cannot represent a non string, or non Date type ' + JSON.stringify(value));
        }
      },
      parseValue: function parseValue(value) {
        if (!(typeof value === 'string' || value instanceof String)) {
          throw new TypeError('Date cannot represent non string type ' + JSON.stringify(value));
        }

        if ((0, utils.validateDate)(value)) {
          return (0, utils.parseDate)(value);
        }
        throw new TypeError('Date cannot represent an invalid date-string ' + value + '.');
      },
      parseLiteral: function parseLiteral(ast) {
        if (ast.kind !== _graphql.Kind.STRING) {
          throw new TypeError('Date cannot represent non string type ' + String(ast.value != null ? ast.value : null));
        }
        var value = ast.value;

        if ((0, utils.validateDate)(value)) {
          return (0, utils.parseDate)(value);
        }
        throw new TypeError('Date cannot represent an invalid date-string ' + String(value) + '.');
      }
    }; // eslint-disable-line
    exports.default = new _graphql.GraphQLScalarType(config);
    });

    unwrapExports(date);

    var time = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });





    /**
     * An RFC 3339 compliant time scalar.
     *
     * Input:
     *    This scalar takes an RFC 3339 time string as input and
     *    parses it to a javascript Date (with a year-month-day relative
     *    to the current day).
     *
     * Output:
     *    This scalar serializes javascript Dates and
     *    RFC 3339 time strings to RFC 3339 UTC time strings.
     */

    /**
     * Copyright (c) 2017, Dirk-Jan Rutten
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    var config = {
      name: 'Time',
      description: 'A time string at UTC, such as 10:15:30Z, compliant with ' + 'the `full-time` format outlined in section 5.6 of the RFC 3339' + 'profile of the ISO 8601 standard for representation of dates and ' + 'times using the Gregorian calendar.',
      serialize: function serialize(value) {
        if (value instanceof Date) {
          if ((0, utils.validateJSDate)(value)) {
            return (0, utils.serializeTime)(value);
          }
          throw new TypeError('Time cannot represent an invalid Date instance');
        } else if (typeof value === 'string' || value instanceof String) {
          if ((0, utils.validateTime)(value)) {
            return (0, utils.serializeTimeString)(value);
          }
          throw new TypeError('Time cannot represent an invalid time-string ' + value + '.');
        } else {
          throw new TypeError('Time cannot be serialized from a non string, ' + 'or non Date type ' + JSON.stringify(value));
        }
      },
      parseValue: function parseValue(value) {
        if (!(typeof value === 'string' || value instanceof String)) {
          throw new TypeError('Time cannot represent non string type ' + JSON.stringify(value));
        }

        if ((0, utils.validateTime)(value)) {
          return (0, utils.parseTime)(value);
        }
        throw new TypeError('Time cannot represent an invalid time-string ' + value + '.');
      },
      parseLiteral: function parseLiteral(ast) {
        if (ast.kind !== _graphql.Kind.STRING) {
          throw new TypeError('Time cannot represent non string type ' + String(ast.value != null ? ast.value : null));
        }
        var value = ast.value;
        if ((0, utils.validateTime)(value)) {
          return (0, utils.parseTime)(value);
        }
        throw new TypeError('Time cannot represent an invalid time-string ' + String(value) + '.');
      }
    }; // eslint-disable-line
    exports.default = new _graphql.GraphQLScalarType(config);
    });

    unwrapExports(time);

    var dateTime = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });





    /**
     * An RFC 3339 compliant date-time scalar.
     *
     * Input:
     *    This scalar takes an RFC 3339 date-time string as input and
     *    parses it to a javascript Date.
     *
     * Output:
     *    This scalar serializes javascript Dates,
     *    RFC 3339 date-time strings and unix timestamps
     *    to RFC 3339 UTC date-time strings.
     */

    /**
     * Copyright (c) 2017, Dirk-Jan Rutten
     * All rights reserved.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    var config = {
      name: 'DateTime',
      description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z, ' + 'compliant with the `date-time` format outlined in section 5.6 of ' + 'the RFC 3339 profile of the ISO 8601 standard for representation ' + 'of dates and times using the Gregorian calendar.',
      serialize: function serialize(value) {
        if (value instanceof Date) {
          if ((0, utils.validateJSDate)(value)) {
            return (0, utils.serializeDateTime)(value);
          }
          throw new TypeError('DateTime cannot represent an invalid Date instance');
        } else if (typeof value === 'string' || value instanceof String) {
          if ((0, utils.validateDateTime)(value)) {
            return (0, utils.serializeDateTimeString)(value);
          }
          throw new TypeError('DateTime cannot represent an invalid date-time-string ' + value + '.');
        } else if (typeof value === 'number' || value instanceof Number) {
          if ((0, utils.validateUnixTimestamp)(value)) {
            return (0, utils.serializeUnixTimestamp)(value);
          }
          throw new TypeError('DateTime cannot represent an invalid Unix timestamp ' + value);
        } else {
          throw new TypeError('DateTime cannot be serialized from a non string, ' + 'non numeric or non Date type ' + JSON.stringify(value));
        }
      },
      parseValue: function parseValue(value) {
        if (!(typeof value === 'string' || value instanceof String)) {
          throw new TypeError('DateTime cannot represent non string type ' + JSON.stringify(value));
        }

        if ((0, utils.validateDateTime)(value)) {
          return (0, utils.parseDateTime)(value);
        }
        throw new TypeError('DateTime cannot represent an invalid date-time-string ' + value + '.');
      },
      parseLiteral: function parseLiteral(ast) {
        if (ast.kind !== _graphql.Kind.STRING) {
          throw new TypeError('DateTime cannot represent non string type ' + String(ast.value != null ? ast.value : null));
        }
        var value = ast.value;

        if ((0, utils.validateDateTime)(value)) {
          return (0, utils.parseDateTime)(value);
        }
        throw new TypeError('DateTime cannot represent an invalid date-time-string ' + String(value) + '.');
      }
    }; // eslint-disable-line
    exports.default = new _graphql.GraphQLScalarType(config);
    });

    unwrapExports(dateTime);

    var dist$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    Object.defineProperty(exports, 'GraphQLDate', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(date).default;
      }
    });



    Object.defineProperty(exports, 'GraphQLTime', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(time).default;
      }
    });



    Object.defineProperty(exports, 'GraphQLDateTime', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(dateTime).default;
      }
    });

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    });

    unwrapExports(dist$1);
    var dist_1$1 = dist$1.GraphQLDate;
    var dist_2$1 = dist$1.GraphQLTime;
    var dist_3$1 = dist$1.GraphQLDateTime;

    class GraphQLSchemaBuilder {
        constructor(typeDefs = '') {
            this.addTypeDefsToSchema = (typeDefs) => {
                let newTypeDefs;
                if (!typeDefs && this.typeDefs.indexOf('Query') < 0) {
                    newTypeDefs = this.typeDefs + 'type Query {noop:Int}';
                }
                else {
                    this.typeDefs += typeDefs;
                    newTypeDefs = this.typeDefs;
                }
                this.schema = dist_2({
                    typeDefs: newTypeDefs,
                    resolvers: this.resolveFunctions,
                    schemaDirectives: {
                        display: DisplayDirective,
                        relation: RelationDirective,
                        default: DefaultDirective,
                        unique: UniqueDirective
                    },
                    resolverValidationOptions: {
                        requireResolversForResolveType: false
                    }
                });
                dist_1.visitSchemaDirectives(this.schema, {
                    model: ModelDirective
                });
                return this.schema;
            };
            this.getSchema = () => {
                if (!this.schema) {
                    this.schema = this.addTypeDefsToSchema();
                }
                return this.schema;
            };
            this.addResolvers = (typeName, fieldResolvers) => {
                const resolverMap = {};
                resolverMap[typeName] = {};
                this.resolveFunctions[typeName] = this.resolveFunctions[typeName] ? this.resolveFunctions[typeName] : {};
                fieldResolvers.forEach((resolve, name) => {
                    resolverMap[typeName][name] = resolve;
                    this.resolveFunctions[typeName][name] = resolve; // save in case type defs changed
                });
                dist_3({
                    schema: this.schema,
                    resolvers: resolverMap,
                    resolverValidationOptions: {
                        requireResolversForResolveType: false
                    }
                });
                return this.schema;
            };
            this.typeDefs = `
		scalar JSON
		scalar Date
		scalar Time
		scalar DateTime
		directive @display(
			name: String
		) on FIELD_DEFINITION | ENUM_VALUE | OBJECT

		directive @relation(
			name: String!
		) on FIELD_DEFINITION

		directive @default(
			value: String!
		) on FIELD_DEFINITION

		directive @unique on FIELD_DEFINITION

		directive @model on OBJECT

		interface Node {
			id: ID! @isUnique
		}
		` + typeDefs;
            this.resolveFunctions = {
                JSON: GraphQLJSON,
                Date: dist_1$1,
                Time: dist_2$1,
                DateTime: dist_3$1
            };
        }
    }
    class DisplayDirective extends dist_1 {
        visitFieldDefinition(field) {
            this.setDisplay(field);
        }
        visitEnumValue(value) {
            this.setDisplay(value);
        }
        visitObject(object) {
            this.setDisplay(object);
        }
        setDisplay(field) {
            field.display = {};
            if (this.args.name) {
                field.display.name = this.args.name;
            }
        }
    }
    class RelationDirective extends dist_1 {
        visitFieldDefinition(field) {
            this.setRelation(field);
        }
        setRelation(field) {
            field.relation = {};
            if (this.args.name) {
                field.relation.name = this.args.name;
            }
            let type = field.type;
            while (isListType(type) || isNonNullType(type)) {
                type = type.ofType;
            }
            field.relation.outputType = type.name;
        }
    }
    class DefaultDirective extends dist_1 {
        visitFieldDefinition(field) {
            let type = field.type;
            while (isListType(type) || isNonNullType(type)) {
                type = type.ofType;
            }
            if (!isScalarType(type)) {
                throw new Error('Can not set default on non scalar type which was attempted on ' + field.name);
            }
            if (this.args.value) {
                const currType = type.name;
                let value = this.args.value;
                if (currType === 'Int') {
                    value = Number.parseInt(value);
                }
                else if (currType === 'Float') {
                    value = Number.parseFloat(value);
                }
                else if (currType === 'Boolean') {
                    value = value.toLowerCase();
                    if (value !== 'true' && value !== 'false') {
                        throw new Error('Default on field ' + field.name + ' which is of type Boolean must be "true" or "false"');
                    }
                    value = value === 'true';
                }
                field.defaultValue = value;
            }
        }
    }
    class ModelDirective extends dist_1 {
        visitObject(object) {
            object._interfaces.push(this.schema.getTypeMap().Node);
            lodash_8(this.schema, '_implementations.Node') ? this.schema['_implementations'].Node.push(object) : lodash_7(this.schema, '_implementations.Node', [object]);
        }
    }
    class UniqueDirective extends dist_1 {
        visitFieldDefinition(field) {
            field.unique = true;
        }
    }
    // {
    //   __type(name: "GraphQLInputType") {
    //     name
    //     description
    //     kind
    //     possibleTypes {
    //       name
    //     }
    //     fields {
    //       name
    //       type {
    //         name
    //         kind
    //         ofType {
    //           name
    //           kind
    //           ofType {
    //             name
    //             kind
    //             ofType {
    //               name
    //               kind
    //             }
    //           }
    //         }
    //       }
    //     }
    //     interfaces {
    //       name
    //       possibleTypes {
    //         name
    //       }
    //     }
    //   }
    // }
    // {
    //   allGraphQLDirectives {
    //     id
    //     name
    //     description
    //     args {
    //       id
    //       type {
    //         ... on GraphQLScalarType {
    //           id
    //         }
    //       }
    //     }
    //   }
    // }

    class GenerateUpsert {
        constructor(dataResolver, objectName, types, $config, currInputObjectTypes, currOutputObjectTypeDefs, schemaInfo, schema, $relations) {
            this.dataResolver = dataResolver;
            this.objectName = objectName;
            this.types = types;
            this.config = $config;
            this.currInputObjectTypes = currInputObjectTypes;
            this.currOutputObjectTypeDefs = currOutputObjectTypeDefs;
            this.schema = schema;
            this.schemaInfo = schemaInfo;
            this.relations = $relations;
            this.fields = {};
            this.resolvers = new Map();
            this.generate();
        }
        generate() {
            this.types.forEach(type => {
                const args = {};
                const generator = new InputGenerator(this.schema.getType(type.name), this.config, this.currInputObjectTypes, this.schemaInfo, this.schema, this.relations);
                const updateInputName = `Update${type.name}MutationInput`;
                const updateInput = new GraphQLInputObjectType({
                    name: updateInputName,
                    fields: {
                        data: { type: new GraphQLNonNull(generator.generateUpdateInput()) },
                        where: { type: new GraphQLNonNull(generator.generateWhereUniqueInput()) },
                        clientMutationId: { type: GraphQLString }
                    }
                });
                this.currInputObjectTypes.set(updateInputName, updateInput);
                args['input'] = {
                    type: new GraphQLNonNull(updateInput)
                };
                const outputTypeName = getPayloadTypeName(type.name);
                this.fields[`update${type.name}`] = {
                    type: outputTypeName,
                    args: args
                };
                this.currOutputObjectTypeDefs.add(getPayloadTypeDef(type.name));
                this.resolvers.set(`update${type.name}`, updateResolver(this.dataResolver));
            });
        }
        getResolvers() {
            return new Map([[this.objectName, this.resolvers]]);
        }
        getFieldsOnObject() {
            return new Map([[this.objectName, this.fields]]);
        }
    }

    class GraphQLGenie {
        constructor(options) {
            this.config = {
                generateGetAll: true,
                generateCreate: true,
                generateUpdate: true,
                generateDelete: true,
                generateUpsert: true,
                includeSubscription: true
            };
            this.init = () => __awaiter(this, void 0, void 0, function* () {
                this.generators = [];
                this.schemaInfoBuilder = new SchemaInfoBuilder(this.schema);
                this.schemaInfo = yield this.schemaInfoBuilder.getSchemaInfo();
                this.relations = computeRelations(this.schemaInfo);
                this.graphQLFortune = new FortuneGraph(this.fortuneOptions, this.schemaInfo);
                yield this.buildQueries();
                yield this.buildResolvers();
                window['graphql'] = graphql;
                window['schema'] = this.schema;
                return true;
            });
            this.buildResolvers = () => __awaiter(this, void 0, void 0, function* () {
                lodash_13(this.schemaInfo, (type, name) => {
                    const fieldResolvers = new Map();
                    if (type.kind === 'OBJECT' && name !== 'Query' && name !== 'Mutation' && name !== 'Subscription') {
                        lodash_13(type.fields, (field) => {
                            const graphQLType = this.schema.getType(getReturnType(field.type));
                            let resolver;
                            if (!isScalarType(graphQLType)) {
                                resolver = (root, _args, _context, _info) => __awaiter(this, void 0, void 0, function* () {
                                    const fortuneReturn = root && root.fortuneReturn ? root.fortuneReturn : root;
                                    if (!fortuneReturn) {
                                        return fortuneReturn;
                                    }
                                    const cache = root && root.cache ? root.cache : new Map();
                                    const typeName = getReturnType(field.type);
                                    let result = [];
                                    let returnArray = false;
                                    let fieldValue = fortuneReturn[field.name];
                                    returnArray = lodash_22(fieldValue);
                                    fieldValue = returnArray ? fieldValue : [fieldValue];
                                    const ids = [];
                                    fieldValue.forEach(element => {
                                        if (element) {
                                            if (cache.has(element)) {
                                                result.push({ fortuneReturn: cache.get(element),
                                                    cache: cache,
                                                    __typename: cache.get(element).__typename
                                                });
                                            }
                                            else {
                                                ids.push(element);
                                            }
                                        }
                                    });
                                    if (!lodash_21(ids)) {
                                        let findResult = yield this.graphQLFortune.find(typeName, ids);
                                        if (findResult) {
                                            findResult = lodash_22(findResult) ? findResult : [findResult];
                                            findResult.forEach(result => {
                                                cache.set(result.id, result);
                                            });
                                            findResult = findResult.map((result) => {
                                                return { fortuneReturn: result,
                                                    cache: cache,
                                                    __typename: result.__typename
                                                };
                                            });
                                            result = result.concat(findResult);
                                        }
                                    }
                                    return result.length === 0 ? null : returnArray ? result : result[0];
                                });
                            }
                            else {
                                resolver = (root, _args, _context, _info) => __awaiter(this, void 0, void 0, function* () {
                                    const fortuneReturn = root && root.fortuneReturn ? root.fortuneReturn : root;
                                    const result = yield defaultFieldResolver.apply(this, [fortuneReturn, _args, _context, _info]);
                                    return result;
                                });
                            }
                            fieldResolvers.set(field.name, resolver);
                        });
                        this.schema = this.schemaBuilder.addResolvers(name, fieldResolvers);
                    }
                });
            });
            this.buildQueries = () => __awaiter(this, void 0, void 0, function* () {
                const nodesResult = yield graphql(this.schema, `{
			__type(name: "Node") {
				possibleTypes {
					name
				}
			}
		}`);
                const nodeNames = nodesResult.data.__type.possibleTypes;
                const nodeTypes = [];
                nodeNames.forEach(result => {
                    nodeTypes.push(this.schemaInfo[result.name]);
                });
                const currInputObjectTypes = new Map();
                const currOutputObjectTypeDefs = new Set();
                if (this.config.generateGetAll) {
                    this.generators.push(new GenerateGetAll(this.graphQLFortune, 'Query', nodeTypes, this.schema));
                }
                if (this.config.generateCreate) {
                    this.generators.push(new GenerateCreate(this.graphQLFortune, 'Mutation', nodeTypes, this.config, currInputObjectTypes, currOutputObjectTypeDefs, this.schemaInfo, this.schema, this.relations));
                }
                if (this.config.generateUpdate) {
                    this.generators.push(new GenerateUpdate(this.graphQLFortune, 'Mutation', nodeTypes, this.config, currInputObjectTypes, currOutputObjectTypeDefs, this.schemaInfo, this.schema, this.relations));
                }
                if (this.config.generateUpsert) {
                    this.generators.push(new GenerateUpsert(this.graphQLFortune, 'Mutation', nodeTypes, this.config, currInputObjectTypes, currOutputObjectTypeDefs, this.schemaInfo, this.schema, this.relations));
                }
                if (this.config.generateDelete) {
                    this.generators.push(new GenerateDelete(this.graphQLFortune, 'Mutation', nodeTypes, this.config));
                }
                let newTypes = '';
                console.log(currInputObjectTypes);
                currInputObjectTypes.forEach(inputObjectType => {
                    // console.log(printType(inputObjectType));
                    newTypes += printType(inputObjectType) + '\n';
                });
                console.log(newTypes);
                currOutputObjectTypeDefs.forEach(newType => {
                    newTypes += newType + '\n';
                });
                const fieldsOnObject = new Map();
                const resolvers = new Map();
                // merge maps and compute new input types
                this.generators.forEach(generator => {
                    generator.getFieldsOnObject().forEach((fields, objectName) => {
                        fieldsOnObject.set(objectName, lodash_15({}, fieldsOnObject.get(objectName), fields));
                    });
                    const generatorResolvers = generator.getResolvers();
                    generatorResolvers.forEach((resolver, name) => {
                        if (!resolvers.has(name)) {
                            resolvers.set(name, new Map());
                        }
                        resolvers.set(name, new Map([...resolvers.get(name), ...resolver]));
                    });
                });
                fieldsOnObject.forEach((fields, objName) => {
                    newTypes += printType(new GraphQLObjectType({ name: objName, fields: fields })) + '\n';
                });
                console.log(newTypes);
                this.schema = this.schemaBuilder.addTypeDefsToSchema(newTypes);
                resolvers.forEach((resolverMap, name) => {
                    this.schemaBuilder.addResolvers(name, resolverMap);
                });
                this.schema = this.schemaBuilder.getSchema();
            });
            this.getSchema = () => __awaiter(this, void 0, void 0, function* () {
                yield this.initialized;
                return this.schema;
            });
            this.getFragmentTypes = () => __awaiter(this, void 0, void 0, function* () {
                yield this.initialized;
                const result = yield graphql(this.schema, `{
			__schema {
				types {
					kind
					name
					possibleTypes {
						name
					}
				}
			}
		}`);
                // here we're filtering out any type information unrelated to unions or interfaces
                const types = lodash_17(result, 'data.__schema.types');
                if (types) {
                    const filteredData = result.data.__schema.types.filter(type => type.possibleTypes !== null);
                    result.data.__schema.types = filteredData;
                }
                return result.data;
            });
            if (!options.fortuneOptions) {
                throw new Error('Fortune Options is required');
            }
            else {
                this.fortuneOptions = options.fortuneOptions;
            }
            if (options.schemaBuilder) {
                this.schemaBuilder = options.schemaBuilder;
            }
            else if (options.typeDefs) {
                this.schemaBuilder = new GraphQLSchemaBuilder(options.typeDefs);
            }
            else {
                throw new Error('Need a schemaBuilder or typeDefs');
            }
            if (options.generatorOptions) {
                this.config = Object.assign(this.config, options.generatorOptions);
            }
            this.schema = this.schemaBuilder.getSchema();
            this.initialized = this.init();
        }
    }
    // cache.writeData({ data });
    // cache.writeData({
    // 	id: 'ROOT_QUERY.objects.1',
    // 	data: {
    // 		field: 'hi'
    // 	}
    // });
    // window['gql'] = gql;
    // window['cache'] = cache;
    // console.info(cache.readQuery({
    // 	query: gql`
    //   query {
    //     objects {
    //       name
    //     }
    //   }
    // `}));
    // mutation {
    //   createGraphQLField(name: "test new field", type:{list:true, type:""}) {
    //     id
    //     name
    //     description
    //   }
    // }
    // {
    //   allGraphQLDirectives {
    //     id
    //     name
    //     description
    //     args {
    //       id
    //       type {
    //         ... on GraphQLScalarType {
    //           id
    //         }
    //       }
    //     }
    //   }
    // }

    /**
     * The current status of a query’s execution in our system.
     */
    var NetworkStatus;
    (function (NetworkStatus) {
        /**
         * The query has never been run before and the query is now currently running. A query will still
         * have this network status even if a partial data result was returned from the cache, but a
         * query was dispatched anyway.
         */
        NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
        /**
         * If `setVariables` was called and a query was fired because of that then the network status
         * will be `setVariables` until the result of that query comes back.
         */
        NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
        /**
         * Indicates that `fetchMore` was called on this query and that the query created is currently in
         * flight.
         */
        NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
        /**
         * Similar to the `setVariables` network status. It means that `refetch` was called on a query
         * and the refetch request is currently in flight.
         */
        NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
        /**
         * Indicates that a polling query is currently in flight. So for example if you are polling a
         * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever
         * a poll request has been sent but not resolved.
         */
        NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
        /**
         * No request is in flight for this query, and no errors happened. Everything is OK.
         */
        NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
        /**
         * No request is in flight for this query, but one or more errors were detected.
         */
        NetworkStatus[NetworkStatus["error"] = 8] = "error";
    })(NetworkStatus || (NetworkStatus = {}));
    /**
     * Returns true if there is currently a network request in flight according to a given network
     * status.
     */
    function isNetworkRequestInFlight(networkStatus) {
        return networkStatus < 7;
    }
    //# sourceMappingURL=networkStatus.js.map

    function symbolObservablePonyfill(root) {
    	var result;
    	var Symbol = root.Symbol;

    	if (typeof Symbol === 'function') {
    		if (Symbol.observable) {
    			result = Symbol.observable;
    		} else {
    			result = Symbol('observable');
    			Symbol.observable = result;
    		}
    	} else {
    		result = '@@observable';
    	}

    	return result;
    }

    var root;

    if (typeof self !== 'undefined') {
      root = self;
    } else if (typeof window !== 'undefined') {
      root = window;
    } else if (typeof global$1 !== 'undefined') {
      root = global$1;
    } else if (typeof module !== 'undefined') {
      root = module;
    } else {
      root = Function('return this')();
    }

    var result = symbolObservablePonyfill(root);

    var __extends$2 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    // rxjs interopt
    var Observable$1 = (function (_super) {
        __extends$2(Observable$$1, _super);
        function Observable$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Observable$$1.prototype[result] = function () {
            return this;
        };
        return Observable$$1;
    }(Observable));
    //# sourceMappingURL=Observable.js.map

    var __extends$3 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    function isApolloError(err) {
        return err.hasOwnProperty('graphQLErrors');
    }
    // Sets the error message on this error according to the
    // the GraphQL and network errors that are present.
    // If the error message has already been set through the
    // constructor or otherwise, this function is a nop.
    var generateErrorMessage = function (err) {
        var message = '';
        // If we have GraphQL errors present, add that to the error message.
        if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {
            err.graphQLErrors.forEach(function (graphQLError) {
                var errorMessage = graphQLError
                    ? graphQLError.message
                    : 'Error message not found.';
                message += "GraphQL error: " + errorMessage + "\n";
            });
        }
        if (err.networkError) {
            message += 'Network error: ' + err.networkError.message + '\n';
        }
        // strip newline from the end of the message
        message = message.replace(/\n$/, '');
        return message;
    };
    var ApolloError = (function (_super) {
        __extends$3(ApolloError, _super);
        // Constructs an instance of ApolloError given a GraphQLError
        // or a network error. Note that one of these has to be a valid
        // value or the constructed error will be meaningless.
        function ApolloError(_a) {
            var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;
            var _this = _super.call(this, errorMessage) || this;
            _this.graphQLErrors = graphQLErrors || [];
            _this.networkError = networkError || null;
            if (!errorMessage) {
                _this.message = generateErrorMessage(_this);
            }
            else {
                _this.message = errorMessage;
            }
            _this.extraInfo = extraInfo;
            Object.setPrototypeOf(_this, ApolloError.prototype);
            return _this;
        }
        return ApolloError;
    }(Error));
    //# sourceMappingURL=ApolloError.js.map

    var FetchType;
    (function (FetchType) {
        FetchType[FetchType["normal"] = 1] = "normal";
        FetchType[FetchType["refetch"] = 2] = "refetch";
        FetchType[FetchType["poll"] = 3] = "poll";
    })(FetchType || (FetchType = {}));
    //# sourceMappingURL=types.js.map

    var __extends$4 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$4 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var hasError = function (storeValue, policy) {
        if (policy === void 0) { policy = 'none'; }
        return storeValue &&
            ((storeValue.graphQLErrors &&
                storeValue.graphQLErrors.length > 0 &&
                policy === 'none') ||
                storeValue.networkError);
    };
    var ObservableQuery = (function (_super) {
        __extends$4(ObservableQuery, _super);
        function ObservableQuery(_a) {
            var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;
            var _this = _super.call(this, function (observer) {
                return _this.onSubscribe(observer);
            }) || this;
            // active state
            _this.isCurrentlyPolling = false;
            _this.isTornDown = false;
            // query information
            _this.options = options;
            _this.variables = options.variables || {};
            _this.queryId = scheduler.queryManager.generateQueryId();
            _this.shouldSubscribe = shouldSubscribe;
            // related classes
            _this.scheduler = scheduler;
            _this.queryManager = scheduler.queryManager;
            // interal data stores
            _this.observers = [];
            _this.subscriptionHandles = [];
            return _this;
        }
        ObservableQuery.prototype.result = function () {
            var that = this;
            return new Promise(function (resolve, reject) {
                var subscription;
                var observer = {
                    next: function (result) {
                        resolve(result);
                        // Stop the query within the QueryManager if we can before
                        // this function returns.
                        //
                        // We do this in order to prevent observers piling up within
                        // the QueryManager. Notice that we only fully unsubscribe
                        // from the subscription in a setTimeout(..., 0)  call. This call can
                        // actually be handled by the browser at a much later time. If queries
                        // are fired in the meantime, observers that should have been removed
                        // from the QueryManager will continue to fire, causing an unnecessary
                        // performance hit.
                        if (!that.observers.some(function (obs) { return obs !== observer; })) {
                            that.queryManager.removeQuery(that.queryId);
                        }
                        setTimeout(function () {
                            subscription.unsubscribe();
                        }, 0);
                    },
                    error: function (error) {
                        reject(error);
                    },
                };
                subscription = that.subscribe(observer);
            });
        };
        /**
         * Return the result of the query from the local cache as well as some fetching status
         * `loading` and `networkStatus` allow to know if a request is in flight
         * `partial` lets you know if the result from the local cache is complete or partial
         * @return {result: Object, loading: boolean, networkStatus: number, partial: boolean}
         */
        ObservableQuery.prototype.currentResult = function () {
            if (this.isTornDown) {
                return {
                    data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},
                    error: this.lastError,
                    loading: false,
                    networkStatus: NetworkStatus.error,
                };
            }
            var queryStoreValue = this.queryManager.queryStore.get(this.queryId);
            if (hasError(queryStoreValue, this.options.errorPolicy)) {
                return {
                    data: {},
                    loading: false,
                    networkStatus: queryStoreValue.networkStatus,
                    error: new ApolloError({
                        graphQLErrors: queryStoreValue.graphQLErrors,
                        networkError: queryStoreValue.networkError,
                    }),
                };
            }
            var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;
            var queryLoading = !queryStoreValue ||
                queryStoreValue.networkStatus === NetworkStatus.loading;
            // We need to be careful about the loading state we show to the user, to try
            // and be vaguely in line with what the user would have seen from .subscribe()
            // but to still provide useful information synchronously when the query
            // will not end up hitting the server.
            // See more: https://github.com/apollostack/apollo-client/issues/707
            // Basically: is there a query in flight right now (modolo the next tick)?
            var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||
                (partial && this.options.fetchPolicy !== 'cache-only');
            // if there is nothing in the query store, it means this query hasn't fired yet or it has been cleaned up. Therefore the
            // network status is dependent on queryLoading.
            var networkStatus;
            if (queryStoreValue) {
                networkStatus = queryStoreValue.networkStatus;
            }
            else {
                networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;
            }
            var result = {
                data: data,
                loading: isNetworkRequestInFlight(networkStatus),
                networkStatus: networkStatus,
            };
            if (queryStoreValue &&
                queryStoreValue.graphQLErrors &&
                this.options.errorPolicy === 'all') {
                result.errors = queryStoreValue.graphQLErrors;
            }
            if (!partial) {
                var stale = false;
                this.lastResult = __assign$4({}, result, { stale: stale });
            }
            return __assign$4({}, result, { partial: partial });
        };
        // Returns the last result that observer.next was called with. This is not the same as
        // currentResult! If you're not sure which you need, then you probably need currentResult.
        ObservableQuery.prototype.getLastResult = function () {
            return this.lastResult;
        };
        ObservableQuery.prototype.getLastError = function () {
            return this.lastError;
        };
        ObservableQuery.prototype.resetLastResults = function () {
            delete this.lastResult;
            delete this.lastError;
            this.isTornDown = false;
        };
        ObservableQuery.prototype.refetch = function (variables) {
            var fetchPolicy = this.options.fetchPolicy;
            // early return if trying to read from cache during refetch
            if (fetchPolicy === 'cache-only') {
                return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));
            }
            if (!isEqual(this.variables, variables)) {
                // update observable variables
                this.variables = __assign$4({}, this.variables, variables);
            }
            if (!isEqual(this.options.variables, this.variables)) {
                // Update the existing options with new variables
                this.options.variables = __assign$4({}, this.options.variables, this.variables);
            }
            // Override fetchPolicy for this call only
            // only network-only and no-cache are safe to use
            var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';
            var combinedOptions = __assign$4({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });
            return this.queryManager
                .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)
                .then(function (result) { return maybeDeepFreeze(result); });
        };
        ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
            var _this = this;
            // early return if no update Query
            if (!fetchMoreOptions.updateQuery) {
                throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');
            }
            return Promise.resolve()
                .then(function () {
                var qid = _this.queryManager.generateQueryId();
                var combinedOptions;
                if (fetchMoreOptions.query) {
                    // fetch a new query
                    combinedOptions = fetchMoreOptions;
                }
                else {
                    // fetch the same query with a possibly new variables
                    combinedOptions = __assign$4({}, _this.options, fetchMoreOptions, { variables: __assign$4({}, _this.variables, fetchMoreOptions.variables) });
                }
                combinedOptions.fetchPolicy = 'network-only';
                return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);
            })
                .then(function (fetchMoreResult) {
                _this.updateQuery(function (previousResult, _a) {
                    var variables = _a.variables;
                    return fetchMoreOptions.updateQuery(previousResult, {
                        fetchMoreResult: fetchMoreResult.data,
                        variables: variables,
                    });
                });
                return fetchMoreResult;
            });
        };
        // XXX the subscription variables are separate from the query variables.
        // if you want to update subscription variables, right now you have to do that separately,
        // and you can only do it by stopping the subscription and then subscribing again with new variables.
        ObservableQuery.prototype.subscribeToMore = function (options) {
            var _this = this;
            var subscription = this.queryManager
                .startGraphQLSubscription({
                query: options.document,
                variables: options.variables,
            })
                .subscribe({
                next: function (data) {
                    if (options.updateQuery) {
                        _this.updateQuery(function (previous, _a) {
                            var variables = _a.variables;
                            return options.updateQuery(previous, {
                                subscriptionData: data,
                                variables: variables,
                            });
                        });
                    }
                },
                error: function (err) {
                    if (options.onError) {
                        options.onError(err);
                        return;
                    }
                    console.error('Unhandled GraphQL subscription error', err);
                },
            });
            this.subscriptionHandles.push(subscription);
            return function () {
                var i = _this.subscriptionHandles.indexOf(subscription);
                if (i >= 0) {
                    _this.subscriptionHandles.splice(i, 1);
                    subscription.unsubscribe();
                }
            };
        };
        // Note: if the query is not active (there are no subscribers), the promise
        // will return null immediately.
        ObservableQuery.prototype.setOptions = function (opts) {
            var oldOptions = this.options;
            this.options = __assign$4({}, this.options, opts);
            if (opts.pollInterval) {
                this.startPolling(opts.pollInterval);
            }
            else if (opts.pollInterval === 0) {
                this.stopPolling();
            }
            // If fetchPolicy went from cache-only to something else, or from something else to network-only
            var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&
                opts.fetchPolicy === 'network-only') ||
                (oldOptions.fetchPolicy === 'cache-only' &&
                    opts.fetchPolicy !== 'cache-only') ||
                (oldOptions.fetchPolicy === 'standby' &&
                    opts.fetchPolicy !== 'standby') ||
                false;
            return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);
        };
        /**
         * Update the variables of this observable query, and fetch the new results
         * if they've changed. If you want to force new results, use `refetch`.
         *
         * Note: if the variables have not changed, the promise will return the old
         * results immediately, and the `next` callback will *not* fire.
         *
         * Note: if the query is not active (there are no subscribers), the promise
         * will return null immediately.
         *
         * @param variables: The new set of variables. If there are missing variables,
         * the previous values of those variables will be used.
         *
         * @param tryFetch: Try and fetch new results even if the variables haven't
         * changed (we may still just hit the store, but if there's nothing in there
         * this will refetch)
         *
         * @param fetchResults: Option to ignore fetching results when updating variables
         *
         */
        ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {
            if (tryFetch === void 0) { tryFetch = false; }
            if (fetchResults === void 0) { fetchResults = true; }
            // since setVariables restarts the subscription, we reset the tornDown status
            this.isTornDown = false;
            var newVariables = variables;
            if (isEqual(newVariables, this.variables) && !tryFetch) {
                // If we have no observers, then we don't actually want to make a network
                // request. As soon as someone observes the query, the request will kick
                // off. For now, we just store any changes. (See #1077)
                if (this.observers.length === 0 || !fetchResults) {
                    return new Promise(function (resolve) { return resolve(); });
                }
                return this.result();
            }
            else {
                this.lastVariables = this.variables;
                this.variables = newVariables;
                this.options.variables = newVariables;
                // See comment above
                if (this.observers.length === 0) {
                    return new Promise(function (resolve) { return resolve(); });
                }
                // Use the same options as before, but with new variables
                return this.queryManager
                    .fetchQuery(this.queryId, __assign$4({}, this.options, { variables: this.variables }))
                    .then(function (result) { return maybeDeepFreeze(result); });
            }
        };
        ObservableQuery.prototype.updateQuery = function (mapFn) {
            var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;
            var newResult = tryFunctionOrLogError(function () {
                return mapFn(previousResult, { variables: variables });
            });
            if (newResult) {
                this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);
                this.queryManager.broadcastQueries();
            }
        };
        ObservableQuery.prototype.stopPolling = function () {
            if (this.isCurrentlyPolling) {
                this.scheduler.stopPollingQuery(this.queryId);
                this.options.pollInterval = undefined;
                this.isCurrentlyPolling = false;
            }
        };
        ObservableQuery.prototype.startPolling = function (pollInterval) {
            if (this.options.fetchPolicy === 'cache-first' ||
                this.options.fetchPolicy === 'cache-only') {
                throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');
            }
            if (this.isCurrentlyPolling) {
                this.scheduler.stopPollingQuery(this.queryId);
                this.isCurrentlyPolling = false;
            }
            this.options.pollInterval = pollInterval;
            this.isCurrentlyPolling = true;
            this.scheduler.startPollingQuery(this.options, this.queryId);
        };
        ObservableQuery.prototype.onSubscribe = function (observer) {
            var _this = this;
            // Zen Observable has its own error function, in order to log correctly
            // we need to declare a custom error if nothing is passed
            if (observer._subscription &&
                observer._subscription._observer &&
                !observer._subscription._observer.error) {
                observer._subscription._observer.error = function (error) {
                    console.error('Unhandled error', error.message, error.stack);
                };
            }
            this.observers.push(observer);
            // Deliver initial result
            if (observer.next && this.lastResult)
                observer.next(this.lastResult);
            if (observer.error && this.lastError)
                observer.error(this.lastError);
            // setup the query if it hasn't been done before
            if (this.observers.length === 1)
                this.setUpQuery();
            return function () {
                _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });
                if (_this.observers.length === 0) {
                    _this.tearDownQuery();
                }
            };
        };
        ObservableQuery.prototype.setUpQuery = function () {
            var _this = this;
            if (this.shouldSubscribe) {
                this.queryManager.addObservableQuery(this.queryId, this);
            }
            if (!!this.options.pollInterval) {
                if (this.options.fetchPolicy === 'cache-first' ||
                    this.options.fetchPolicy === 'cache-only') {
                    throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');
                }
                this.isCurrentlyPolling = true;
                this.scheduler.startPollingQuery(this.options, this.queryId);
            }
            var observer = {
                next: function (result) {
                    _this.lastResult = result;
                    _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });
                },
                error: function (error) {
                    _this.lastError = error;
                    _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });
                },
            };
            this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));
        };
        ObservableQuery.prototype.tearDownQuery = function () {
            this.isTornDown = true;
            if (this.isCurrentlyPolling) {
                this.scheduler.stopPollingQuery(this.queryId);
                this.isCurrentlyPolling = false;
            }
            // stop all active GraphQL subscriptions
            this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });
            this.subscriptionHandles = [];
            this.queryManager.removeObservableQuery(this.queryId);
            this.queryManager.stopQuery(this.queryId);
            this.observers = [];
        };
        return ObservableQuery;
    }(Observable$1));
    //# sourceMappingURL=ObservableQuery.js.map

    var __extends$5 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var DedupLink = (function (_super) {
        __extends$5(DedupLink, _super);
        function DedupLink() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.inFlightRequestObservables = new Map();
            _this.subscribers = new Map();
            return _this;
        }
        DedupLink.prototype.request = function (operation, forward) {
            var _this = this;
            if (operation.getContext().forceFetch) {
                return forward(operation);
            }
            var key = operation.toKey();
            var cleanup = function (key) {
                _this.inFlightRequestObservables.delete(key);
                var prev = _this.subscribers.get(key);
                return prev;
            };
            if (!this.inFlightRequestObservables.get(key)) {
                var singleObserver_1 = forward(operation);
                var subscription_1;
                var sharedObserver = new Observable(function (observer) {
                    var prev = _this.subscribers.get(key);
                    if (!prev)
                        prev = { next: [], error: [], complete: [] };
                    _this.subscribers.set(key, {
                        next: prev.next.concat([observer.next.bind(observer)]),
                        error: prev.error.concat([observer.error.bind(observer)]),
                        complete: prev.complete.concat([observer.complete.bind(observer)]),
                    });
                    if (!subscription_1) {
                        subscription_1 = singleObserver_1.subscribe({
                            next: function (result) {
                                var prev = cleanup(key);
                                _this.subscribers.delete(key);
                                if (prev) {
                                    prev.next.forEach(function (next) { return next(result); });
                                    prev.complete.forEach(function (complete) { return complete(); });
                                }
                            },
                            error: function (error) {
                                var prev = cleanup(key);
                                _this.subscribers.delete(key);
                                if (prev)
                                    prev.error.forEach(function (err) { return err(error); });
                            },
                        });
                    }
                    return function () {
                        if (subscription_1)
                            subscription_1.unsubscribe();
                        _this.inFlightRequestObservables.delete(key);
                    };
                });
                this.inFlightRequestObservables.set(key, sharedObserver);
            }
            return this.inFlightRequestObservables.get(key);
        };
        return DedupLink;
    }(ApolloLink));
    //# sourceMappingURL=dedupLink.js.map

    //# sourceMappingURL=index.js.map

    // The QueryScheduler is supposed to be a mechanism that schedules polling queries such that
    // they are clustered into the time slots of the QueryBatcher and are batched together. It
    // also makes sure that for a given polling query, if one instance of the query is inflight,
    // another instance will not be fired until the query returns or times out. We do this because
    // another query fires while one is already in flight, the data will stay in the "loading" state
    // even after the first query has returned.
    var __assign$5 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var QueryScheduler = (function () {
        function QueryScheduler(_a) {
            var queryManager = _a.queryManager, ssrMode = _a.ssrMode;
            // Map going from queryIds to query options that are in flight.
            this.inFlightQueries = {};
            // Map going from query ids to the query options associated with those queries. Contains all of
            // the queries, both in flight and not in flight.
            this.registeredQueries = {};
            // Map going from polling interval with to the query ids that fire on that interval.
            // These query ids are associated with a set of options in the this.registeredQueries.
            this.intervalQueries = {};
            // Map going from polling interval widths to polling timers.
            this.pollingTimers = {};
            this.ssrMode = false;
            this.queryManager = queryManager;
            this.ssrMode = ssrMode || false;
        }
        QueryScheduler.prototype.checkInFlight = function (queryId) {
            var query = this.queryManager.queryStore.get(queryId);
            return (query &&
                query.networkStatus !== NetworkStatus.ready &&
                query.networkStatus !== NetworkStatus.error);
        };
        QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.queryManager
                    .fetchQuery(queryId, options, fetchType)
                    .then(function (result) {
                    resolve(result);
                })
                    .catch(function (error) {
                    reject(error);
                });
            });
        };
        QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {
            if (!options.pollInterval) {
                throw new Error('Attempted to start a polling query without a polling interval.');
            }
            // Do not poll in SSR mode
            if (this.ssrMode)
                return queryId;
            this.registeredQueries[queryId] = options;
            if (listener) {
                this.queryManager.addQueryListener(queryId, listener);
            }
            this.addQueryOnInterval(queryId, options);
            return queryId;
        };
        QueryScheduler.prototype.stopPollingQuery = function (queryId) {
            // Remove the query options from one of the registered queries.
            // The polling function will then take care of not firing it anymore.
            delete this.registeredQueries[queryId];
        };
        // Fires the all of the queries on a particular interval. Called on a setInterval.
        QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {
            var _this = this;
            // XXX this "filter" here is nasty, because it does two things at the same time.
            // 1. remove queries that have stopped polling
            // 2. call fetchQueries for queries that are polling and not in flight.
            // TODO: refactor this to make it cleaner
            this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {
                // If queryOptions can't be found from registeredQueries or if it has a
                // different interval, it means that this queryId is no longer registered
                // and should be removed from the list of queries firing on this interval.
                //
                // We don't remove queries from intervalQueries immediately in
                // stopPollingQuery so that we can keep the timer consistent when queries
                // are removed and replaced, and to avoid quadratic behavior when stopping
                // many queries.
                if (!(_this.registeredQueries.hasOwnProperty(queryId) &&
                    _this.registeredQueries[queryId].pollInterval === interval)) {
                    return false;
                }
                // Don't fire this instance of the polling query is one of the instances is already in
                // flight.
                if (_this.checkInFlight(queryId)) {
                    return true;
                }
                var queryOptions = _this.registeredQueries[queryId];
                var pollingOptions = __assign$5({}, queryOptions);
                pollingOptions.fetchPolicy = 'network-only';
                // don't let unhandled rejections happen
                _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () { });
                return true;
            });
            if (this.intervalQueries[interval].length === 0) {
                clearInterval(this.pollingTimers[interval]);
                delete this.intervalQueries[interval];
            }
        };
        // Adds a query on a particular interval to this.intervalQueries and then fires
        // that query with all the other queries executing on that interval. Note that the query id
        // and query options must have been added to this.registeredQueries before this function is called.
        QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {
            var _this = this;
            var interval = queryOptions.pollInterval;
            if (!interval) {
                throw new Error("A poll interval is required to start polling query with id '" + queryId + "'.");
            }
            // If there are other queries on this interval, this query will just fire with those
            // and we don't need to create a new timer.
            if (this.intervalQueries.hasOwnProperty(interval.toString()) &&
                this.intervalQueries[interval].length > 0) {
                this.intervalQueries[interval].push(queryId);
            }
            else {
                this.intervalQueries[interval] = [queryId];
                // set up the timer for the function that will handle this interval
                this.pollingTimers[interval] = setInterval(function () {
                    _this.fetchQueriesOnInterval(interval);
                }, interval);
            }
        };
        // Used only for unit testing.
        QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {
            if (!queryOptions.pollInterval) {
                throw new Error('Attempted to register a non-polling query with the scheduler.');
            }
            return new ObservableQuery({
                scheduler: this,
                options: queryOptions,
            });
        };
        return QueryScheduler;
    }());
    //# sourceMappingURL=scheduler.js.map

    var MutationStore = (function () {
        function MutationStore() {
            this.store = {};
        }
        MutationStore.prototype.getStore = function () {
            return this.store;
        };
        MutationStore.prototype.get = function (mutationId) {
            return this.store[mutationId];
        };
        MutationStore.prototype.initMutation = function (mutationId, mutationString, variables) {
            this.store[mutationId] = {
                mutationString: mutationString,
                variables: variables || {},
                loading: true,
                error: null,
            };
        };
        MutationStore.prototype.markMutationError = function (mutationId, error) {
            var mutation = this.store[mutationId];
            if (!mutation) {
                return;
            }
            mutation.loading = false;
            mutation.error = error;
        };
        MutationStore.prototype.markMutationResult = function (mutationId) {
            var mutation = this.store[mutationId];
            if (!mutation) {
                return;
            }
            mutation.loading = false;
            mutation.error = null;
        };
        MutationStore.prototype.reset = function () {
            this.store = {};
        };
        return MutationStore;
    }());
    //# sourceMappingURL=mutations.js.map

    var __assign$6 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var QueryStore = (function () {
        function QueryStore() {
            this.store = {};
        }
        QueryStore.prototype.getStore = function () {
            return this.store;
        };
        QueryStore.prototype.get = function (queryId) {
            return this.store[queryId];
        };
        QueryStore.prototype.initQuery = function (query) {
            var previousQuery = this.store[query.queryId];
            if (previousQuery && previousQuery.queryString !== query.queryString) {
                // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.
                // we should implement a separate action for refetching so that QUERY_INIT may never overwrite
                // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)
                throw new Error('Internal Error: may not update existing query string in store');
            }
            var isSetVariables = false;
            var previousVariables = null;
            if (query.storePreviousVariables &&
                previousQuery &&
                previousQuery.networkStatus !== NetworkStatus.loading) {
                if (!isEqual(previousQuery.variables, query.variables)) {
                    isSetVariables = true;
                    previousVariables = previousQuery.variables;
                }
            }
            // TODO break this out into a separate function
            var networkStatus;
            if (isSetVariables) {
                networkStatus = NetworkStatus.setVariables;
            }
            else if (query.isPoll) {
                networkStatus = NetworkStatus.poll;
            }
            else if (query.isRefetch) {
                networkStatus = NetworkStatus.refetch;
                // TODO: can we determine setVariables here if it's a refetch and the variables have changed?
            }
            else {
                networkStatus = NetworkStatus.loading;
            }
            var graphQLErrors = [];
            if (previousQuery && previousQuery.graphQLErrors) {
                graphQLErrors = previousQuery.graphQLErrors;
            }
            // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite
            // the store. We probably want a refetch action instead, because I suspect that if you refetch
            // before the initial fetch is done, you'll get an error.
            this.store[query.queryId] = {
                queryString: query.queryString,
                document: query.document,
                variables: query.variables,
                previousVariables: previousVariables,
                networkError: null,
                graphQLErrors: graphQLErrors,
                networkStatus: networkStatus,
                metadata: query.metadata,
            };
            // If the action had a `moreForQueryId` property then we need to set the
            // network status on that query as well to `fetchMore`.
            //
            // We have a complement to this if statement in the query result and query
            // error action branch, but importantly *not* in the client result branch.
            // This is because the implementation of `fetchMore` *always* sets
            // `fetchPolicy` to `network-only` so we would never have a client result.
            if (typeof query.fetchMoreForQueryId === 'string') {
                this.store[query.fetchMoreForQueryId].networkStatus =
                    NetworkStatus.fetchMore;
            }
        };
        QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {
            if (!this.store[queryId])
                return;
            this.store[queryId].networkError = null;
            this.store[queryId].graphQLErrors =
                result.errors && result.errors.length ? result.errors : [];
            this.store[queryId].previousVariables = null;
            this.store[queryId].networkStatus = NetworkStatus.ready;
            // If we have a `fetchMoreForQueryId` then we need to update the network
            // status for that query. See the branch for query initialization for more
            // explanation about this true.
            if (typeof fetchMoreForQueryId === 'string') {
                this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;
            }
        };
        QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {
            if (!this.store[queryId])
                return;
            this.store[queryId].networkError = error;
            this.store[queryId].networkStatus = NetworkStatus.error;
            // If we have a `fetchMoreForQueryId` then we need to update the network
            // status for that query. See the branch for query initialization for more
            // explanation about this true.
            if (typeof fetchMoreForQueryId === 'string') {
                this.markQueryResultClient(fetchMoreForQueryId, true);
            }
        };
        QueryStore.prototype.markQueryResultClient = function (queryId, complete) {
            if (!this.store[queryId])
                return;
            this.store[queryId].networkError = null;
            this.store[queryId].previousVariables = null;
            this.store[queryId].networkStatus = complete
                ? NetworkStatus.ready
                : NetworkStatus.loading;
        };
        QueryStore.prototype.stopQuery = function (queryId) {
            delete this.store[queryId];
        };
        QueryStore.prototype.reset = function (observableQueryIds) {
            var _this = this;
            // keep only the queries with query ids that are associated with observables
            this.store = Object.keys(this.store)
                .filter(function (queryId) {
                return observableQueryIds.indexOf(queryId) > -1;
            })
                .reduce(function (res, key) {
                // XXX set loading to true so listeners don't trigger unless they want results with partial data
                res[key] = __assign$6({}, _this.store[key], { networkStatus: NetworkStatus.loading });
                return res;
            }, {});
        };
        return QueryStore;
    }());
    //# sourceMappingURL=queries.js.map

    var __assign$7 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var defaultQueryInfo = {
        listeners: [],
        invalidated: false,
        document: null,
        newData: null,
        lastRequestId: null,
        observableQuery: null,
        subscriptions: [],
    };
    var QueryManager = (function () {
        function QueryManager(_a) {
            var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d;
            this.mutationStore = new MutationStore();
            this.queryStore = new QueryStore();
            // let's not start at zero to avoid pain with bad checks
            this.idCounter = 1;
            // XXX merge with ObservableQuery but that needs to be expanded to support mutations and
            // subscriptions as well
            this.queries = new Map();
            // A map going from a requestId to a promise that has not yet been resolved. We use this to keep
            // track of queries that are inflight and reject them in case some
            // destabalizing action occurs (e.g. reset of the Apollo store).
            this.fetchQueryPromises = new Map();
            // A map going from the name of a query to an observer issued for it by watchQuery. This is
            // generally used to refetches for refetchQueries and to update mutation results through
            // updateQueries.
            this.queryIdsByName = {};
            this.link = link;
            this.deduplicator = ApolloLink.from([new DedupLink(), link]);
            this.queryDeduplication = queryDeduplication;
            this.dataStore = store;
            this.onBroadcast = onBroadcast;
            this.scheduler = new QueryScheduler({ queryManager: this, ssrMode: ssrMode });
        }
        QueryManager.prototype.mutate = function (_a) {
            var _this = this;
            var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, updateWithProxyFn = _a.update, _c = _a.errorPolicy, errorPolicy = _c === void 0 ? 'none' : _c, fetchPolicy = _a.fetchPolicy, _d = _a.context, context = _d === void 0 ? {} : _d;
            if (!mutation) {
                throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');
            }
            if (fetchPolicy && fetchPolicy !== 'no-cache') {
                throw new Error("fetchPolicy for mutations currently only supports the 'no-cache' policy");
            }
            var mutationId = this.generateQueryId();
            var cache = this.dataStore.getCache();
            mutation = cache.transformDocument(mutation), variables = assign$2({}, getDefaultValues(getMutationDefinition(mutation)), variables);
            var mutationString = print(mutation);
            this.setQuery(mutationId, function () { return ({ document: mutation }); });
            // Create a map of update queries by id to the query instead of by name.
            var generateUpdateQueriesInfo = function () {
                var ret = {};
                if (updateQueriesByName) {
                    Object.keys(updateQueriesByName).forEach(function (queryName) {
                        return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {
                            ret[queryId] = {
                                updater: updateQueriesByName[queryName],
                                query: _this.queryStore.get(queryId),
                            };
                        });
                    });
                }
                return ret;
            };
            this.mutationStore.initMutation(mutationId, mutationString, variables);
            this.dataStore.markMutationInit({
                mutationId: mutationId,
                document: mutation,
                variables: variables || {},
                updateQueries: generateUpdateQueriesInfo(),
                update: updateWithProxyFn,
                optimisticResponse: optimisticResponse,
            });
            this.broadcastQueries();
            return new Promise(function (resolve, reject) {
                var storeResult;
                var error;
                var operation = _this.buildOperationForLink(mutation, variables, __assign$7({}, context, { optimisticResponse: optimisticResponse }));
                execute$1(_this.link, operation).subscribe({
                    next: function (result) {
                        if (graphQLResultHasError(result) && errorPolicy === 'none') {
                            error = new ApolloError({
                                graphQLErrors: result.errors,
                            });
                            return;
                        }
                        _this.mutationStore.markMutationResult(mutationId);
                        if (fetchPolicy !== 'no-cache') {
                            _this.dataStore.markMutationResult({
                                mutationId: mutationId,
                                result: result,
                                document: mutation,
                                variables: variables || {},
                                updateQueries: generateUpdateQueriesInfo(),
                                update: updateWithProxyFn,
                            });
                        }
                        storeResult = result;
                    },
                    error: function (err) {
                        _this.mutationStore.markMutationError(mutationId, err);
                        _this.dataStore.markMutationComplete({
                            mutationId: mutationId,
                            optimisticResponse: optimisticResponse,
                        });
                        _this.broadcastQueries();
                        _this.setQuery(mutationId, function () { return ({ document: undefined }); });
                        reject(new ApolloError({
                            networkError: err,
                        }));
                    },
                    complete: function () {
                        if (error) {
                            _this.mutationStore.markMutationError(mutationId, error);
                        }
                        _this.dataStore.markMutationComplete({
                            mutationId: mutationId,
                            optimisticResponse: optimisticResponse,
                        });
                        _this.broadcastQueries();
                        if (error) {
                            reject(error);
                            return;
                        }
                        // allow for conditional refetches
                        // XXX do we want to make this the only API one day?
                        if (typeof refetchQueries === 'function')
                            refetchQueries = refetchQueries(storeResult);
                        refetchQueries.forEach(function (refetchQuery) {
                            if (typeof refetchQuery === 'string') {
                                _this.refetchQueryByName(refetchQuery);
                                return;
                            }
                            _this.query({
                                query: refetchQuery.query,
                                variables: refetchQuery.variables,
                                fetchPolicy: 'network-only',
                            });
                        });
                        _this.setQuery(mutationId, function () { return ({ document: undefined }); });
                        if (errorPolicy === 'ignore' &&
                            storeResult &&
                            graphQLResultHasError(storeResult)) {
                            delete storeResult.errors;
                        }
                        resolve(storeResult);
                    },
                });
            });
        };
        QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, 
            // This allows us to track if this is a query spawned by a `fetchMore`
            // call for another query. We need this data to compute the `fetchMore`
            // network status for the query this is fetching for.
            fetchMoreForQueryId) {
            var _this = this;
            var _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c;
            var cache = this.dataStore.getCache();
            var query = cache.transformDocument(options.query);
            var storeResult;
            var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';
            // If this is not a force fetch, we want to diff the query against the
            // store before we fetch it from the network interface.
            // TODO we hit the cache even if the policy is network-first. This could be unnecessary if the network is up.
            if (fetchType !== FetchType.refetch &&
                fetchPolicy !== 'network-only' &&
                fetchPolicy !== 'no-cache') {
                var _d = this.dataStore.getCache().diff({
                    query: query,
                    variables: variables,
                    returnPartialData: true,
                    optimistic: false,
                }), complete = _d.complete, result = _d.result;
                // If we're in here, only fetch if we have missing fields
                needToFetch = !complete || fetchPolicy === 'cache-and-network';
                storeResult = result;
            }
            var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';
            // we need to check to see if this is an operation that uses the @live directive
            if (hasDirectives(['live'], query))
                shouldFetch = true;
            var requestId = this.generateRequestId();
            // set up a watcher to listen to cache updates
            var cancel = this.updateQueryWatch(queryId, query, options);
            // Initialize query in store with unique requestId
            this.setQuery(queryId, function () { return ({
                document: query,
                lastRequestId: requestId,
                invalidated: true,
                cancel: cancel,
            }); });
            this.invalidate(true, fetchMoreForQueryId);
            this.queryStore.initQuery({
                queryId: queryId,
                queryString: print(query),
                document: query,
                storePreviousVariables: shouldFetch,
                variables: variables,
                isPoll: fetchType === FetchType.poll,
                isRefetch: fetchType === FetchType.refetch,
                metadata: metadata,
                fetchMoreForQueryId: fetchMoreForQueryId,
            });
            this.broadcastQueries();
            // If there is no part of the query we need to fetch from the server (or,
            // fetchPolicy is cache-only), we just write the store result as the final result.
            var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';
            if (shouldDispatchClientResult) {
                this.queryStore.markQueryResultClient(queryId, !shouldFetch);
                this.invalidate(true, queryId, fetchMoreForQueryId);
                this.broadcastQueries();
            }
            if (shouldFetch) {
                var networkResult = this.fetchRequest({
                    requestId: requestId,
                    queryId: queryId,
                    document: query,
                    options: options,
                    fetchMoreForQueryId: fetchMoreForQueryId,
                }).catch(function (error) {
                    // This is for the benefit of `refetch` promises, which currently don't get their errors
                    // through the store like watchQuery observers do
                    if (isApolloError(error)) {
                        throw error;
                    }
                    else {
                        var lastRequestId = _this.getQuery(queryId).lastRequestId;
                        if (requestId >= (lastRequestId || 1)) {
                            _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);
                            _this.invalidate(true, queryId, fetchMoreForQueryId);
                            _this.broadcastQueries();
                        }
                        _this.removeFetchQueryPromise(requestId);
                        throw new ApolloError({ networkError: error });
                    }
                });
                // we don't return the promise for cache-and-network since it is already
                // returned below from the cache
                if (fetchPolicy !== 'cache-and-network') {
                    return networkResult;
                }
                else {
                    // however we need to catch the error so it isn't unhandled in case of
                    // network error
                    networkResult.catch(function () { });
                }
            }
            // If we have no query to send to the server, we should return the result
            // found within the store.
            return Promise.resolve({ data: storeResult });
        };
        // Returns a query listener that will update the given observer based on the
        // results (or lack thereof) for a particular query.
        QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {
            var _this = this;
            var previouslyHadError = false;
            return function (queryStoreValue, newData) {
                // we're going to take a look at the data, so the query is no longer invalidated
                _this.invalidate(false, queryId);
                // The query store value can be undefined in the event of a store
                // reset.
                if (!queryStoreValue)
                    return;
                var observableQuery = _this.getQuery(queryId).observableQuery;
                var fetchPolicy = observableQuery
                    ? observableQuery.options.fetchPolicy
                    : options.fetchPolicy;
                // don't watch the store for queries on standby
                if (fetchPolicy === 'standby')
                    return;
                var errorPolicy = observableQuery
                    ? observableQuery.options.errorPolicy
                    : options.errorPolicy;
                var lastResult = observableQuery
                    ? observableQuery.getLastResult()
                    : null;
                var lastError = observableQuery ? observableQuery.getLastError() : null;
                var shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||
                    fetchPolicy === 'cache-only' ||
                    fetchPolicy === 'cache-and-network';
                // if this caused by a cache broadcast but the query is still in flight
                // don't notify the observer
                // if (
                //   isCacheBroadcast &&
                //   isNetworkRequestInFlight(queryStoreValue.networkStatus)
                // ) {
                //   shouldNotifyIfLoading = false;
                // }
                var networkStatusChanged = Boolean(lastResult &&
                    queryStoreValue.networkStatus !== lastResult.networkStatus);
                var errorStatusChanged = errorPolicy &&
                    (lastError && lastError.graphQLErrors) !==
                        queryStoreValue.graphQLErrors &&
                    errorPolicy !== 'none';
                if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||
                    (networkStatusChanged && options.notifyOnNetworkStatusChange) ||
                    shouldNotifyIfLoading) {
                    // If we have either a GraphQL error or a network error, we create
                    // an error and tell the observer about it.
                    if (((!errorPolicy || errorPolicy === 'none') &&
                        queryStoreValue.graphQLErrors &&
                        queryStoreValue.graphQLErrors.length > 0) ||
                        queryStoreValue.networkError) {
                        var apolloError_1 = new ApolloError({
                            graphQLErrors: queryStoreValue.graphQLErrors,
                            networkError: queryStoreValue.networkError,
                        });
                        previouslyHadError = true;
                        if (observer.error) {
                            try {
                                observer.error(apolloError_1);
                            }
                            catch (e) {
                                // Throw error outside this control flow to avoid breaking Apollo's state
                                setTimeout(function () {
                                    throw e;
                                }, 0);
                            }
                        }
                        else {
                            // Throw error outside this control flow to avoid breaking Apollo's state
                            setTimeout(function () {
                                throw apolloError_1;
                            }, 0);
                            if (!isProduction()) {
                                /* tslint:disable-next-line */
                                console.info('An unhandled error was thrown because no error handler is registered ' +
                                    'for the query ' +
                                    queryStoreValue.queryString);
                            }
                        }
                        return;
                    }
                    try {
                        var data = void 0;
                        var isMissing = void 0;
                        if (newData) {
                            // clear out the latest new data, since we're now using it
                            _this.setQuery(queryId, function () { return ({ newData: null }); });
                            data = newData.result;
                            isMissing = !newData.complete ? !newData.complete : false;
                        }
                        else {
                            if (lastResult && lastResult.data && !errorStatusChanged) {
                                data = lastResult.data;
                                isMissing = false;
                            }
                            else {
                                var document_1 = _this.getQuery(queryId).document;
                                var readResult = _this.dataStore.getCache().diff({
                                    query: document_1,
                                    variables: queryStoreValue.previousVariables ||
                                        queryStoreValue.variables,
                                    optimistic: true,
                                });
                                data = readResult.result;
                                isMissing = !readResult.complete;
                            }
                        }
                        var resultFromStore = void 0;
                        // If there is some data missing and the user has told us that they
                        // do not tolerate partial data then we want to return the previous
                        // result and mark it as stale.
                        if (isMissing && fetchPolicy !== 'cache-only') {
                            resultFromStore = {
                                data: lastResult && lastResult.data,
                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),
                                networkStatus: queryStoreValue.networkStatus,
                                stale: true,
                            };
                        }
                        else {
                            resultFromStore = {
                                data: data,
                                loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),
                                networkStatus: queryStoreValue.networkStatus,
                                stale: false,
                            };
                        }
                        // if the query wants updates on errors we need to add it to the result
                        if (errorPolicy === 'all' &&
                            queryStoreValue.graphQLErrors &&
                            queryStoreValue.graphQLErrors.length > 0) {
                            resultFromStore.errors = queryStoreValue.graphQLErrors;
                        }
                        if (observer.next) {
                            var isDifferentResult = !(lastResult &&
                                resultFromStore &&
                                lastResult.networkStatus === resultFromStore.networkStatus &&
                                lastResult.stale === resultFromStore.stale &&
                                // We can do a strict equality check here because we include a `previousResult`
                                // with `readQueryFromStore`. So if the results are the same they will be
                                // referentially equal.
                                lastResult.data === resultFromStore.data);
                            if (isDifferentResult || previouslyHadError) {
                                try {
                                    observer.next(maybeDeepFreeze(resultFromStore));
                                }
                                catch (e) {
                                    // Throw error outside this control flow to avoid breaking Apollo's state
                                    setTimeout(function () {
                                        throw e;
                                    }, 0);
                                }
                            }
                        }
                        previouslyHadError = false;
                    }
                    catch (error) {
                        previouslyHadError = true;
                        if (observer.error)
                            observer.error(new ApolloError({ networkError: error }));
                        return;
                    }
                }
            };
        };
        // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called
        // directly (i.e. through ApolloClient) or through the query method within QueryManager.
        // Currently, the query method uses watchQuery in order to handle non-network errors correctly
        // but we don't want to keep track observables issued for the query method since those aren't
        // supposed to be refetched in the event of a store reset. Once we unify error handling for
        // network errors and non-network errors, the shouldSubscribe option will go away.
        QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {
            if (shouldSubscribe === void 0) { shouldSubscribe = true; }
            if (options.fetchPolicy === 'standby') {
                throw new Error('client.watchQuery cannot be called with fetchPolicy set to "standby"');
            }
            // get errors synchronously
            var queryDefinition = getQueryDefinition(options.query);
            // assign variable default values if supplied
            if (queryDefinition.variableDefinitions &&
                queryDefinition.variableDefinitions.length) {
                var defaultValues = getDefaultValues(queryDefinition);
                options.variables = assign$2({}, defaultValues, options.variables);
            }
            if (typeof options.notifyOnNetworkStatusChange === 'undefined') {
                options.notifyOnNetworkStatusChange = false;
            }
            var transformedOptions = __assign$7({}, options);
            return new ObservableQuery({
                scheduler: this.scheduler,
                options: transformedOptions,
                shouldSubscribe: shouldSubscribe,
            });
        };
        QueryManager.prototype.query = function (options) {
            var _this = this;
            if (!options.query) {
                throw new Error('query option is required. You must specify your GraphQL document in the query option.');
            }
            if (options.query.kind !== 'Document') {
                throw new Error('You must wrap the query string in a "gql" tag.');
            }
            if (options.returnPartialData) {
                throw new Error('returnPartialData option only supported on watchQuery.');
            }
            if (options.pollInterval) {
                throw new Error('pollInterval option only supported on watchQuery.');
            }
            if (typeof options.notifyOnNetworkStatusChange !== 'undefined') {
                throw new Error('Cannot call "query" with "notifyOnNetworkStatusChange" option. Only "watchQuery" has that option.');
            }
            options.notifyOnNetworkStatusChange = false;
            var requestId = this.idCounter;
            var resPromise = new Promise(function (resolve, reject) {
                _this.addFetchQueryPromise(requestId, resPromise, resolve, reject);
                return _this.watchQuery(options, false)
                    .result()
                    .then(function (result) {
                    _this.removeFetchQueryPromise(requestId);
                    resolve(result);
                })
                    .catch(function (error) {
                    _this.removeFetchQueryPromise(requestId);
                    reject(error);
                });
            });
            return resPromise;
        };
        QueryManager.prototype.generateQueryId = function () {
            var queryId = this.idCounter.toString();
            this.idCounter++;
            return queryId;
        };
        QueryManager.prototype.stopQueryInStore = function (queryId) {
            this.queryStore.stopQuery(queryId);
            this.invalidate(true, queryId);
            this.broadcastQueries();
        };
        QueryManager.prototype.addQueryListener = function (queryId, listener) {
            this.setQuery(queryId, function (_a) {
                var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;
                return ({
                    listeners: listeners.concat([listener]),
                    invalidate: false,
                });
            });
        };
        QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {
            var _this = this;
            var cancel = this.getQuery(queryId).cancel;
            if (cancel)
                cancel();
            var previousResult = function () {
                var previousResult = null;
                var observableQuery = _this.getQuery(queryId).observableQuery;
                if (observableQuery) {
                    var lastResult = observableQuery.getLastResult();
                    if (lastResult) {
                        previousResult = lastResult.data;
                    }
                }
                return previousResult;
            };
            return this.dataStore.getCache().watch({
                query: document,
                variables: options.variables,
                optimistic: true,
                previousResult: previousResult,
                callback: function (newData) {
                    _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });
                },
            });
        };
        // Adds a promise to this.fetchQueryPromises for a given request ID.
        QueryManager.prototype.addFetchQueryPromise = function (requestId, promise, resolve, reject) {
            this.fetchQueryPromises.set(requestId.toString(), {
                promise: promise,
                resolve: resolve,
                reject: reject,
            });
        };
        // Removes the promise in this.fetchQueryPromises for a particular request ID.
        QueryManager.prototype.removeFetchQueryPromise = function (requestId) {
            this.fetchQueryPromises.delete(requestId.toString());
        };
        // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.
        QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {
            this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });
            // Insert the ObservableQuery into this.observableQueriesByName if the query has a name
            var queryDef = getQueryDefinition(observableQuery.options.query);
            if (queryDef.name && queryDef.name.value) {
                var queryName = queryDef.name.value;
                // XXX we may we want to warn the user about query name conflicts in the future
                this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];
                this.queryIdsByName[queryName].push(observableQuery.queryId);
            }
        };
        QueryManager.prototype.removeObservableQuery = function (queryId) {
            var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;
            if (cancel)
                cancel();
            if (!observableQuery)
                return;
            var definition = getQueryDefinition(observableQuery.options.query);
            var queryName = definition.name ? definition.name.value : null;
            this.setQuery(queryId, function () { return ({ observableQuery: null }); });
            if (queryName) {
                this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {
                    return !(observableQuery.queryId === val);
                });
            }
        };
        QueryManager.prototype.clearStore = function () {
            // Before we have sent the reset action to the store,
            // we can no longer rely on the results returned by in-flight
            // requests since these may depend on values that previously existed
            // in the data portion of the store. So, we cancel the promises and observers
            // that we have issued so far and not yet resolved (in the case of
            // queries).
            this.fetchQueryPromises.forEach(function (_a) {
                var reject = _a.reject;
                reject(new Error('Store reset while query was in flight(not completed in link chain)'));
            });
            var resetIds = [];
            this.queries.forEach(function (_a, queryId) {
                var observableQuery = _a.observableQuery;
                if (observableQuery)
                    resetIds.push(queryId);
            });
            this.queryStore.reset(resetIds);
            this.mutationStore.reset();
            // begin removing data from the store
            var reset = this.dataStore.reset();
            return reset;
        };
        QueryManager.prototype.resetStore = function () {
            var _this = this;
            // Similarly, we have to have to refetch each of the queries currently being
            // observed. We refetch instead of error'ing on these since the assumption is that
            // resetting the store doesn't eliminate the need for the queries currently being
            // watched. If there is an existing query in flight when the store is reset,
            // the promise for it will be rejected and its results will not be written to the
            // store.
            return this.clearStore().then(function () {
                return _this.reFetchObservableQueries();
            });
        };
        QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {
            var _this = this;
            var observableQueryPromises = [];
            this.queries.forEach(function (_a, queryId) {
                var observableQuery = _a.observableQuery;
                if (!observableQuery)
                    return;
                var fetchPolicy = observableQuery.options.fetchPolicy;
                observableQuery.resetLastResults();
                if (fetchPolicy !== 'cache-only' &&
                    (includeStandby || fetchPolicy !== 'standby')) {
                    observableQueryPromises.push(observableQuery.refetch());
                }
                _this.setQuery(queryId, function () { return ({ newData: null }); });
                _this.invalidate(true, queryId);
            });
            return observableQueryPromises;
        };
        QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
            var observableQueryPromises = this.getObservableQueryPromises(includeStandby);
            this.broadcastQueries();
            return Promise.all(observableQueryPromises);
        };
        QueryManager.prototype.startQuery = function (queryId, options, listener) {
            this.addQueryListener(queryId, listener);
            this.fetchQuery(queryId, options)
                .catch(function () { return undefined; });
            return queryId;
        };
        QueryManager.prototype.startGraphQLSubscription = function (options) {
            var _this = this;
            var query = options.query;
            var cache = this.dataStore.getCache();
            var transformedDoc = cache.transformDocument(query);
            var variables = assign$2({}, getDefaultValues(getOperationDefinition(query)), options.variables);
            var sub;
            var observers = [];
            return new Observable$1(function (observer) {
                observers.push(observer);
                // If this is the first observer, actually initiate the network subscription
                if (observers.length === 1) {
                    var handler = {
                        next: function (result) {
                            _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);
                            _this.broadcastQueries();
                            // It's slightly awkward that the data for subscriptions doesn't come from the store.
                            observers.forEach(function (obs) {
                                // XXX I'd prefer a different way to handle errors for subscriptions
                                if (obs.next)
                                    obs.next(result);
                            });
                        },
                        error: function (error) {
                            observers.forEach(function (obs) {
                                if (obs.error)
                                    obs.error(error);
                            });
                        },
                    };
                    // TODO: Should subscriptions also accept a `context` option to pass
                    // through to links?
                    var operation = _this.buildOperationForLink(transformedDoc, variables);
                    sub = execute$1(_this.link, operation).subscribe(handler);
                }
                return function () {
                    observers = observers.filter(function (obs) { return obs !== observer; });
                    // If we removed the last observer, tear down the network subscription
                    if (observers.length === 0 && sub) {
                        sub.unsubscribe();
                    }
                };
            });
        };
        QueryManager.prototype.stopQuery = function (queryId) {
            this.stopQueryInStore(queryId);
            this.removeQuery(queryId);
        };
        QueryManager.prototype.removeQuery = function (queryId) {
            var subscriptions = this.getQuery(queryId).subscriptions;
            // teardown all links
            subscriptions.forEach(function (x) { return x.unsubscribe(); });
            this.queries.delete(queryId);
        };
        QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {
            if (optimistic === void 0) { optimistic = true; }
            var _a = observableQuery.options, variables = _a.variables, query = _a.query;
            var lastResult = observableQuery.getLastResult();
            var newData = this.getQuery(observableQuery.queryId).newData;
            // XXX test this
            if (newData) {
                return maybeDeepFreeze({ data: newData.result, partial: false });
            }
            else {
                try {
                    // the query is brand new, so we read from the store to see if anything is there
                    var data = this.dataStore.getCache().read({
                        query: query,
                        variables: variables,
                        previousResult: lastResult ? lastResult.data : undefined,
                        optimistic: optimistic,
                    });
                    return maybeDeepFreeze({ data: data, partial: false });
                }
                catch (e) {
                    return maybeDeepFreeze({ data: {}, partial: true });
                }
            }
        };
        QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {
            var observableQuery;
            if (typeof queryIdOrObservable === 'string') {
                var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;
                if (!foundObserveableQuery) {
                    throw new Error("ObservableQuery with this id doesn't exist: " + queryIdOrObservable);
                }
                observableQuery = foundObserveableQuery;
            }
            else {
                observableQuery = queryIdOrObservable;
            }
            var _a = observableQuery.options, variables = _a.variables, query = _a.query;
            var data = this.getCurrentQueryResult(observableQuery, false).data;
            return {
                previousResult: data,
                variables: variables,
                document: query,
            };
        };
        QueryManager.prototype.broadcastQueries = function () {
            var _this = this;
            this.onBroadcast();
            this.queries.forEach(function (info, id) {
                if (!info.invalidated || !info.listeners)
                    return;
                info.listeners
                    .filter(function (x) { return !!x; })
                    .forEach(function (listener) {
                    listener(_this.queryStore.get(id), info.newData);
                });
            });
        };
        // Takes a request id, query id, a query document and information associated with the query
        // and send it to the network interface. Returns
        // a promise for the result associated with that request.
        QueryManager.prototype.fetchRequest = function (_a) {
            var _this = this;
            var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;
            var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;
            var operation = this.buildOperationForLink(document, variables, __assign$7({}, context, { 
                // TODO: Should this be included for all entry points via
                // buildOperationForLink?
                forceFetch: !this.queryDeduplication }));
            var resultFromStore;
            var errorsFromStore;
            var retPromise = new Promise(function (resolve, reject) {
                _this.addFetchQueryPromise(requestId, retPromise, resolve, reject);
                var subscription = execute$1(_this.deduplicator, operation).subscribe({
                    next: function (result) {
                        // default the lastRequestId to 1
                        var lastRequestId = _this.getQuery(queryId).lastRequestId;
                        if (requestId >= (lastRequestId || 1)) {
                            if (fetchPolicy !== 'no-cache') {
                                try {
                                    _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');
                                }
                                catch (e) {
                                    reject(e);
                                    return;
                                }
                            }
                            else {
                                _this.setQuery(queryId, function () { return ({
                                    newData: { result: result.data, complete: true },
                                }); });
                            }
                            _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);
                            _this.invalidate(true, queryId, fetchMoreForQueryId);
                            _this.broadcastQueries();
                        }
                        if (result.errors && errorPolicy === 'none') {
                            reject(new ApolloError({
                                graphQLErrors: result.errors,
                            }));
                            return;
                        }
                        else if (errorPolicy === 'all') {
                            errorsFromStore = result.errors;
                        }
                        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {
                            // We don't write fetchMore results to the store because this would overwrite
                            // the original result in case an @connection directive is used.
                            resultFromStore = result.data;
                        }
                        else {
                            try {
                                // ensure result is combined with data already in store
                                resultFromStore = _this.dataStore.getCache().read({
                                    variables: variables,
                                    query: document,
                                    optimistic: false,
                                });
                                // this will throw an error if there are missing fields in
                                // the results which can happen with errors from the server.
                                // tslint:disable-next-line
                            }
                            catch (e) { }
                        }
                    },
                    error: function (error) {
                        _this.removeFetchQueryPromise(requestId);
                        _this.setQuery(queryId, function (_a) {
                            var subscriptions = _a.subscriptions;
                            return ({
                                subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),
                            });
                        });
                        reject(error);
                    },
                    complete: function () {
                        _this.removeFetchQueryPromise(requestId);
                        _this.setQuery(queryId, function (_a) {
                            var subscriptions = _a.subscriptions;
                            return ({
                                subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),
                            });
                        });
                        resolve({
                            data: resultFromStore,
                            errors: errorsFromStore,
                            loading: false,
                            networkStatus: NetworkStatus.ready,
                            stale: false,
                        });
                    },
                });
                _this.setQuery(queryId, function (_a) {
                    var subscriptions = _a.subscriptions;
                    return ({
                        subscriptions: subscriptions.concat([subscription]),
                    });
                });
            });
            return retPromise;
        };
        // Refetches a query given that query's name. Refetches
        // all ObservableQuery instances associated with the query name.
        QueryManager.prototype.refetchQueryByName = function (queryName) {
            var _this = this;
            var refetchedQueries = this.queryIdsByName[queryName];
            // early return if the query named does not exist (not yet fetched)
            // this used to warn but it may be inteneded behavoir to try and refetch
            // un called queries because they could be on different routes
            if (refetchedQueries === undefined)
                return;
            return Promise.all(refetchedQueries
                .map(function (id) { return _this.getQuery(id).observableQuery; })
                .filter(function (x) { return !!x; })
                .map(function (x) { return x.refetch(); }));
        };
        QueryManager.prototype.generateRequestId = function () {
            var requestId = this.idCounter;
            this.idCounter++;
            return requestId;
        };
        QueryManager.prototype.getQuery = function (queryId) {
            return this.queries.get(queryId) || __assign$7({}, defaultQueryInfo);
        };
        QueryManager.prototype.setQuery = function (queryId, updater) {
            var prev = this.getQuery(queryId);
            var newInfo = __assign$7({}, prev, updater(prev));
            this.queries.set(queryId, newInfo);
        };
        QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {
            if (queryId)
                this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });
            if (fetchMoreForQueryId) {
                this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });
            }
        };
        QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {
            var cache = this.dataStore.getCache();
            return {
                query: cache.transformForLink
                    ? cache.transformForLink(document)
                    : document,
                variables: variables,
                operationName: getOperationName(document) || undefined,
                context: __assign$7({}, extraContext, { cache: cache, 
                    // getting an entry's cache key is useful for cacheResolvers & state-link
                    getCacheKey: function (obj) {
                        if (cache.config) {
                            // on the link, we just want the id string, not the full id value from toIdValue
                            return cache.config.dataIdFromObject(obj);
                        }
                        else {
                            throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');
                        }
                    } }),
            };
        };
        return QueryManager;
    }());
    //# sourceMappingURL=QueryManager.js.map

    var DataStore = (function () {
        function DataStore(initialCache) {
            this.cache = initialCache;
        }
        DataStore.prototype.getCache = function () {
            return this.cache;
        };
        DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {
            if (ignoreErrors === void 0) { ignoreErrors = false; }
            var writeWithErrors = !graphQLResultHasError(result);
            if (ignoreErrors && graphQLResultHasError(result) && result.data) {
                writeWithErrors = true;
            }
            if (!fetchMoreForQueryId && writeWithErrors) {
                this.cache.write({
                    result: result.data,
                    dataId: 'ROOT_QUERY',
                    query: document,
                    variables: variables,
                });
            }
        };
        DataStore.prototype.markSubscriptionResult = function (result, document, variables) {
            // the subscription interface should handle not sending us results we no longer subscribe to.
            // XXX I don't think we ever send in an object with errors, but we might in the future...
            if (!graphQLResultHasError(result)) {
                this.cache.write({
                    result: result.data,
                    dataId: 'ROOT_SUBSCRIPTION',
                    query: document,
                    variables: variables,
                });
            }
        };
        DataStore.prototype.markMutationInit = function (mutation) {
            var _this = this;
            if (mutation.optimisticResponse) {
                var optimistic_1;
                if (typeof mutation.optimisticResponse === 'function') {
                    optimistic_1 = mutation.optimisticResponse(mutation.variables);
                }
                else {
                    optimistic_1 = mutation.optimisticResponse;
                }
                var changeFn_1 = function () {
                    _this.markMutationResult({
                        mutationId: mutation.mutationId,
                        result: { data: optimistic_1 },
                        document: mutation.document,
                        variables: mutation.variables,
                        updateQueries: mutation.updateQueries,
                        update: mutation.update,
                    });
                };
                this.cache.recordOptimisticTransaction(function (c) {
                    var orig = _this.cache;
                    _this.cache = c;
                    try {
                        changeFn_1();
                    }
                    finally {
                        _this.cache = orig;
                    }
                }, mutation.mutationId);
            }
        };
        DataStore.prototype.markMutationResult = function (mutation) {
            var _this = this;
            // Incorporate the result from this mutation into the store
            if (!graphQLResultHasError(mutation.result)) {
                var cacheWrites_1 = [];
                cacheWrites_1.push({
                    result: mutation.result.data,
                    dataId: 'ROOT_MUTATION',
                    query: mutation.document,
                    variables: mutation.variables,
                });
                if (mutation.updateQueries) {
                    Object.keys(mutation.updateQueries)
                        .filter(function (id) { return mutation.updateQueries[id]; })
                        .forEach(function (queryId) {
                        var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;
                        // Read the current query result from the store.
                        var _b = _this.cache.diff({
                            query: query.document,
                            variables: query.variables,
                            returnPartialData: true,
                            optimistic: false,
                        }), currentQueryResult = _b.result, complete = _b.complete;
                        if (!complete) {
                            return;
                        }
                        // Run our reducer using the current query result and the mutation result.
                        var nextQueryResult = tryFunctionOrLogError(function () {
                            return updater(currentQueryResult, {
                                mutationResult: mutation.result,
                                queryName: getOperationName(query.document) || undefined,
                                queryVariables: query.variables,
                            });
                        });
                        // Write the modified result back into the store if we got a new result.
                        if (nextQueryResult) {
                            cacheWrites_1.push({
                                result: nextQueryResult,
                                dataId: 'ROOT_QUERY',
                                query: query.document,
                                variables: query.variables,
                            });
                        }
                    });
                }
                this.cache.performTransaction(function (c) {
                    cacheWrites_1.forEach(function (write) { return c.write(write); });
                });
                // If the mutation has some writes associated with it then we need to
                // apply those writes to the store by running this reducer again with a
                // write action.
                var update_1 = mutation.update;
                if (update_1) {
                    this.cache.performTransaction(function (c) {
                        tryFunctionOrLogError(function () { return update_1(c, mutation.result); });
                    });
                }
            }
        };
        DataStore.prototype.markMutationComplete = function (_a) {
            var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;
            if (!optimisticResponse)
                return;
            this.cache.removeOptimistic(mutationId);
        };
        DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {
            this.cache.write({
                result: newResult,
                dataId: 'ROOT_QUERY',
                variables: variables,
                query: document,
            });
        };
        DataStore.prototype.reset = function () {
            return this.cache.reset();
        };
        return DataStore;
    }());
    //# sourceMappingURL=store.js.map

    var version_1 = "2.2.8";

    var __assign$8 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var hasSuggestedDevtools = false;
    var supportedDirectives = new ApolloLink(function (operation, forward) {
        operation.query = removeConnectionDirectiveFromDocument(operation.query);
        return forward(operation);
    });
    /**
     * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries
     * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,
     * receive results from the server and cache the results in a store. It also delivers updates
     * to GraphQL queries through {@link Observable} instances.
     */
    var ApolloClient = (function () {
        /**
         * Constructs an instance of {@link ApolloClient}.
         *
         * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.
         *
         * @param cache The initial cache to use in the data store.
         *
         * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.
         *
         * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a
         * server side render.
         *
         * @param queryDeduplication If set to false, a query will still be sent to the server even if a query
         * with identical parameters (query, variables, operationName) is already in flight.
         *
         */
        function ApolloClient(options) {
            var _this = this;
            this.defaultOptions = {};
            this.resetStoreCallbacks = [];
            var link = options.link, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions;
            if (!link || !cache) {
                throw new Error("\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\n        For more information, please visit:\n          https://www.apollographql.com/docs/react/basics/setup.html\n        to help you get started.\n      ");
            }
            // remove apollo-client supported directives
            this.link = supportedDirectives.concat(link);
            this.cache = cache;
            this.store = new DataStore(cache);
            this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
            this.queryDeduplication = queryDeduplication;
            this.ssrMode = ssrMode;
            this.defaultOptions = defaultOptions || {};
            if (ssrForceFetchDelay) {
                setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);
            }
            this.watchQuery = this.watchQuery.bind(this);
            this.query = this.query.bind(this);
            this.mutate = this.mutate.bind(this);
            this.resetStore = this.resetStore.bind(this);
            this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
            // Attach the client instance to window to let us be found by chrome devtools, but only in
            // development mode
            var defaultConnectToDevTools = !isProduction() &&
                typeof window !== 'undefined' &&
                !window.__APOLLO_CLIENT__;
            if (typeof connectToDevTools === 'undefined'
                ? defaultConnectToDevTools
                : connectToDevTools && typeof window !== 'undefined') {
                window.__APOLLO_CLIENT__ = this;
            }
            /**
             * Suggest installing the devtools for developers who don't have them
             */
            if (!hasSuggestedDevtools && !isProduction()) {
                hasSuggestedDevtools = true;
                if (typeof window !== 'undefined' &&
                    window.document &&
                    window.top === window.self) {
                    // First check if devtools is not installed
                    if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
                        // Only for Chrome
                        if (window.navigator && window.navigator.userAgent.indexOf('Chrome') > -1) {
                            // tslint:disable-next-line
                            console.debug('Download the Apollo DevTools ' +
                                'for a better development experience: ' +
                                'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');
                        }
                    }
                }
            }
            this.version = version_1;
        }
        /**
         * This watches the results of the query according to the options specified and
         * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and
         * receive updated results through a GraphQL observer.
         * <p /><p />
         * Note that this method is not an implementation of GraphQL subscriptions. Rather,
         * it uses Apollo's store in order to reactively deliver updates to your query results.
         * <p /><p />
         * For example, suppose you call watchQuery on a GraphQL query that fetches an person's
         * first name and last name and this person has a particular object identifer, provided by
         * dataIdFromObject. Later, a different query fetches that same person's
         * first and last name and his/her first name has now changed. Then, any observers associated
         * with the results of the first query will be updated with a new result object.
         * <p /><p />
         * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for
         * a description of store reactivity.
         *
         */
        ApolloClient.prototype.watchQuery = function (options) {
            this.initQueryManager();
            if (this.defaultOptions.watchQuery) {
                options = __assign$8({}, this.defaultOptions.watchQuery, options);
            }
            // XXX Overwriting options is probably not the best way to do this long term...
            if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
                options = __assign$8({}, options, { fetchPolicy: 'cache-first' });
            }
            return this.queryManager.watchQuery(options);
        };
        /**
         * This resolves a single query according to the options specified and returns a
         * {@link Promise} which is either resolved with the resulting data or rejected
         * with an error.
         *
         * @param options An object of type {@link WatchQueryOptions} that allows us to describe
         * how this query should be treated e.g. whether it is a polling query, whether it should hit the
         * server at all or just resolve from the cache, etc.
         */
        ApolloClient.prototype.query = function (options) {
            this.initQueryManager();
            if (this.defaultOptions.query) {
                options = __assign$8({}, this.defaultOptions.query, options);
            }
            if (options.fetchPolicy === 'cache-and-network') {
                throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');
            }
            // XXX Overwriting options is probably not the best way to do this long term...
            if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {
                options = __assign$8({}, options, { fetchPolicy: 'cache-first' });
            }
            return this.queryManager.query(options);
        };
        /**
         * This resolves a single mutation according to the options specified and returns a
         * {@link Promise} which is either resolved with the resulting data or rejected with an
         * error.
         *
         * It takes options as an object with the following keys and values:
         */
        ApolloClient.prototype.mutate = function (options) {
            this.initQueryManager();
            if (this.defaultOptions.mutate) {
                options = __assign$8({}, this.defaultOptions.mutate, options);
            }
            return this.queryManager.mutate(options);
        };
        /**
         * This subscribes to a graphql subscription according to the options specified and returns an
         * {@link Observable} which either emits received data or an error.
         */
        ApolloClient.prototype.subscribe = function (options) {
            this.initQueryManager();
            return this.queryManager.startGraphQLSubscription(options);
        };
        /**
         * Tries to read some data from the store in the shape of the provided
         * GraphQL query without making a network request. This method will start at
         * the root query. To start at a specific id returned by `dataIdFromObject`
         * use `readFragment`.
         */
        ApolloClient.prototype.readQuery = function (options) {
            return this.initProxy().readQuery(options);
        };
        /**
         * Tries to read some data from the store in the shape of the provided
         * GraphQL fragment without making a network request. This method will read a
         * GraphQL fragment from any arbitrary id that is currently cached, unlike
         * `readQuery` which will only read from the root query.
         *
         * You must pass in a GraphQL document with a single fragment or a document
         * with multiple fragments that represent what you are reading. If you pass
         * in a document with multiple fragments then you must also specify a
         * `fragmentName`.
         */
        ApolloClient.prototype.readFragment = function (options) {
            return this.initProxy().readFragment(options);
        };
        /**
         * Writes some data in the shape of the provided GraphQL query directly to
         * the store. This method will start at the root query. To start at a a
         * specific id returned by `dataIdFromObject` then use `writeFragment`.
         */
        ApolloClient.prototype.writeQuery = function (options) {
            var result = this.initProxy().writeQuery(options);
            this.queryManager.broadcastQueries();
            return result;
        };
        /**
         * Writes some data in the shape of the provided GraphQL fragment directly to
         * the store. This method will write to a GraphQL fragment from any arbitrary
         * id that is currently cached, unlike `writeQuery` which will only write
         * from the root query.
         *
         * You must pass in a GraphQL document with a single fragment or a document
         * with multiple fragments that represent what you are writing. If you pass
         * in a document with multiple fragments then you must also specify a
         * `fragmentName`.
         */
        ApolloClient.prototype.writeFragment = function (options) {
            var result = this.initProxy().writeFragment(options);
            this.queryManager.broadcastQueries();
            return result;
        };
        /**
         * Sugar for writeQuery & writeFragment
         * This method will construct a query from the data object passed in.
         * If no id is supplied, writeData will write the data to the root.
         * If an id is supplied, writeData will write a fragment to the object
         * specified by the id in the store.
         *
         * Since you aren't passing in a query to check the shape of the data,
         * you must pass in an object that conforms to the shape of valid GraphQL data.
         */
        ApolloClient.prototype.writeData = function (options) {
            var result = this.initProxy().writeData(options);
            this.queryManager.broadcastQueries();
            return result;
        };
        ApolloClient.prototype.__actionHookForDevTools = function (cb) {
            this.devToolsHookCb = cb;
        };
        ApolloClient.prototype.__requestRaw = function (payload) {
            return execute$1(this.link, payload);
        };
        /**
         * This initializes the query manager that tracks queries and the cache
         */
        ApolloClient.prototype.initQueryManager = function () {
            var _this = this;
            if (this.queryManager)
                return;
            this.queryManager = new QueryManager({
                link: this.link,
                store: this.store,
                queryDeduplication: this.queryDeduplication,
                ssrMode: this.ssrMode,
                onBroadcast: function () {
                    if (_this.devToolsHookCb) {
                        _this.devToolsHookCb({
                            action: {},
                            state: {
                                queries: _this.queryManager.queryStore.getStore(),
                                mutations: _this.queryManager.mutationStore.getStore(),
                            },
                            dataWithOptimisticResults: _this.cache.extract(true),
                        });
                    }
                },
            });
        };
        /**
         * Resets your entire store by clearing out your cache and then re-executing
         * all of your active queries. This makes it so that you may guarantee that
         * there is no data left in your store from a time before you called this
         * method.
         *
         * `resetStore()` is useful when your user just logged out. You’ve removed the
         * user session, and you now want to make sure that any references to data you
         * might have fetched while the user session was active is gone.
         *
         * It is important to remember that `resetStore()` *will* refetch any active
         * queries. This means that any components that might be mounted will execute
         * their queries again using your network interface. If you do not want to
         * re-execute any queries then you should make sure to stop watching any
         * active queries.
         */
        ApolloClient.prototype.resetStore = function () {
            var _this = this;
            return Promise.resolve()
                .then(function () {
                return _this.queryManager
                    ? _this.queryManager.clearStore()
                    : Promise.resolve(null);
            })
                .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })
                .then(function () {
                return _this.queryManager
                    ? _this.queryManager.reFetchObservableQueries()
                    : Promise.resolve(null);
            });
        };
        /**
         * Allows callbacks to be registered that are executed with the store is reset.
         * onResetStore returns an unsubscribe function for removing your registered callbacks.
         */
        ApolloClient.prototype.onResetStore = function (cb) {
            var _this = this;
            this.resetStoreCallbacks.push(cb);
            return function () {
                _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });
            };
        };
        /**
         * Refetches all of your active queries.
         *
         * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage
         *
         * It is important to remember that `reFetchObservableQueries()` *will* refetch any active
         * queries. This means that any components that might be mounted will execute
         * their queries again using your network interface. If you do not want to
         * re-execute any queries then you should make sure to stop watching any
         * active queries.
         * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.
         */
        ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
            return this.queryManager
                ? this.queryManager.reFetchObservableQueries(includeStandby)
                : Promise.resolve(null);
        };
        /**
         * Exposes the cache's complete state, in a serializable format for later restoration.
         */
        ApolloClient.prototype.extract = function (optimistic) {
            return this.initProxy().extract(optimistic);
        };
        /**
         * Replaces existing state in the cache (if any) with the values expressed by
         * `serializedState`.
         *
         * Called when hydrating a cache (server side rendering, or offline storage),
         * and also (potentially) during hot reloads.
         */
        ApolloClient.prototype.restore = function (serializedState) {
            return this.initProxy().restore(serializedState);
        };
        /**
         * Initializes a data proxy for this client instance if one does not already
         * exist and returns either a previously initialized proxy instance or the
         * newly initialized instance.
         */
        ApolloClient.prototype.initProxy = function () {
            if (!this.proxy) {
                this.initQueryManager();
                this.proxy = this.cache;
            }
            return this.proxy;
        };
        return ApolloClient;
    }());
    //# sourceMappingURL=ApolloClient.js.map

    //# sourceMappingURL=index.js.map

    function queryFromPojo(obj) {
        var op = {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
                kind: 'Name',
                value: 'GeneratedClientQuery',
            },
            selectionSet: selectionSetFromObj(obj),
        };
        var out = {
            kind: 'Document',
            definitions: [op],
        };
        return out;
    }
    function fragmentFromPojo(obj, typename) {
        var frag = {
            kind: 'FragmentDefinition',
            typeCondition: {
                kind: 'NamedType',
                name: {
                    kind: 'Name',
                    value: typename || '__FakeType',
                },
            },
            name: {
                kind: 'Name',
                value: 'GeneratedClientQuery',
            },
            selectionSet: selectionSetFromObj(obj),
        };
        var out = {
            kind: 'Document',
            definitions: [frag],
        };
        return out;
    }
    function selectionSetFromObj(obj) {
        if (typeof obj === 'number' ||
            typeof obj === 'boolean' ||
            typeof obj === 'string' ||
            typeof obj === 'undefined' ||
            obj === null) {
            // No selection set here
            return null;
        }
        if (Array.isArray(obj)) {
            // GraphQL queries don't include arrays
            return selectionSetFromObj(obj[0]);
        }
        // Now we know it's an object
        var selections = [];
        Object.keys(obj).forEach(function (key) {
            var field = {
                kind: 'Field',
                name: {
                    kind: 'Name',
                    value: key,
                },
            };
            // Recurse
            var nestedSelSet = selectionSetFromObj(obj[key]);
            if (nestedSelSet) {
                field.selectionSet = nestedSelSet;
            }
            selections.push(field);
        });
        var selectionSet = {
            kind: 'SelectionSet',
            selections: selections,
        };
        return selectionSet;
    }
    var justTypenameQuery = {
        kind: 'Document',
        definitions: [
            {
                kind: 'OperationDefinition',
                operation: 'query',
                name: null,
                variableDefinitions: null,
                directives: [],
                selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                        {
                            kind: 'Field',
                            alias: null,
                            name: {
                                kind: 'Name',
                                value: '__typename',
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null,
                        },
                    ],
                },
            },
        ],
    };
    //# sourceMappingURL=utils.js.map

    var __assign$9 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var ApolloCache = /** @class */ (function () {
        function ApolloCache() {
        }
        // optional API
        ApolloCache.prototype.transformDocument = function (document) {
            return document;
        };
        // experimental
        ApolloCache.prototype.transformForLink = function (document) {
            return document;
        };
        // DataProxy API
        /**
         *
         * @param options
         * @param optimistic
         */
        ApolloCache.prototype.readQuery = function (options, optimistic) {
            if (optimistic === void 0) { optimistic = false; }
            return this.read({
                query: options.query,
                variables: options.variables,
                optimistic: optimistic,
            });
        };
        ApolloCache.prototype.readFragment = function (options, optimistic) {
            if (optimistic === void 0) { optimistic = false; }
            return this.read({
                query: getFragmentQueryDocument(options.fragment, options.fragmentName),
                variables: options.variables,
                rootId: options.id,
                optimistic: optimistic,
            });
        };
        ApolloCache.prototype.writeQuery = function (options) {
            this.write({
                dataId: 'ROOT_QUERY',
                result: options.data,
                query: options.query,
                variables: options.variables,
            });
        };
        ApolloCache.prototype.writeFragment = function (options) {
            this.write({
                dataId: options.id,
                result: options.data,
                variables: options.variables,
                query: getFragmentQueryDocument(options.fragment, options.fragmentName),
            });
        };
        ApolloCache.prototype.writeData = function (_a) {
            var id = _a.id, data = _a.data;
            if (typeof id !== 'undefined') {
                var typenameResult = null;
                // Since we can't use fragments without having a typename in the store,
                // we need to make sure we have one.
                // To avoid overwriting an existing typename, we need to read it out first
                // and generate a fake one if none exists.
                try {
                    typenameResult = this.read({
                        rootId: id,
                        optimistic: false,
                        query: justTypenameQuery,
                    });
                }
                catch (e) {
                    // Do nothing, since an error just means no typename exists
                }
                // tslint:disable-next-line
                var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';
                // Add a type here to satisfy the inmemory cache
                var dataToWrite = __assign$9({ __typename: __typename }, data);
                this.writeFragment({
                    id: id,
                    fragment: fragmentFromPojo(dataToWrite, __typename),
                    data: dataToWrite,
                });
            }
            else {
                this.writeQuery({ query: queryFromPojo(data), data: data });
            }
        };
        return ApolloCache;
    }());
    //# sourceMappingURL=cache.js.map

    //# sourceMappingURL=Cache.js.map

    //# sourceMappingURL=index.js.map

    //# sourceMappingURL=index.js.map

    var haveWarned$1 = false;
    /**
     * This fragment matcher is very basic and unable to match union or interface type conditions
     */
    var HeuristicFragmentMatcher = /** @class */ (function () {
        function HeuristicFragmentMatcher() {
            // do nothing
        }
        HeuristicFragmentMatcher.prototype.ensureReady = function () {
            return Promise.resolve();
        };
        HeuristicFragmentMatcher.prototype.canBypassInit = function () {
            return true; // we don't need to initialize this fragment matcher.
        };
        HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {
            var obj = context.store.get(idValue.id);
            if (!obj) {
                return false;
            }
            if (!obj.__typename) {
                if (!haveWarned$1) {
                    console.warn("You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.");
                    console.warn('Could not find __typename on Fragment ', typeCondition, obj);
                    console.warn("DEPRECATION WARNING: using fragments without __typename is unsupported behavior " +
                        "and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.");
                    /* istanbul ignore if */
                    if (!isTest()) {
                        // When running tests, we want to print the warning every time
                        haveWarned$1 = true;
                    }
                }
                context.returnPartialData = true;
                return true;
            }
            if (obj.__typename === typeCondition) {
                return true;
            }
            // XXX here we reach an issue - we don't know if this fragment should match or not. It's either:
            // 1. A fragment on a non-matching concrete type or interface or union
            // 2. A fragment on a matching interface or union
            // If it's 1, we don't want to return anything, if it's 2 we want to match. We can't tell the
            // difference, so we warn the user, but still try to match it (backcompat).
            warnOnceInDevelopment("You are using the simple (heuristic) fragment matcher, but your queries contain union or interface types.\n     Apollo Client will not be able to able to accurately map fragments." +
                "To make this error go away, use the IntrospectionFragmentMatcher as described in the docs: " +
                "https://www.apollographql.com/docs/react/recipes/fragment-matching.html", 'error');
            context.returnPartialData = true;
            return true;
        };
        return HeuristicFragmentMatcher;
    }());
    var IntrospectionFragmentMatcher = /** @class */ (function () {
        function IntrospectionFragmentMatcher(options) {
            if (options && options.introspectionQueryResultData) {
                this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);
                this.isReady = true;
            }
            else {
                this.isReady = false;
            }
            this.match = this.match.bind(this);
        }
        IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {
            if (!this.isReady) {
                // this should basically never happen in proper use.
                throw new Error('FragmentMatcher.match() was called before FragmentMatcher.init()');
            }
            var obj = context.store.get(idValue.id);
            if (!obj) {
                return false;
            }
            if (!obj.__typename) {
                throw new Error("Cannot match fragment because __typename property is missing: " + JSON.stringify(obj));
            }
            if (obj.__typename === typeCondition) {
                return true;
            }
            var implementingTypes = this.possibleTypesMap[typeCondition];
            if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {
                return true;
            }
            return false;
        };
        IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {
            var typeMap = {};
            introspectionResultData.__schema.types.forEach(function (type) {
                if (type.kind === 'UNION' || type.kind === 'INTERFACE') {
                    typeMap[type.name] = type.possibleTypes.map(function (implementingType) { return implementingType.name; });
                }
            });
            return typeMap;
        };
        return IntrospectionFragmentMatcher;
    }());
    //# sourceMappingURL=fragmentMatcher.js.map

    var ObjectCache = /** @class */ (function () {
        function ObjectCache(data) {
            if (data === void 0) { data = {}; }
            this.data = data;
        }
        ObjectCache.prototype.toObject = function () {
            return this.data;
        };
        ObjectCache.prototype.get = function (dataId) {
            return this.data[dataId];
        };
        ObjectCache.prototype.set = function (dataId, value) {
            this.data[dataId] = value;
        };
        ObjectCache.prototype.delete = function (dataId) {
            this.data[dataId] = undefined;
        };
        ObjectCache.prototype.clear = function () {
            this.data = {};
        };
        ObjectCache.prototype.replace = function (newData) {
            this.data = newData || {};
        };
        return ObjectCache;
    }());
    function defaultNormalizedCacheFactory(seed) {
        return new ObjectCache(seed);
    }
    //# sourceMappingURL=objectCache.js.map

    var __extends$6 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$10 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var WriteError = /** @class */ (function (_super) {
        __extends$6(WriteError, _super);
        function WriteError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = 'WriteError';
            return _this;
        }
        return WriteError;
    }(Error));
    function enhanceErrorWithDocument(error, document) {
        // XXX A bit hacky maybe ...
        var enhancedError = new WriteError("Error writing result to store for query:\n " + print(document));
        enhancedError.message += '\n' + error.message;
        enhancedError.stack = error.stack;
        return enhancedError;
    }
    function writeResultToStore(_a) {
        var dataId = _a.dataId, result = _a.result, document = _a.document, _b = _a.storeFactory, storeFactory = _b === void 0 ? defaultNormalizedCacheFactory : _b, _c = _a.store, store = _c === void 0 ? storeFactory() : _c, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;
        // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.
        var operationDefinition = getOperationDefinition(document);
        var selectionSet = operationDefinition.selectionSet;
        var fragmentMap = createFragmentMap(getFragmentDefinitions(document));
        variables = assign$2({}, getDefaultValues(operationDefinition), variables);
        try {
            return writeSelectionSetToStore({
                result: result,
                dataId: dataId,
                selectionSet: selectionSet,
                context: {
                    store: store,
                    storeFactory: storeFactory,
                    processedData: {},
                    variables: variables,
                    dataIdFromObject: dataIdFromObject,
                    fragmentMap: fragmentMap,
                    fragmentMatcherFunction: fragmentMatcherFunction,
                },
            });
        }
        catch (e) {
            throw enhanceErrorWithDocument(e, document);
        }
    }
    function writeSelectionSetToStore(_a) {
        var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, context = _a.context;
        var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;
        selectionSet.selections.forEach(function (selection) {
            var included = shouldInclude(selection, variables);
            if (isField(selection)) {
                var resultFieldKey = resultKeyNameFromField(selection);
                var value = result[resultFieldKey];
                if (included) {
                    if (typeof value !== 'undefined') {
                        writeFieldToStore({
                            dataId: dataId,
                            value: value,
                            field: selection,
                            context: context,
                        });
                    }
                    else {
                        // if this is a defered field we don't need to throw / wanr
                        var isDefered = selection.directives &&
                            selection.directives.length &&
                            selection.directives.some(function (directive) { return directive.name && directive.name.value === 'defer'; });
                        if (!isDefered && context.fragmentMatcherFunction) {
                            // XXX We'd like to throw an error, but for backwards compatibility's sake
                            // we just print a warning for the time being.
                            //throw new WriteError(`Missing field ${resultFieldKey} in ${JSON.stringify(result, null, 2).substring(0, 100)}`);
                            if (!isProduction()) {
                                console.warn("Missing field " + resultFieldKey + " in " + JSON.stringify(result, null, 2).substring(0, 100));
                            }
                        }
                    }
                }
            }
            else {
                // This is not a field, so it must be a fragment, either inline or named
                var fragment = void 0;
                if (isInlineFragment(selection)) {
                    fragment = selection;
                }
                else {
                    // Named fragment
                    fragment = (fragmentMap || {})[selection.name.value];
                    if (!fragment) {
                        throw new Error("No fragment named " + selection.name.value + ".");
                    }
                }
                var matches = true;
                if (context.fragmentMatcherFunction && fragment.typeCondition) {
                    // TODO we need to rewrite the fragment matchers for this to work properly and efficiently
                    // Right now we have to pretend that we're passing in an idValue and that there's a store
                    // on the context.
                    var idValue = toIdValue({ id: 'self', typename: undefined });
                    var fakeContext = {
                        // NOTE: fakeContext always uses ObjectCache
                        // since this is only to ensure the return value of 'matches'
                        store: new ObjectCache({ self: result }),
                        returnPartialData: false,
                        hasMissingField: false,
                        cacheRedirects: {},
                    };
                    matches = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);
                    if (!isProduction() && fakeContext.returnPartialData) {
                        console.error('WARNING: heuristic fragment matching going on!');
                    }
                }
                if (included && matches) {
                    writeSelectionSetToStore({
                        result: result,
                        selectionSet: fragment.selectionSet,
                        dataId: dataId,
                        context: context,
                    });
                }
            }
        });
        return store;
    }
    // Checks if the id given is an id that was generated by Apollo
    // rather than by dataIdFromObject.
    function isGeneratedId(id) {
        return id[0] === '$';
    }
    function mergeWithGenerated(generatedKey, realKey, cache) {
        var generated = cache.get(generatedKey);
        var real = cache.get(realKey);
        Object.keys(generated).forEach(function (key) {
            var value = generated[key];
            var realValue = real[key];
            if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue)) {
                mergeWithGenerated(value.id, realValue.id, cache);
            }
            cache.delete(generatedKey);
            cache.set(realKey, __assign$10({}, generated, real));
        });
    }
    function isDataProcessed(dataId, field, processedData) {
        if (!processedData) {
            return false;
        }
        if (processedData[dataId]) {
            if (processedData[dataId].indexOf(field) >= 0) {
                return true;
            }
            else {
                processedData[dataId].push(field);
            }
        }
        else {
            processedData[dataId] = [field];
        }
        return false;
    }
    function writeFieldToStore(_a) {
        var field = _a.field, value = _a.value, dataId = _a.dataId, context = _a.context;
        var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;
        var storeValue;
        var storeObject;
        var storeFieldName = storeKeyNameFromField(field, variables);
        // specifies if we need to merge existing keys in the store
        var shouldMerge = false;
        // If we merge, this will be the generatedKey
        var generatedKey = '';
        // If this is a scalar value...
        if (!field.selectionSet || value === null) {
            storeValue =
                value != null && typeof value === 'object'
                    ?
                        // an id.
                        { type: 'json', json: value }
                    :
                        value;
        }
        else if (Array.isArray(value)) {
            var generatedId = dataId + "." + storeFieldName;
            storeValue = processArrayValue(value, generatedId, field.selectionSet, context);
        }
        else {
            // It's an object
            var valueDataId = dataId + "." + storeFieldName;
            var generated = true;
            // We only prepend the '$' if the valueDataId isn't already a generated
            // id.
            if (!isGeneratedId(valueDataId)) {
                valueDataId = '$' + valueDataId;
            }
            if (dataIdFromObject) {
                var semanticId = dataIdFromObject(value);
                // We throw an error if the first character of the id is '$. This is
                // because we use that character to designate an Apollo-generated id
                // and we use the distinction between user-desiginated and application-provided
                // ids when managing overwrites.
                if (semanticId && isGeneratedId(semanticId)) {
                    throw new Error('IDs returned by dataIdFromObject cannot begin with the "$" character.');
                }
                if (semanticId) {
                    valueDataId = semanticId;
                    generated = false;
                }
            }
            if (!isDataProcessed(valueDataId, field, context.processedData)) {
                writeSelectionSetToStore({
                    dataId: valueDataId,
                    result: value,
                    selectionSet: field.selectionSet,
                    context: context,
                });
            }
            // We take the id and escape it (i.e. wrap it with an enclosing object).
            // This allows us to distinguish IDs from normal scalars.
            var typename = value.__typename;
            storeValue = toIdValue({ id: valueDataId, typename: typename }, generated);
            // check if there was a generated id at the location where we're
            // about to place this new id. If there was, we have to merge the
            // data from that id with the data we're about to write in the store.
            storeObject = store.get(dataId);
            var escapedId = storeObject && storeObject[storeFieldName];
            if (escapedId !== storeValue && isIdValue(escapedId)) {
                var hadTypename = escapedId.typename !== undefined;
                var hasTypename = typename !== undefined;
                var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;
                // If there is already a real id in the store and the current id we
                // are dealing with is generated, we throw an error.
                // One exception we allow is when the typename has changed, which occurs
                // when schema defines a union, both with and without an ID in the same place.
                // checks if we "lost" the read id
                if (generated && !escapedId.generated && !typenameChanged) {
                    throw new Error("Store error: the application attempted to write an object with no provided id" +
                        (" but the store already contains an id of " + escapedId.id + " for this object. The selectionSet") +
                        " that was trying to be written is:\n" +
                        print(field));
                }
                // checks if we "lost" the typename
                if (hadTypename && !hasTypename) {
                    throw new Error("Store error: the application attempted to write an object with no provided typename" +
                        (" but the store already contains an object with typename of " + escapedId.typename + " for the object of id " + escapedId.id + ". The selectionSet") +
                        " that was trying to be written is:\n" +
                        print(field));
                }
                if (escapedId.generated) {
                    generatedKey = escapedId.id;
                    // we should only merge if it's an object of the same type
                    // otherwise, we should delete the generated object
                    if (typenameChanged) {
                        store.delete(generatedKey);
                    }
                    else {
                        shouldMerge = true;
                    }
                }
            }
        }
        var newStoreObj = __assign$10({}, store.get(dataId), (_b = {}, _b[storeFieldName] = storeValue, _b));
        if (shouldMerge) {
            mergeWithGenerated(generatedKey, storeValue.id, store);
        }
        storeObject = store.get(dataId);
        if (!storeObject || storeValue !== storeObject[storeFieldName]) {
            store.set(dataId, newStoreObj);
        }
        var _b;
    }
    function processArrayValue(value, generatedId, selectionSet, context) {
        return value.map(function (item, index) {
            if (item === null) {
                return null;
            }
            var itemDataId = generatedId + "." + index;
            if (Array.isArray(item)) {
                return processArrayValue(item, itemDataId, selectionSet, context);
            }
            var generated = true;
            if (context.dataIdFromObject) {
                var semanticId = context.dataIdFromObject(item);
                if (semanticId) {
                    itemDataId = semanticId;
                    generated = false;
                }
            }
            if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {
                writeSelectionSetToStore({
                    dataId: itemDataId,
                    result: item,
                    selectionSet: selectionSet,
                    context: context,
                });
            }
            return toIdValue({ id: itemDataId, typename: item.__typename }, generated);
        });
    }
    //# sourceMappingURL=writeToStore.js.map

    /* Based on graphql function from graphql-js:
     *
     * graphql(
     *   schema: GraphQLSchema,
     *   requestString: string,
     *   rootValue?: ?any,
     *   contextValue?: ?any,
     *   variableValues?: ?{[key: string]: any},
     *   operationName?: ?string
     * ): Promise<GraphQLResult>
     *
     * The default export as of graphql-anywhere is sync as of 4.0,
     * but below is an exported alternative that is async.
     * In the 5.0 version, this will be the only export again
     * and it will be async
     *
     */
    function graphql$1(resolver, document, rootValue, contextValue, variableValues, execOptions) {
        if (execOptions === void 0) { execOptions = {}; }
        var mainDefinition = getMainDefinition(document);
        var fragments = getFragmentDefinitions(document);
        var fragmentMap = createFragmentMap(fragments);
        var resultMapper = execOptions.resultMapper;
        // Default matcher always matches all fragments
        var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });
        var execContext = {
            fragmentMap: fragmentMap,
            contextValue: contextValue,
            variableValues: variableValues,
            resultMapper: resultMapper,
            resolver: resolver,
            fragmentMatcher: fragmentMatcher,
        };
        return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);
    }
    function executeSelectionSet(selectionSet, rootValue, execContext) {
        var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;
        var result = {};
        selectionSet.selections.forEach(function (selection) {
            if (!shouldInclude(selection, variables)) {
                // Skip this entirely
                return;
            }
            if (isField(selection)) {
                var fieldResult = executeField(selection, rootValue, execContext);
                var resultFieldKey = resultKeyNameFromField(selection);
                if (fieldResult !== undefined) {
                    if (result[resultFieldKey] === undefined) {
                        result[resultFieldKey] = fieldResult;
                    }
                    else {
                        merge(result[resultFieldKey], fieldResult);
                    }
                }
            }
            else {
                var fragment = void 0;
                if (isInlineFragment(selection)) {
                    fragment = selection;
                }
                else {
                    // This is a named fragment
                    fragment = fragmentMap[selection.name.value];
                    if (!fragment) {
                        throw new Error("No fragment named " + selection.name.value);
                    }
                }
                var typeCondition = fragment.typeCondition.name.value;
                if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {
                    var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);
                    merge(result, fragmentResult);
                }
            }
        });
        if (execContext.resultMapper) {
            return execContext.resultMapper(result, rootValue);
        }
        return result;
    }
    function executeField(field, rootValue, execContext) {
        var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;
        var fieldName = field.name.value;
        var args = argumentsObjectFromField(field, variables);
        var info = {
            isLeaf: !field.selectionSet,
            resultKey: resultKeyNameFromField(field),
            directives: getDirectiveInfoFromField(field, variables),
        };
        var result = resolver(fieldName, rootValue, args, contextValue, info);
        // Handle all scalar types here
        if (!field.selectionSet) {
            return result;
        }
        // From here down, the field has a selection set, which means it's trying to
        // query a GraphQLObjectType
        if (result == null) {
            // Basically any field in a GraphQL response can be null, or missing
            return result;
        }
        if (Array.isArray(result)) {
            return executeSubSelectedArray(field, result, execContext);
        }
        // Returned value is an object, and the query has a sub-selection. Recurse.
        return executeSelectionSet(field.selectionSet, result, execContext);
    }
    function executeSubSelectedArray(field, result, execContext) {
        return result.map(function (item) {
            // null value in array
            if (item === null) {
                return null;
            }
            // This is a nested array, recurse
            if (Array.isArray(item)) {
                return executeSubSelectedArray(field, item, execContext);
            }
            // This is an object, run the selection set on it
            return executeSelectionSet(field.selectionSet, item, execContext);
        });
    }
    function merge(dest, src) {
        if (src === null || typeof src !== 'object') {
            // These types just override whatever was in dest
            return src;
        }
        // Merge sub-objects
        Object.keys(dest).forEach(function (destKey) {
            if (src.hasOwnProperty(destKey)) {
                merge(dest[destKey], src[destKey]);
            }
        });
        // Add props only on src
        Object.keys(src).forEach(function (srcKey) {
            if (!dest.hasOwnProperty(srcKey)) {
                dest[srcKey] = src[srcKey];
            }
        });
    }
    //# sourceMappingURL=graphql.js.map

    //# sourceMappingURL=utilities.js.map

    //# sourceMappingURL=index.js.map

    var __assign$11 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    /**
     * The key which the cache id for a given value is stored in the result object. This key is private
     * and should not be used by Apollo client users.
     *
     * Uses a symbol if available in the environment.
     *
     * @private
     */
    var ID_KEY = typeof Symbol !== 'undefined' ? Symbol('id') : '@@id';
    /**
     * Resolves the result of a query solely from the store (i.e. never hits the server).
     *
     * @param {Store} store The {@link NormalizedCache} used by Apollo for the `data` portion of the
     * store.
     *
     * @param {DocumentNode} query The query document to resolve from the data available in the store.
     *
     * @param {Object} [variables] A map from the name of a variable to its value. These variables can
     * be referenced by the query document.
     *
     * @param {any} previousResult The previous result returned by this function for the same query.
     * If nothing in the store changed since that previous result then values from the previous result
     * will be returned to preserve referential equality.
     */
    function readQueryFromStore(options) {
        var optsPatch = { returnPartialData: false };
        return diffQueryAgainstStore(__assign$11({}, options, optsPatch)).result;
    }
    var readStoreResolver = function (fieldName, idValue, args, context, _a) {
        var resultKey = _a.resultKey, directives = _a.directives;
        assertIdValue(idValue);
        var objId = idValue.id;
        var obj = context.store.get(objId);
        var storeKeyName = getStoreKeyName(fieldName, args, directives);
        var fieldValue = (obj || {})[storeKeyName];
        if (typeof fieldValue === 'undefined') {
            if (context.cacheRedirects &&
                obj &&
                (obj.__typename || objId === 'ROOT_QUERY')) {
                var typename = obj.__typename || 'Query';
                // Look for the type in the custom resolver map
                var type = context.cacheRedirects[typename];
                if (type) {
                    // Look for the field in the custom resolver map
                    var resolver = type[fieldName];
                    if (resolver) {
                        fieldValue = resolver(obj, args, {
                            getCacheKey: function (obj) {
                                return toIdValue({
                                    id: context.dataIdFromObject(obj),
                                    typename: obj.__typename,
                                });
                            },
                        });
                    }
                }
            }
        }
        if (typeof fieldValue === 'undefined') {
            if (!context.returnPartialData) {
                throw new Error("Can't find field " + storeKeyName + " on object (" + objId + ") " + JSON.stringify(obj, null, 2) + ".");
            }
            context.hasMissingField = true;
            return fieldValue;
        }
        // if this is an object scalar, it must be a json blob and we have to unescape it
        if (isJsonValue(fieldValue)) {
            // If the JSON blob is the same now as in the previous result, return the previous result to
            // maintain referential equality.
            //
            // `isEqual` will first perform a referential equality check (with `===`) in case the JSON
            // value has not changed in the store, and then a deep equality check if that fails in case a
            // new JSON object was returned by the API but that object may still be the same.
            if (idValue.previousResult &&
                isEqual(idValue.previousResult[resultKey], fieldValue.json)) {
                return idValue.previousResult[resultKey];
            }
            return fieldValue.json;
        }
        // If we had a previous result, try adding that previous result value for this field to our field
        // value. This will create a new value without mutating the old one.
        if (idValue.previousResult) {
            fieldValue = addPreviousResultToIdValues(fieldValue, idValue.previousResult[resultKey]);
        }
        return fieldValue;
    };
    /**
     * Given a store and a query, return as much of the result as possible and
     * identify if any data was missing from the store.
     * @param  {DocumentNode} query A parsed GraphQL query document
     * @param  {Store} store The Apollo Client store object
     * @param  {any} previousResult The previous result returned by this function for the same query
     * @return {result: Object, complete: [boolean]}
     */
    function diffQueryAgainstStore(_a) {
        var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;
        // Throw the right validation error by trying to find a query in the document
        var queryDefinition = getQueryDefinition(query);
        variables = assign$2({}, getDefaultValues(queryDefinition), variables);
        var context = {
            // Global settings
            store: store,
            returnPartialData: returnPartialData,
            dataIdFromObject: (config && config.dataIdFromObject) || null,
            cacheRedirects: (config && config.cacheRedirects) || {},
            // Flag set during execution
            hasMissingField: false,
        };
        var rootIdValue = {
            type: 'id',
            id: rootId,
            previousResult: previousResult,
        };
        var result = graphql$1(readStoreResolver, query, rootIdValue, context, variables, {
            fragmentMatcher: fragmentMatcherFunction,
            resultMapper: resultMapper,
        });
        return {
            result: result,
            complete: !context.hasMissingField,
        };
    }
    function assertIdValue(idValue) {
        if (!isIdValue(idValue)) {
            throw new Error("Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.");
        }
    }
    /**
     * Adds a previous result value to id values in a nested array. For a single id value and a single
     * previous result then the previous value is added directly.
     *
     * For arrays we put all of the ids from the previous result array in a map and add them to id
     * values with the same id.
     *
     * This function does not mutate. Instead it returns new instances of modified values.
     *
     * @private
     */
    function addPreviousResultToIdValues(value, previousResult) {
        // If the value is an `IdValue`, add the previous result to it whether or not that
        // `previousResult` is undefined.
        //
        // If the value is an array, recurse over each item trying to add the `previousResult` for that
        // item.
        if (isIdValue(value)) {
            return __assign$11({}, value, { previousResult: previousResult });
        }
        else if (Array.isArray(value)) {
            var idToPreviousResult_1 = new Map();
            // If the previous result was an array, we want to build up our map of ids to previous results
            // using the private `ID_KEY` property that is added in `resultMapper`.
            if (Array.isArray(previousResult)) {
                previousResult.forEach(function (item) {
                    // item can be null
                    if (item && item[ID_KEY]) {
                        idToPreviousResult_1.set(item[ID_KEY], item);
                        // idToPreviousResult[item[ID_KEY]] = item;
                    }
                });
            }
            // For every value we want to add the previous result.
            return value.map(function (item, i) {
                // By default the previous result for this item will be in the same array position as this
                // item.
                var itemPreviousResult = previousResult && previousResult[i];
                // If the item is an id value, we should check to see if there is a previous result for this
                // specific id. If there is, that will be the value for `itemPreviousResult`.
                if (isIdValue(item)) {
                    itemPreviousResult =
                        idToPreviousResult_1.get(item.id) || itemPreviousResult;
                }
                return addPreviousResultToIdValues(item, itemPreviousResult);
            });
        }
        // Return the value, nothing changed.
        return value;
    }
    /**
     * Maps a result from `graphql-anywhere` to a final result value.
     *
     * If the result and the previous result from the `idValue` pass a shallow equality test, we just
     * return the `previousResult` to maintain referential equality.
     *
     * We also add a private id property to the result that we can use later on.
     *
     * @private
     */
    function resultMapper(resultFields, idValue) {
        // If we had a previous result, we may be able to return that and preserve referential equality
        if (idValue.previousResult) {
            var currentResultKeys_1 = Object.keys(resultFields);
            var sameAsPreviousResult = 
            // Confirm that we have the same keys in both the current result and the previous result.
            Object.keys(idValue.previousResult).every(function (key) { return currentResultKeys_1.indexOf(key) > -1; }) &&
                // Perform a shallow comparison of the result fields with the previous result. If all of
                // the shallow fields are referentially equal to the fields of the previous result we can
                // just return the previous result.
                //
                // While we do a shallow comparison of objects, but we do a deep comparison of arrays.
                currentResultKeys_1.every(function (key) {
                    return areNestedArrayItemsStrictlyEqual(resultFields[key], idValue.previousResult[key]);
                });
            if (sameAsPreviousResult) {
                return idValue.previousResult;
            }
        }
        // Add the id to the result fields. It should be non-enumerable so users can’t see it without
        // trying very hard.
        Object.defineProperty(resultFields, ID_KEY, {
            enumerable: false,
            configurable: false,
            writable: false,
            value: idValue.id,
        });
        return resultFields;
    }
    /**
     * Compare all the items to see if they are all referentially equal in two arrays no matter how
     * deeply nested the arrays are.
     *
     * @private
     */
    function areNestedArrayItemsStrictlyEqual(a, b) {
        // If `a` and `b` are referentially equal, return true.
        if (a === b) {
            return true;
        }
        // If either `a` or `b` are not an array or not of the same length return false. `a` and `b` are
        // known to not be equal here, we checked above.
        if (!Array.isArray(a) || !Array.isArray(b) || a.length !== b.length) {
            return false;
        }
        // Otherwise let us compare all of the array items (which are potentially nested arrays!) to see
        // if they are equal.
        return a.every(function (item, i) { return areNestedArrayItemsStrictlyEqual(item, b[i]); });
    }
    //# sourceMappingURL=readFromStore.js.map

    var __assign$12 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var RecordingCache = /** @class */ (function () {
        function RecordingCache(data) {
            if (data === void 0) { data = {}; }
            this.data = data;
            this.recordedData = {};
        }
        RecordingCache.prototype.record = function (transaction) {
            transaction(this);
            var recordedData = this.recordedData;
            this.recordedData = {};
            return recordedData;
        };
        RecordingCache.prototype.toObject = function () {
            return __assign$12({}, this.data, this.recordedData);
        };
        RecordingCache.prototype.get = function (dataId) {
            if (this.recordedData.hasOwnProperty(dataId)) {
                // recording always takes precedence:
                return this.recordedData[dataId];
            }
            return this.data[dataId];
        };
        RecordingCache.prototype.set = function (dataId, value) {
            if (this.get(dataId) !== value) {
                this.recordedData[dataId] = value;
            }
        };
        RecordingCache.prototype.delete = function (dataId) {
            this.recordedData[dataId] = undefined;
        };
        RecordingCache.prototype.clear = function () {
            var _this = this;
            Object.keys(this.data).forEach(function (dataId) { return _this.delete(dataId); });
            this.recordedData = {};
        };
        RecordingCache.prototype.replace = function (newData) {
            this.clear();
            this.recordedData = __assign$12({}, newData);
        };
        return RecordingCache;
    }());
    function record(startingState, transaction) {
        var recordingCache = new RecordingCache(startingState);
        return recordingCache.record(transaction);
    }
    //# sourceMappingURL=recordingCache.js.map

    var __extends$7 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$13 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    var defaultConfig = {
        fragmentMatcher: new HeuristicFragmentMatcher(),
        dataIdFromObject: defaultDataIdFromObject,
        addTypename: true,
        storeFactory: defaultNormalizedCacheFactory,
    };
    function defaultDataIdFromObject(result) {
        if (result.__typename) {
            if (result.id !== undefined) {
                return result.__typename + ":" + result.id;
            }
            if (result._id !== undefined) {
                return result.__typename + ":" + result._id;
            }
        }
        return null;
    }
    var InMemoryCache = /** @class */ (function (_super) {
        __extends$7(InMemoryCache, _super);
        function InMemoryCache(config) {
            if (config === void 0) { config = {}; }
            var _this = _super.call(this) || this;
            _this.optimistic = [];
            _this.watches = [];
            // Set this while in a transaction to prevent broadcasts...
            // don't forget to turn it back on!
            _this.silenceBroadcast = false;
            _this.config = __assign$13({}, defaultConfig, config);
            // backwards compat
            if (_this.config.customResolvers) {
                console.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');
                _this.config.cacheRedirects = _this.config.customResolvers;
            }
            if (_this.config.cacheResolvers) {
                console.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');
                _this.config.cacheRedirects = _this.config.cacheResolvers;
            }
            _this.addTypename = _this.config.addTypename;
            _this.data = _this.config.storeFactory();
            return _this;
        }
        InMemoryCache.prototype.restore = function (data) {
            if (data)
                this.data.replace(data);
            return this;
        };
        InMemoryCache.prototype.extract = function (optimistic) {
            if (optimistic === void 0) { optimistic = false; }
            if (optimistic && this.optimistic.length > 0) {
                var patches = this.optimistic.map(function (opt) { return opt.data; });
                return Object.assign.apply(Object, [{}, this.data.toObject()].concat(patches));
            }
            return this.data.toObject();
        };
        InMemoryCache.prototype.read = function (query) {
            if (query.rootId && this.data.get(query.rootId) === undefined) {
                return null;
            }
            return readQueryFromStore({
                store: this.config.storeFactory(this.extract(query.optimistic)),
                query: this.transformDocument(query.query),
                variables: query.variables,
                rootId: query.rootId,
                fragmentMatcherFunction: this.config.fragmentMatcher.match,
                previousResult: query.previousResult,
                config: this.config,
            });
        };
        InMemoryCache.prototype.write = function (write) {
            writeResultToStore({
                dataId: write.dataId,
                result: write.result,
                variables: write.variables,
                document: this.transformDocument(write.query),
                store: this.data,
                dataIdFromObject: this.config.dataIdFromObject,
                fragmentMatcherFunction: this.config.fragmentMatcher.match,
            });
            this.broadcastWatches();
        };
        InMemoryCache.prototype.diff = function (query) {
            return diffQueryAgainstStore({
                store: this.config.storeFactory(this.extract(query.optimistic)),
                query: this.transformDocument(query.query),
                variables: query.variables,
                returnPartialData: query.returnPartialData,
                previousResult: query.previousResult,
                fragmentMatcherFunction: this.config.fragmentMatcher.match,
                config: this.config,
            });
        };
        InMemoryCache.prototype.watch = function (watch) {
            var _this = this;
            this.watches.push(watch);
            return function () {
                _this.watches = _this.watches.filter(function (c) { return c !== watch; });
            };
        };
        InMemoryCache.prototype.evict = function (query) {
            throw new Error("eviction is not implemented on InMemory Cache");
        };
        InMemoryCache.prototype.reset = function () {
            this.data.clear();
            this.broadcastWatches();
            return Promise.resolve();
        };
        InMemoryCache.prototype.removeOptimistic = function (id) {
            var _this = this;
            // Throw away optimistic changes of that particular mutation
            var toPerform = this.optimistic.filter(function (item) { return item.id !== id; });
            this.optimistic = [];
            // Re-run all of our optimistic data actions on top of one another.
            toPerform.forEach(function (change) {
                _this.recordOptimisticTransaction(change.transaction, change.id);
            });
            this.broadcastWatches();
        };
        InMemoryCache.prototype.performTransaction = function (transaction) {
            // TODO: does this need to be different, or is this okay for an in-memory cache?
            var alreadySilenced = this.silenceBroadcast;
            this.silenceBroadcast = true;
            transaction(this);
            if (!alreadySilenced) {
                // Don't un-silence since this is a nested transaction
                // (for example, a transaction inside an optimistic record)
                this.silenceBroadcast = false;
            }
            this.broadcastWatches();
        };
        InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {
            var _this = this;
            this.silenceBroadcast = true;
            var patch = record(this.extract(true), function (recordingCache) {
                // swapping data instance on 'this' is currently necessary
                // because of the current architecture
                var dataCache = _this.data;
                _this.data = recordingCache;
                _this.performTransaction(transaction);
                _this.data = dataCache;
            });
            this.optimistic.push({
                id: id,
                transaction: transaction,
                data: patch,
            });
            this.silenceBroadcast = false;
            this.broadcastWatches();
        };
        InMemoryCache.prototype.transformDocument = function (document) {
            if (this.addTypename)
                return addTypenameToDocument(document);
            return document;
        };
        InMemoryCache.prototype.readQuery = function (options, optimistic) {
            if (optimistic === void 0) { optimistic = false; }
            return this.read({
                query: options.query,
                variables: options.variables,
                optimistic: optimistic,
            });
        };
        InMemoryCache.prototype.readFragment = function (options, optimistic) {
            if (optimistic === void 0) { optimistic = false; }
            return this.read({
                query: this.transformDocument(getFragmentQueryDocument(options.fragment, options.fragmentName)),
                variables: options.variables,
                rootId: options.id,
                optimistic: optimistic,
            });
        };
        InMemoryCache.prototype.writeQuery = function (options) {
            this.write({
                dataId: 'ROOT_QUERY',
                result: options.data,
                query: this.transformDocument(options.query),
                variables: options.variables,
            });
        };
        InMemoryCache.prototype.writeFragment = function (options) {
            this.write({
                dataId: options.id,
                result: options.data,
                query: this.transformDocument(getFragmentQueryDocument(options.fragment, options.fragmentName)),
                variables: options.variables,
            });
        };
        InMemoryCache.prototype.broadcastWatches = function () {
            var _this = this;
            // Skip this when silenced (like inside a transaction)
            if (this.silenceBroadcast)
                return;
            // right now, we invalidate all queries whenever anything changes
            this.watches.forEach(function (c) {
                var newData = _this.diff({
                    query: c.query,
                    variables: c.variables,
                    // TODO: previousResult isn't in the types - this will only work
                    // with ObservableQuery which is in a different package
                    previousResult: c.previousResult && c.previousResult(),
                    optimistic: c.optimistic,
                });
                c.callback(newData);
            });
        };
        return InMemoryCache;
    }(ApolloCache));
    //# sourceMappingURL=inMemoryCache.js.map

    //# sourceMappingURL=index.js.map

    var Observable_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    // === Symbol Support ===

    var hasSymbols = function () {
      return typeof Symbol === 'function';
    };
    var hasSymbol = function (name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function (name) {
      return hasSymbol(name) ? Symbol[name] : '@@' + name;
    };

    if (hasSymbols() && !hasSymbol('observable')) {
      Symbol.observable = Symbol('observable');
    }

    // === Abstract Operations ===

    function getMethod(obj, key) {
      var value = obj[key];

      if (value == null) return undefined;

      if (typeof value !== 'function') throw new TypeError(value + ' is not a function');

      return value;
    }

    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== undefined) {
        ctor = ctor[getSymbol('species')];
        if (ctor === null) {
          ctor = undefined;
        }
      }
      return ctor !== undefined ? ctor : Observable;
    }

    function isObservable(x) {
      return x instanceof Observable; // SPEC: Brand check
    }

    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function () {
          throw e;
        });
      }
    }

    function enqueue(fn) {
      Promise.resolve().then(function () {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }

    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === undefined) return;

      subscription._cleanup = undefined;

      if (!cleanup) {
        return;
      }

      try {
        if (typeof cleanup === 'function') {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, 'unsubscribe');
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }

    function closeSubscription(subscription) {
      subscription._observer = undefined;
      subscription._queue = undefined;
      subscription._state = 'closed';
    }

    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = undefined;
      subscription._state = 'ready';
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === 'closed') break;
      }
    }

    function notifySubscription(subscription, type, value) {
      subscription._state = 'running';

      var observer = subscription._observer;

      try {
        var m = getMethod(observer, type);
        switch (type) {
          case 'next':
            if (m) m.call(observer, value);
            break;
          case 'error':
            closeSubscription(subscription);
            if (m) m.call(observer, value);else throw value;
            break;
          case 'complete':
            closeSubscription(subscription);
            if (m) m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }

      if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
    }

    function onNotify(subscription, type, value) {
      if (subscription._state === 'closed') return;

      if (subscription._state === 'buffering') {
        subscription._queue.push({ type: type, value: value });
        return;
      }

      if (subscription._state !== 'ready') {
        subscription._state = 'buffering';
        subscription._queue = [{ type: type, value: value }];
        enqueue(function () {
          return flushSubscription(subscription);
        });
        return;
      }

      notifySubscription(subscription, type, value);
    }

    var Subscription = function () {
      function Subscription(observer, subscriber) {
        _classCallCheck(this, Subscription);

        // ASSERT: observer is an object
        // ASSERT: subscriber is callable

        this._cleanup = undefined;
        this._observer = observer;
        this._queue = undefined;
        this._state = 'initializing';

        var subscriptionObserver = new SubscriptionObserver(this);

        try {
          this._cleanup = subscriber.call(undefined, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }

        if (this._state === 'initializing') this._state = 'ready';
      }

      _createClass(Subscription, [{
        key: 'unsubscribe',
        value: function unsubscribe() {
          if (this._state !== 'closed') {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: 'closed',
        get: function () {
          return this._state === 'closed';
        }
      }]);

      return Subscription;
    }();

    var SubscriptionObserver = function () {
      function SubscriptionObserver(subscription) {
        _classCallCheck(this, SubscriptionObserver);

        this._subscription = subscription;
      }

      _createClass(SubscriptionObserver, [{
        key: 'next',
        value: function next(value) {
          onNotify(this._subscription, 'next', value);
        }
      }, {
        key: 'error',
        value: function error(value) {
          onNotify(this._subscription, 'error', value);
        }
      }, {
        key: 'complete',
        value: function complete() {
          onNotify(this._subscription, 'complete');
        }
      }, {
        key: 'closed',
        get: function () {
          return this._subscription._state === 'closed';
        }
      }]);

      return SubscriptionObserver;
    }();

    var Observable = exports.Observable = function () {
      function Observable(subscriber) {
        _classCallCheck(this, Observable);

        if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');

        if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');

        this._subscriber = subscriber;
      }

      _createClass(Observable, [{
        key: 'subscribe',
        value: function subscribe(observer) {
          if (typeof observer !== 'object' || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: 'forEach',
        value: function forEach(fn) {
          var _this = this;

          return new Promise(function (resolve, reject) {
            if (typeof fn !== 'function') {
              reject(new TypeError(fn + ' is not a function'));
              return;
            }

            function done() {
              subscription.unsubscribe();
              resolve();
            }

            var subscription = _this.subscribe({
              next: function (value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },

              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: 'map',
        value: function map(fn) {
          var _this2 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

          var C = getSpecies(this);

          return new C(function (observer) {
            return _this2.subscribe({
              next: function (value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: 'filter',
        value: function filter(fn) {
          var _this3 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

          var C = getSpecies(this);

          return new C(function (observer) {
            return _this3.subscribe({
              next: function (value) {
                try {
                  if (!fn(value)) return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: 'reduce',
        value: function reduce(fn) {
          var _this4 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;

          return new C(function (observer) {
            return _this4.subscribe({
              next: function (value) {
                var first = !hasValue;
                hasValue = true;

                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));

                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: 'concat',
        value: function concat() {
          var _this5 = this;

          for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }

          var C = getSpecies(this);

          return new C(function (observer) {
            var subscription = void 0;

            function startNext(next) {
              subscription = next.subscribe({
                next: function (v) {
                  observer.next(v);
                },
                error: function (e) {
                  observer.error(e);
                },
                complete: function () {
                  if (sources.length === 0) {
                    subscription = undefined;
                    observer.complete();
                  } else {
                    startNext(C.from(sources.shift()));
                  }
                }
              });
            }

            startNext(_this5);

            return function () {
              if (subscription) {
                subscription = undefined;
                subscription.unsubscribe();
              }
            };
          });
        }
      }, {
        key: 'flatMap',
        value: function flatMap(fn) {
          var _this6 = this;

          if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

          var C = getSpecies(this);

          return new C(function (observer) {
            var subscriptions = [];

            var outer = _this6.subscribe({
              next: function (value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }

                var inner = C.from(value).subscribe({
                  next: function (value) {
                    observer.next(value);
                  },
                  error: function (e) {
                    observer.error(e);
                  },
                  complete: function () {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0) subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });

                subscriptions.push(inner);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                completeIfDone();
              }
            });

            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0) observer.complete();
            }

            return function () {
              subscriptions.forEach(function (s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: getSymbol('observable'),
        value: function () {
          return this;
        }
      }], [{
        key: 'from',
        value: function from(x) {
          var C = typeof this === 'function' ? this : Observable;

          if (x == null) throw new TypeError(x + ' is not an object');

          var method = getMethod(x, getSymbol('observable'));
          if (method) {
            var observable = method.call(x);

            if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');

            if (isObservable(observable) && observable.constructor === C) return observable;

            return new C(function (observer) {
              return observable.subscribe(observer);
            });
          }

          if (hasSymbol('iterator')) {
            method = getMethod(x, getSymbol('iterator'));
            if (method) {
              return new C(function (observer) {
                enqueue(function () {
                  if (observer.closed) return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var item = _step.value;

                      observer.next(item);
                      if (observer.closed) return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }

                  observer.complete();
                });
              });
            }
          }

          if (Array.isArray(x)) {
            return new C(function (observer) {
              enqueue(function () {
                if (observer.closed) return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed) return;
                }
                observer.complete();
              });
            });
          }

          throw new TypeError(x + ' is not observable');
        }
      }, {
        key: 'of',
        value: function of() {
          for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }

          var C = typeof this === 'function' ? this : Observable;

          return new C(function (observer) {
            enqueue(function () {
              if (observer.closed) return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed) return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: getSymbol('species'),
        get: function () {
          return this;
        }
      }]);

      return Observable;
    }();

    if (hasSymbols()) {
      Object.defineProperty(Observable, Symbol('extensions'), {
        value: {
          symbol: getSymbol('observable'),
          hostReportError: hostReportError
        },
        configurabe: true
      });
    }
    });

    unwrapExports(Observable_1);
    var Observable_2 = Observable_1.Observable;

    var zenObservable$2 = Observable_1.Observable;

    var Observable$3 = zenObservable$2;
    //# sourceMappingURL=zenObservable.js.map

    //# sourceMappingURL=index.js.map

    var __extends$8 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign$14 = (undefined && undefined.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    function validateOperation$1(operation) {
        var OPERATION_FIELDS = [
            'query',
            'operationName',
            'variables',
            'extensions',
            'context',
        ];
        for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
            var key = _a[_i];
            if (OPERATION_FIELDS.indexOf(key) < 0) {
                throw new Error("illegal argument: " + key);
            }
        }
        return operation;
    }
    var LinkError$1 = /** @class */ (function (_super) {
        __extends$8(LinkError, _super);
        function LinkError(message, link) {
            var _this = _super.call(this, message) || this;
            _this.link = link;
            return _this;
        }
        return LinkError;
    }(Error));
    function isTerminating$1(link) {
        return link.request.length <= 1;
    }
    function transformOperation$1(operation) {
        var transformedOperation = {
            variables: operation.variables || {},
            extensions: operation.extensions || {},
            operationName: operation.operationName,
            query: operation.query,
        };
        // best guess at an operation name
        if (!transformedOperation.operationName) {
            transformedOperation.operationName =
                typeof transformedOperation.query !== 'string'
                    ? getOperationName(transformedOperation.query)
                    : '';
        }
        return transformedOperation;
    }
    function createOperation$1(starting, operation) {
        var context = __assign$14({}, starting);
        var setContext = function (next) {
            if (typeof next === 'function') {
                context = __assign$14({}, context, next(context));
            }
            else {
                context = __assign$14({}, context, next);
            }
        };
        var getContext = function () { return (__assign$14({}, context)); };
        Object.defineProperty(operation, 'setContext', {
            enumerable: false,
            value: setContext,
        });
        Object.defineProperty(operation, 'getContext', {
            enumerable: false,
            value: getContext,
        });
        Object.defineProperty(operation, 'toKey', {
            enumerable: false,
            value: function () { return getKey$1(operation); },
        });
        return operation;
    }
    function getKey$1(operation) {
        // XXX we're assuming here that variables will be serialized in the same order.
        // that might not always be true
        return print(operation.query) + "|" + JSON.stringify(operation.variables) + "|" + operation.operationName;
    }
    //# sourceMappingURL=linkUtils.js.map

    var passthrough$1 = function (op, forward) { return (forward ? forward(op) : Observable$3.of()); };
    var toLink$1 = function (handler) {
        return typeof handler === 'function' ? new ApolloLink$1(handler) : handler;
    };
    var empty$3 = function () {
        return new ApolloLink$1(function (op, forward) { return Observable$3.of(); });
    };
    var from$2 = function (links) {
        if (links.length === 0)
            return empty$3();
        return links.map(toLink$1).reduce(function (x, y) { return x.concat(y); });
    };
    var split$1 = function (test, left, right) {
        if (right === void 0) { right = new ApolloLink$1(passthrough$1); }
        var leftLink = toLink$1(left);
        var rightLink = toLink$1(right);
        if (isTerminating$1(leftLink) && isTerminating$1(rightLink)) {
            return new ApolloLink$1(function (operation) {
                return test(operation)
                    ? leftLink.request(operation) || Observable$3.of()
                    : rightLink.request(operation) || Observable$3.of();
            });
        }
        else {
            return new ApolloLink$1(function (operation, forward) {
                return test(operation)
                    ? leftLink.request(operation, forward) || Observable$3.of()
                    : rightLink.request(operation, forward) || Observable$3.of();
            });
        }
    };
    // join two Links together
    var concat$1 = function (first, second) {
        var firstLink = toLink$1(first);
        if (isTerminating$1(firstLink)) {
            console.warn(new LinkError$1("You are calling concat on a terminating link, which will have no effect", firstLink));
            return firstLink;
        }
        var nextLink = toLink$1(second);
        if (isTerminating$1(nextLink)) {
            return new ApolloLink$1(function (operation) {
                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable$3.of(); }) || Observable$3.of();
            });
        }
        else {
            return new ApolloLink$1(function (operation, forward) {
                return (firstLink.request(operation, function (op) {
                    return nextLink.request(op, forward) || Observable$3.of();
                }) || Observable$3.of());
            });
        }
    };
    var ApolloLink$1 = /** @class */ (function () {
        function ApolloLink(request) {
            if (request)
                this.request = request;
        }
        ApolloLink.prototype.split = function (test, left, right) {
            if (right === void 0) { right = new ApolloLink(passthrough$1); }
            return this.concat(split$1(test, left, right));
        };
        ApolloLink.prototype.concat = function (next) {
            return concat$1(this, next);
        };
        ApolloLink.prototype.request = function (operation, forward) {
            throw new Error('request is not implemented');
        };
        ApolloLink.empty = empty$3;
        ApolloLink.from = from$2;
        ApolloLink.split = split$1;
        ApolloLink.execute = execute$2;
        return ApolloLink;
    }());
    function execute$2(link, operation) {
        return (link.request(createOperation$1(operation.context, transformOperation$1(validateOperation$1(operation)))) || Observable$3.of());
    }
    //# sourceMappingURL=link.js.map

    //# sourceMappingURL=index.js.map

    var __extends$9 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var SchemaLink = /** @class */ (function (_super) {
        __extends$9(SchemaLink, _super);
        function SchemaLink(_a) {
            var schema = _a.schema, rootValue = _a.rootValue, context = _a.context;
            var _this = _super.call(this) || this;
            _this.schema = schema;
            _this.rootValue = rootValue;
            _this.context = context;
            return _this;
        }
        SchemaLink.prototype.request = function (operation) {
            var _this = this;
            return new Observable$3(function (observer) {
                Promise.resolve(execute(_this.schema, operation.query, _this.rootValue, typeof _this.context === 'function'
                    ? _this.context(operation)
                    : _this.context, operation.variables, operation.operationName))
                    .then(function (data) {
                    if (!observer.closed) {
                        observer.next(data);
                        observer.complete();
                    }
                })
                    .catch(function (error) {
                    if (!observer.closed) {
                        observer.error(error);
                    }
                });
            });
        };
        return SchemaLink;
    }(ApolloLink$1));
    //# sourceMappingURL=schemaLink.js.map

    //# sourceMappingURL=index.js.map

    var parse$1 = parser.parse;

    // Strip insignificant whitespace
    // Note that this could do a lot more, such as reorder fields etc.
    function normalize(string) {
      return string.replace(/[\s,]+/g, ' ').trim();
    }

    // A map docString -> graphql document
    var docCache = {};

    // A map fragmentName -> [normalized source]
    var fragmentSourceMap = {};

    function cacheKeyFromLoc(loc) {
      return normalize(loc.source.body.substring(loc.start, loc.end));
    }

    // For testing.
    function resetCaches() {
      docCache = {};
      fragmentSourceMap = {};
    }

    // Take a unstripped parsed document (query/mutation or even fragment), and
    // check all fragment definitions, checking for name->source uniqueness.
    // We also want to make sure only unique fragments exist in the document.
    var printFragmentWarnings = true;
    function processFragments(ast) {
      var astFragmentMap = {};
      var definitions = [];

      for (var i = 0; i < ast.definitions.length; i++) {
        var fragmentDefinition = ast.definitions[i];

        if (fragmentDefinition.kind === 'FragmentDefinition') {
          var fragmentName = fragmentDefinition.name.value;
          var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);

          // We know something about this fragment
          if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {

            // this is a problem because the app developer is trying to register another fragment with
            // the same name as one previously registered. So, we tell them about it.
            if (printFragmentWarnings) {
              console.warn("Warning: fragment with name " + fragmentName + " already exists.\n"
                + "graphql-tag enforces all fragment names across your application to be unique; read more about\n"
                + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
            }

            fragmentSourceMap[fragmentName][sourceKey] = true;

          } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {
            fragmentSourceMap[fragmentName] = {};
            fragmentSourceMap[fragmentName][sourceKey] = true;
          }

          if (!astFragmentMap[sourceKey]) {
            astFragmentMap[sourceKey] = true;
            definitions.push(fragmentDefinition);
          }
        } else {
          definitions.push(fragmentDefinition);
        }
      }

      ast.definitions = definitions;
      return ast;
    }

    function disableFragmentWarnings() {
      printFragmentWarnings = false;
    }

    function stripLoc(doc, removeLocAtThisLevel) {
      var docType = Object.prototype.toString.call(doc);

      if (docType === '[object Array]') {
        return doc.map(function (d) {
          return stripLoc(d, removeLocAtThisLevel);
        });
      }

      if (docType !== '[object Object]') {
        throw new Error('Unexpected input.');
      }

      // We don't want to remove the root loc field so we can use it
      // for fragment substitution (see below)
      if (removeLocAtThisLevel && doc.loc) {
        delete doc.loc;
      }

      // https://github.com/apollographql/graphql-tag/issues/40
      if (doc.loc) {
        delete doc.loc.startToken;
        delete doc.loc.endToken;
      }

      var keys = Object.keys(doc);
      var key;
      var value;
      var valueType;

      for (key in keys) {
        if (keys.hasOwnProperty(key)) {
          value = doc[keys[key]];
          valueType = Object.prototype.toString.call(value);

          if (valueType === '[object Object]' || valueType === '[object Array]') {
            doc[keys[key]] = stripLoc(value, true);
          }
        }
      }

      return doc;
    }

    var experimentalFragmentVariables = false;
    function parseDocument$1(doc) {
      var cacheKey = normalize(doc);

      if (docCache[cacheKey]) {
        return docCache[cacheKey];
      }

      var parsed = parse$1(doc, { experimentalFragmentVariables: experimentalFragmentVariables });
      if (!parsed || parsed.kind !== 'Document') {
        throw new Error('Not a valid GraphQL document.');
      }

      // check that all "new" fragments inside the documents are consistent with
      // existing fragments of the same name
      parsed = processFragments(parsed);
      parsed = stripLoc(parsed, false);
      docCache[cacheKey] = parsed;

      return parsed;
    }

    function enableExperimentalFragmentVariables() {
      experimentalFragmentVariables = true;
    }

    function disableExperimentalFragmentVariables() {
      experimentalFragmentVariables = false;
    }

    // XXX This should eventually disallow arbitrary string interpolation, like Relay does
    function gql(/* arguments */) {
      var args = Array.prototype.slice.call(arguments);

      var literals = args[0];

      // We always get literals[0] and then matching post literals for each arg given
      var result = (typeof(literals) === "string") ? literals : literals[0];

      for (var i = 1; i < args.length; i++) {
        if (args[i] && args[i].kind && args[i].kind === 'Document') {
          result += args[i].loc.source.body;
        } else {
          result += args[i];
        }

        result += literals[i];
      }

      return parseDocument$1(result);
    }

    // Support typescript, which isn't as nice as Babel about default exports
    gql.default = gql;
    gql.resetCaches = resetCaches;
    gql.disableFragmentWarnings = disableFragmentWarnings;
    gql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
    gql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;

    var src = gql;

    const typeDefs = `

type Post @model {
  id: ID! @unique
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean! @default(value: "false")
  title: String!
  text: String!
  author: User @relation(name: "PostsonAuthor")
	test: String
	user: User @relation(name: "ProfileonUser")
}

type User @model {
  id: ID! @unique
  email: String! @unique
  password: String
	name: String!
	age: Int
  posts: [Post]! @relation(name: "PostsonAuthor")
	profile: Post @relation(name: "ProfileonUser")
}


`;
    const fortuneOptions = { settings: { enforceLinks: true } };
    const start = Date.now();
    console.log('GraphQL Genie Started');
    const genie = new GraphQLGenie({ typeDefs, fortuneOptions, generatorOptions: {
            generateGetAll: true,
            generateCreate: true,
            generateUpdate: true,
            generateDelete: false,
            generateUpsert: false,
            includeSubscription: false
        } });
    const buildClient = (genie) => __awaiter(undefined, void 0, void 0, function* () {
        const schema = yield genie.getSchema();
        console.log('GraphQL Genie Completed', Date.now() - start);
        const introspectionQueryResultData = yield genie.getFragmentTypes();
        const fragmentMatcher = new IntrospectionFragmentMatcher({
            introspectionQueryResultData
        });
        const client = new ApolloClient({
            link: new SchemaLink({ schema: schema }),
            cache: new InMemoryCache({ fragmentMatcher }),
            connectToDevTools: true
        });
        client.initQueryManager();
        const zeus = yield client.mutate({
            mutation: src `
		mutation {
			createUser(
				input: {
					data: {
						age: 42
						email: "zeus@example.com"
						name: "Zeus"
						posts: {
							create: [{
								title: "Hello World"
								text: "This is my first blog post ever!"
								isPublished: true
							}, {
								title: "My Second Post"
								text: "My first post was good, but this one is better!"
								isPublished: true
							}, {
								title: "Solving World Hunger"
								text: "This is a draft..."
								isPublished: false
							}]
						}
					}
					clientMutationId: "Test"
				}
			) {
				data {
					id
					name
					posts {
						title
					}
				}
				clientMutationId
			}
		}
		`
        });
        console.log(zeus);
        const addPost = yield client.mutate({
            mutation: src `mutation {
			createPost(
				input: {
					data: {
						title: "Genie is great"
						isPublished: false
						text: "Look how fast I can create an executable schema"
						author: {
							connect:{
								email: "zeus@example.com"
							}
						}
					}
				}
			) {
				data {
					id
					author {
						email
					}
				}
			}
		}
		`
        });
        console.log(addPost);
        const updateZeus = yield client.mutate({
            mutation: src `mutation {
			updateUser(
				input: {
					data: {
						age: 43
						profile: {
							create: {
								title: "I'm a god"
								text: "No literally I am the God of thunder"
								isPublished: true
							}
						}
					}
					where: {
						email: "zeus@example.com"
					}
				}
			) {
				data {
					id
					name
					profile {
						id
						title
						text
					}
				}
			}
		}
		`
        });
        console.log(updateZeus);
        // mutation {
        // 	updateUser(
        // 		input: {
        // 			data: {
        // 				profile: {
        // 					disconnect: true
        // 				}
        // 			}
        // 			where: { 
        // 				email: "zeus@example.com"
        // 			}
        // 		}
        // 	) {
        // 		data {
        // 			id
        // 			name
        // 			profile {
        // 				id
        // 				title
        // 				text
        // 			}
        // 		}
        // 	}
        // }
        // let createPost = gql`
        // 	mutation createPost($title: String!) {
        // 		createPost(title: $title) {
        // 			id
        // 		}
        // 	}
        // `;
        // const createUser = gql`
        // mutation createUser($name: String!, $age: Int, $birthday: Date) {
        // 	createUser(name: $name, age: $age, birthday: $birthday) {
        // 		id
        // 	}
        // }
        // `;
        // const createAddress = gql`
        // mutation createAddress($city: String!) {
        // 	createAddress(city: $city) {
        // 		id
        // 	}
        // }
        // `;
        // 	const post = await client.mutate({
        // 		mutation: createPost,
        // 		variables: { title: 'bam post' }
        // 	});
        // 	const user = await client.mutate({
        // 		mutation: createUser,
        // 		variables: { name: 'Corey', age: 30, birthday: '1988-02-23' }
        // 	});
        // 	const address = await client.mutate({
        // 		mutation: createAddress,
        // 		variables: { city: 'Eau Claire' }
        // 	});
        // 	const testData = {users: [user.data.createUser],
        // 		posts: [post.data.createPost],
        // 		addresses: [address.data.createAddress],
        // 	comments: []};
        // 	console.log('post', testData.posts[0].id,
        // 	'user', user.data.createUser.id,
        // 	'address', address.data.createAddress.id);
        // 	const user2 = await client.mutate({
        // 		mutation: createUser,
        // 		variables: { name: 'Zain', age: 22, birthday: '1996-01-22' }
        // 	});
        // 	testData.users.push(user2.data.createUser);
        // 	const user3 = await client.mutate({
        // 		mutation: createUser,
        // 		variables: { name: 'Steve', age: 26, birthday: '1992-06-02' }
        // 	});
        // 	testData.users.push(user3.data.createUser);
        // 	const setUserAddress = gql`
        // 	mutation setUserAddress($addressAddressId: ID!, $userUserId: ID!) {
        // 		setUserAddress(addressAddressId: $addressAddressId, userUserId: $userUserId	) {
        // 			addressAddress {
        // 				id
        // 				city
        // 				user {
        // 					name
        // 				}
        // 			}
        // 			userUser {
        // 				id
        // 				name
        // 				address {
        // 					city
        // 				}
        // 			}
        // 		}
        // 	}
        // 	`;
        // 	let result = await client.mutate({
        // 		mutation: setUserAddress,
        // 		variables: { userUserId: testData.users[0].id, addressAddressId: testData.addresses[0].id}
        // 	});
        // 	console.log(result);
        // 	const title = 'Genie is great';
        // 	createPost = gql`
        // 		mutation createPost($title: String!, $authorId: ID) {
        // 			createPost(title: $title, authorId: $authorId) {
        // 				id
        // 				title
        // 				author {
        // 					id
        // 					name
        // 				}
        // 			}
        // 		}
        // 		`;
        // 	result = await client.mutate({
        // 		mutation: createPost,
        // 		variables: { title: title, authorId: testData.users[0].id}
        // 	});
        // 	testData.posts.push(result.data.createPost);
        // 	const createComment = gql`
        // 		mutation createComment($title: String!, $postId: ID!, $authorId: ID!, $text: String) {
        // 			createComment(title: $title, postId: $postId, authorId: $authorId, text: $text) {
        // 				id
        // 				title
        // 				author {
        // 					id
        // 					name
        // 				}
        // 			}
        // 		}
        // 		`;
        // 	result = await client.mutate({
        // 		mutation: createComment,
        // 		variables: { title: title + ' Comment', postId: testData.posts[1].id, authorId: testData.users[1].id, text: 'Test Text'}
        // 	});
        // 	testData.comments.push(result.data.createPost);
        // 	const fragment = gql`fragment user on User{
        // 		name
        // 		writtenSubmissions {
        // 			id
        // 			title
        // 		}
        // 	}`;
        // 	const userWithFragment = gql`
        // 		query User($id: ID!) {
        // 			User(id: $id) {
        // 				id
        // 				address {
        // 					id
        // 					city
        // 					user {
        // 						...user
        // 					}
        // 				}
        // 			}
        // 		}
        // 		${fragment}
        // 		`;
        // 	result = await client.query({
        // 		query: userWithFragment,
        // 		variables: { id: testData.users[0].id}
        // 	});
        // 	console.log(result.data);
        // 	const unsetUserAddress = gql`
        // 	mutation unsetUserAddress($addressAddressId: ID!, $userUserId: ID!) {
        // 		unsetUserAddress(addressAddressId: $addressAddressId, userUserId: $userUserId	) {
        // 			addressAddress {
        // 				id
        // 				city
        // 				user {
        // 					name
        // 				}
        // 			}
        // 			userUser {
        // 				id
        // 				name
        // 				address {
        // 					city
        // 				}
        // 			}
        // 		}
        // 	}
        // 	`;
        // result = await client.mutate({
        // 	mutation: unsetUserAddress,
        // 	variables: { userUserId: testData.users[0].id, addressAddressId: testData.addresses[0].id}
        // });
        // console.log(result);
    });
    buildClient(genie);

})));
